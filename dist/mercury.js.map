{"version":3,"file":"mercury.js","sources":["../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/page-num-from-url.js","../src/utils/text/remove-anchor.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/utils/text/excerpt-content.js","../src/utils/text/get-encoding.js","../src/resource/utils/constants.js","../src/resource/utils/fetch-resource.js","../src/resource/utils/dom/normalize-meta-tags.js","../src/utils/dom/constants.js","../src/utils/dom/strip-unlikely-candidates.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/mark-to-keep.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-h-ones.js","../src/utils/dom/clean-attributes.js","../src/utils/dom/remove-empty.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/find-top-candidate.js","../src/utils/dom/clean-tags.js","../src/utils/dom/clean-headers.js","../src/utils/dom/rewrite-top-level.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-meta.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/is-wordpress.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/resource/utils/dom/constants.js","../src/resource/utils/dom/convert-lazy-loaded-images.js","../src/resource/utils/dom/clean.js","../src/resource/index.js","../src/utils/range.js","../src/utils/validate-url.js","../src/utils/merge-supported-domains.js","../src/extractors/add-extractor.js","../src/extractors/custom/blogspot.com/index.js","../src/extractors/custom/nymag.com/index.js","../src/extractors/custom/wikipedia.org/index.js","../src/extractors/custom/twitter.com/index.js","../src/extractors/custom/www.nytimes.com/index.js","../src/extractors/custom/www.theatlantic.com/index.js","../src/extractors/custom/www.newyorker.com/index.js","../src/extractors/custom/www.wired.com/index.js","../src/extractors/custom/www.msn.com/index.js","../src/extractors/custom/www.yahoo.com/index.js","../src/extractors/custom/www.buzzfeed.com/index.js","../src/extractors/custom/fandom.wikia.com/index.js","../src/extractors/custom/www.littlethings.com/index.js","../src/extractors/custom/www.politico.com/index.js","../src/extractors/custom/deadspin.com/index.js","../src/extractors/custom/www.broadwayworld.com/index.js","../src/extractors/custom/www.apartmenttherapy.com/index.js","../src/extractors/custom/medium.com/index.js","../src/extractors/custom/www.tmz.com/index.js","../src/extractors/custom/www.washingtonpost.com/index.js","../src/extractors/custom/www.huffingtonpost.com/index.js","../src/extractors/custom/newrepublic.com/index.js","../src/extractors/custom/money.cnn.com/index.js","../src/extractors/custom/www.theverge.com/index.js","../src/extractors/custom/www.cnn.com/index.js","../src/extractors/custom/www.aol.com/index.js","../src/extractors/custom/www.youtube.com/index.js","../src/extractors/custom/www.theguardian.com/index.js","../src/extractors/custom/www.sbnation.com/index.js","../src/extractors/custom/www.bloomberg.com/index.js","../src/extractors/custom/www.bustle.com/index.js","../src/extractors/custom/www.npr.org/index.js","../src/extractors/custom/www.recode.net/index.js","../src/extractors/custom/qz.com/index.js","../src/extractors/custom/www.dmagazine.com/index.js","../src/extractors/custom/www.reuters.com/index.js","../src/extractors/custom/mashable.com/index.js","../src/extractors/custom/www.chicagotribune.com/index.js","../src/extractors/custom/www.vox.com/index.js","../src/extractors/custom/news.nationalgeographic.com/index.js","../src/extractors/custom/www.nationalgeographic.com/index.js","../src/extractors/custom/www.latimes.com/index.js","../src/extractors/custom/pagesix.com/index.js","../src/extractors/custom/thefederalistpapers.org/index.js","../src/extractors/custom/www.cbssports.com/index.js","../src/extractors/custom/www.msnbc.com/index.js","../src/extractors/custom/www.thepoliticalinsider.com/index.js","../src/extractors/custom/www.mentalfloss.com/index.js","../src/extractors/custom/abcnews.go.com/index.js","../src/extractors/custom/www.nydailynews.com/index.js","../src/extractors/custom/www.cnbc.com/index.js","../src/extractors/custom/www.popsugar.com/index.js","../src/extractors/custom/observer.com/index.js","../src/extractors/custom/people.com/index.js","../src/extractors/custom/www.usmagazine.com/index.js","../src/extractors/custom/www.rollingstone.com/index.js","../src/extractors/custom/247sports.com/index.js","../src/extractors/custom/uproxx.com/index.js","../src/extractors/custom/www.eonline.com/index.js","../src/extractors/custom/www.miamiherald.com/index.js","../src/extractors/custom/www.refinery29.com/index.js","../src/extractors/custom/www.macrumors.com/index.js","../src/extractors/custom/www.androidcentral.com/index.js","../src/extractors/custom/www.si.com/index.js","../src/extractors/custom/www.rawstory.com/index.js","../src/extractors/custom/www.cnet.com/index.js","../src/extractors/custom/www.today.com/index.js","../src/extractors/custom/www.al.com/index.js","../src/extractors/custom/www.thepennyhoarder.com/index.js","../src/extractors/custom/www.westernjournalism.com/index.js","../src/extractors/custom/www.americanow.com/index.js","../src/extractors/custom/sciencefly.com/index.js","../src/extractors/custom/hellogiggles.com/index.js","../src/extractors/custom/thoughtcatalog.com/index.js","../src/extractors/custom/www.inquisitr.com/index.js","../src/extractors/custom/www.nbcnews.com/index.js","../src/extractors/custom/fortune.com/index.js","../src/extractors/custom/www.linkedin.com/index.js","../src/extractors/custom/obamawhitehouse.archives.gov/index.js","../src/extractors/custom/www.opposingviews.com/index.js","../src/extractors/custom/www.prospectmagazine.co.uk/index.js","../src/extractors/custom/forward.com/index.js","../src/extractors/custom/www.qdaily.com/index.js","../src/extractors/custom/gothamist.com/index.js","../src/extractors/custom/www.fool.com/index.js","../src/extractors/custom/www.slate.com/index.js","../src/extractors/custom/ici.radio-canada.ca/index.js","../src/extractors/custom/www.fortinet.com/index.js","../src/extractors/custom/www.fastcompany.com/index.js","../src/extractors/custom/blisterreview.com/index.js","../src/extractors/custom/news.mynavi.jp/index.js","../src/extractors/custom/clinicaltrials.gov/index.js","../src/extractors/custom/github.com/index.js","../src/extractors/custom/www.reddit.com/index.js","../src/extractors/custom/otrs.com/index.js","../src/extractors/custom/www.ossnews.jp/index.js","../src/extractors/custom/buzzap.jp/index.js","../src/extractors/custom/www.asahi.com/index.js","../src/extractors/custom/www.sanwa.co.jp/index.js","../src/extractors/custom/www.elecom.co.jp/index.js","../src/extractors/custom/scan.netsecurity.ne.jp/index.js","../src/extractors/custom/jvndb.jvn.jp/index.js","../src/extractors/custom/genius.com/index.js","../src/extractors/custom/www.jnsa.org/index.js","../src/extractors/custom/phpspot.org/index.js","../src/extractors/custom/www.infoq.com/index.js","../src/extractors/custom/www.moongift.jp/index.js","../src/extractors/custom/www.itmedia.co.jp/index.js","../src/extractors/custom/www.publickey1.jp/index.js","../src/extractors/custom/takagi-hiromitsu.jp/index.js","../src/extractors/custom/bookwalker.jp/index.js","../src/extractors/custom/www.yomiuri.co.jp/index.js","../src/extractors/custom/japan.cnet.com/index.js","../src/extractors/custom/deadline.com/index.js","../src/extractors/custom/www.gizmodo.jp/index.js","../src/extractors/custom/getnews.jp/index.js","../src/extractors/custom/www.lifehacker.jp/index.js","../src/extractors/custom/sect.iij.ad.jp/index.js","../src/extractors/custom/www.oreilly.co.jp/index.js","../src/extractors/custom/www.ipa.go.jp/index.js","../src/extractors/custom/weekly.ascii.jp/index.js","../src/extractors/custom/techlog.iij.ad.jp/index.js","../src/extractors/custom/wired.jp/index.js","../src/extractors/custom/japan.zdnet.com/index.js","../src/extractors/custom/www.rbbtoday.com/index.js","../src/extractors/custom/www.lemonde.fr/index.js","../src/extractors/custom/www.phoronix.com/index.js","../src/extractors/custom/pitchfork.com/index.js","../src/extractors/custom/biorxiv.org/index.js","../src/extractors/custom/epaper.zeit.de/index.js","../src/extractors/custom/www.ladbible.com/index.js","../src/extractors/custom/timesofindia.indiatimes.com/index.js","../src/extractors/custom/ma.ttias.be/index.js","../src/extractors/custom/pastebin.com/index.js","../src/extractors/custom/www.abendblatt.de/index.js","../src/extractors/custom/www.gruene.de/index.js","../src/extractors/custom/www.engadget.com/index.js","../src/extractors/custom/arstechnica.com/index.js","../src/extractors/custom/www.ndtv.com/index.js","../src/extractors/custom/www.spektrum.de/index.js","../src/extractors/custom/postlight.com/index.js","../src/extractors/custom/www.investmentexecutive.com/index.js","../src/extractors/custom/www.cbc.ca/index.js","../src/extractors/all.js","../src/extractors/get-extractor.js","../src/cleaners/constants.js","../src/cleaners/author.js","../src/cleaners/lead-image-url.js","../src/cleaners/dek.js","../src/cleaners/date-published.js","../src/cleaners/content.js","../src/cleaners/title.js","../src/cleaners/resolve-split-title.js","../src/cleaners/index.js","../src/extractors/generic/content/extract-best-node.js","../src/extractors/generic/content/extractor.js","../src/extractors/generic/title/constants.js","../src/extractors/generic/title/extractor.js","../src/extractors/generic/author/constants.js","../src/extractors/generic/author/extractor.js","../src/extractors/generic/date-published/constants.js","../src/extractors/generic/date-published/extractor.js","../src/extractors/generic/dek/extractor.js","../src/extractors/generic/lead-image-url/constants.js","../src/extractors/generic/lead-image-url/score-image.js","../src/extractors/generic/lead-image-url/extractor.js","../src/extractors/generic/next-page-url/scoring/utils/score-similarity.js","../src/extractors/generic/next-page-url/scoring/utils/score-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-page-in-link.js","../src/extractors/generic/next-page-url/scoring/constants.js","../src/extractors/generic/next-page-url/scoring/utils/score-extraneous-links.js","../src/extractors/generic/next-page-url/scoring/utils/score-by-parents.js","../src/extractors/generic/next-page-url/scoring/utils/score-prev-link.js","../src/extractors/generic/next-page-url/scoring/utils/should-score.js","../src/extractors/generic/next-page-url/scoring/utils/score-base-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-next-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-cap-links.js","../src/extractors/generic/next-page-url/scoring/score-links.js","../src/extractors/generic/next-page-url/extractor.js","../src/extractors/generic/url/constants.js","../src/extractors/generic/url/extractor.js","../src/extractors/generic/excerpt/constants.js","../src/extractors/generic/excerpt/extractor.js","../src/extractors/generic/word-count/extractor.js","../src/extractors/generic/index.js","../src/extractors/root-extractor.js","../src/extractors/collect-all-pages.js","../src/mercury.js"],"sourcesContent":["const NORMALIZE_RE = /\\s{2,}(?![^<>]*<\\/(pre|code|textarea)>)/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp(\n  '(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})',\n  'i'\n);\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\nexport const DEFAULT_ENCODING = 'utf-8';\n","import { PAGE_IN_HREF_RE } from './constants';\n\nexport default function pageNumFromUrl(url) {\n  const matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  const pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n","export default function removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path\n    .split('/')\n    .reverse()\n    .reduce((acc, rawSegment, index) => {\n      let segment = rawSegment;\n\n      // Split off and save anything that looks like a file type.\n      if (segment.includes('.')) {\n        const [possibleSegment, fileExt] = segment.split('.');\n        if (IS_ALPHA_RE.test(fileExt)) {\n          segment = possibleSegment;\n        }\n      }\n\n      // If our first or second segment has anything looking like a page\n      // number, remove it.\n      if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n        segment = segment.replace(PAGE_IN_HREF_RE, '');\n      }\n\n      // If we're on the first segment, check to see if we have any\n      // characters in it. The first segment is actually the last bit of\n      // the URL, and this will be helpful to determine if we're on a URL\n      // segment that looks like \"/2/\" for example.\n      if (index === 0) {\n        firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n      }\n\n      // If it's not marked for deletion, push it to cleaned_segments.\n      if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n        acc.push(segment);\n      }\n\n      return acc;\n    }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","export default function excerptContent(content, words = 10) {\n  return content\n    .trim()\n    .split(/\\s+/)\n    .slice(0, words)\n    .join(' ');\n}\n","import iconv from 'iconv-lite';\nimport { DEFAULT_ENCODING, ENCODING_RE } from './constants';\n\n// check a string for encoding; this is\n// used in our fetchResource function to\n// ensure correctly encoded responses\nexport default function getEncoding(str) {\n  let encoding = DEFAULT_ENCODING;\n  const matches = ENCODING_RE.exec(str);\n  if (matches !== null) {\n    [, str] = matches;\n  }\n  if (iconv.encodingExists(str)) {\n    encoding = str;\n  }\n  return encoding;\n}\n","import cheerio from 'cheerio';\n\n// Browser does not like us setting user agent\nexport const REQUEST_HEADERS = cheerio.browser\n  ? {}\n  : {\n      'User-Agent':\n        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n    };\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nexport const FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nconst BAD_CONTENT_TYPES = [\n  'audio/mpeg',\n  'image/gif',\n  'image/jpeg',\n  'image/jpg',\n];\n\nexport const BAD_CONTENT_TYPES_RE = new RegExp(\n  `^(${BAD_CONTENT_TYPES.join('|')})$`,\n  'i'\n);\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nexport const MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\nexport const PROXY_DOMAINS = false;\nexport const REQUESTS_PROXIES = {\n  http: 'http://38.98.105.139:33333',\n  https: 'http://38.98.105.139:33333',\n};\n\nexport const DOMAINS_TO_PROXY = ['nih.gov', 'gutenberg.org'];\n","import URL from 'url';\nimport request from 'postman-request';\n\nimport {\n  REQUEST_HEADERS,\n  FETCH_TIMEOUT,\n  BAD_CONTENT_TYPES_RE,\n  MAX_CONTENT_LENGTH,\n} from './constants';\n\nfunction get(options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, response, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ body, response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 or not.\n// Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nexport function validateResponse(response, parseNon200 = false) {\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (\n    (response.statusMessage && response.statusMessage !== 'OK') ||\n    response.statusCode !== 200\n  ) {\n    if (!response.statusCode) {\n      throw new Error(\n        `Unable to fetch content. Original exception was ${response.error}`\n      );\n    } else if (!parseNon200) {\n      throw new Error(\n        `Resource returned a response status code of ${\n          response.statusCode\n        } and resource was instructed to reject non-200 status codes.`\n      );\n    }\n  }\n\n  const {\n    'content-type': contentType,\n    'content-length': contentLength,\n  } = response.headers;\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error(\n      `Content-type for this resource was ${contentType} and is not allowed.`\n    );\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error(\n      `Content for this resource was too large. Maximum content length is ${MAX_CONTENT_LENGTH}.`\n    );\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\nexport function baseDomain({ host }) {\n  return host\n    .split('.')\n    .slice(-2)\n    .join('.');\n}\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nexport default async function fetchResource(url, parsedUrl, headers = {}) {\n  parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n  const options = {\n    url: parsedUrl.href,\n    headers: { ...REQUEST_HEADERS, ...headers },\n    timeout: FETCH_TIMEOUT,\n    // Accept cookies\n    jar: true,\n    // Set to null so the response returns as binary and body as buffer\n    // https://github.com/request/request#requestoptions-callback\n    encoding: null,\n    // Accept and decode gzip\n    gzip: true,\n    // Follow any non-GET redirects\n    followAllRedirects: true,\n    ...(typeof window !== 'undefined'\n      ? {}\n      : {\n          // Follow GET redirects; this option is for Node only\n          followRedirect: true,\n        }),\n  };\n\n  const { response, body } = await get(options);\n\n  try {\n    validateResponse(response);\n    return {\n      body,\n      response,\n    };\n  } catch (e) {\n    return {\n      error: true,\n      message: e.message,\n    };\n  }\n}\n","function convertMetaProp($, from, to) {\n  $(`meta[${from}]`).each((_, node) => {\n    const $node = $(node);\n\n    const value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nexport default function normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n","// Spacer images to be removed\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"https://www.youtube-nocookie.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n  'iframe[src^=\"https://www.redditmedia.com\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(\n  selector => `[${selector}]`\n);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = [\n  'src',\n  'srcset',\n  'sizes',\n  'type',\n  'href',\n  'class',\n  'id',\n  'alt',\n  'xlink:href',\n  'width',\n  'height',\n];\n\nexport const WHITELIST_ATTRS_RE = new RegExp(\n  `^(${WHITELIST_ATTRS.join('|')})$`,\n  'i'\n);\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(\n  tag => `${tag}:empty`\n).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = [\n  'ul',\n  'ol',\n  'table',\n  'div',\n  'button',\n  'form',\n].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { CANDIDATES_WHITELIST, CANDIDATES_BLACKLIST } from './constants';\n\nexport default function stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*')\n    .not('a')\n    .each((index, node) => {\n      const $node = $(node);\n      const classes = $node.attr('class');\n      const id = $node.attr('id');\n      if (!id && !classes) return;\n\n      const classAndId = `${classes || ''} ${id || ''}`;\n      if (CANDIDATES_WHITELIST.test(classAndId)) {\n        return;\n      }\n      if (CANDIDATES_BLACKLIST.test(classAndId)) {\n        $node.remove();\n      }\n    });\n\n  return $;\n}\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (\n      sibling &&\n      !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))\n    ) {\n      const { nextSibling } = sibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from 'utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertible = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertible) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertible = $span.parents('p, div, li, figcaption').length === 0;\n    if (convertible) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n\n  const attribString = Reflect.ownKeys(attrs)\n    .map(key => `${key}=${attrs[key]}`)\n    .join(' ');\n  let html;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html =\n      node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith(`<${tag} ${attribString}>${html}</${tag}>`);\n  return $;\n}\n","import { SPACER_RE } from './constants';\n\nfunction cleanForHeight($img, $) {\n  const height = parseInt($img.attr('height'), 10);\n  const width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nexport default function cleanImages($article, $) {\n  $article.find('img').each((index, img) => {\n    const $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n","import URL from 'url';\n\nimport { KEEP_SELECTORS, KEEP_CLASS } from './constants';\n\nexport default function markToKeep(article, $, url, tags = []) {\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    const { protocol, hostname } = URL.parse(url);\n    tags = [...tags, `iframe[src^=\"${protocol}//${hostname}\"]`];\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n","import { STRIP_OUTPUT_TAGS, KEEP_CLASS } from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article)\n    .not(`.${KEEP_CLASS}`)\n    .remove();\n\n  return $;\n}\n","import { convertNodeTo } from 'utils/dom';\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\nexport default function cleanHOnes(article, $) {\n  const $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each((index, node) => $(node).remove());\n  } else {\n    $hOnes.each((index, node) => {\n      convertNodeTo($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n","import { getAttrs, setAttrs } from 'utils/dom';\n\nimport { WHITELIST_ATTRS_RE, KEEP_CLASS } from './constants';\n\nfunction removeAllButWhitelist($article, $) {\n  $article.find('*').each((index, node) => {\n    const attrs = getAttrs(node);\n\n    setAttrs(\n      node,\n      Reflect.ownKeys(attrs).reduce((acc, attr) => {\n        if (WHITELIST_ATTRS_RE.test(attr)) {\n          return { ...acc, [attr]: attrs[attr] };\n        }\n\n        return acc;\n      }, {})\n    );\n  });\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, $article).removeClass(KEEP_CLASS);\n\n  return $article;\n}\n\n// Remove attributes like style or align\nexport default function cleanAttributes($article, $) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist(\n    $article.parent().length ? $article.parent() : $article,\n    $\n  );\n}\n","export default function removeEmpty($article, $) {\n  $article.find('p').each((index, p) => {\n    const $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '')\n      $p.remove();\n  });\n\n  return $;\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import { scoreCommas, scoreLength } from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import { getOrInitScore, setScore } from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import { getScore, scoreNode, getWeight, addToParent } from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  }\n  if (tagName.toLowerCase() === 'div') {\n    return 5;\n  }\n  if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  }\n  if (BAD_TAGS.test(tagName)) {\n    return -3;\n  }\n  if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from 'utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport { scoreNode, setScore, getOrInitScore, addScore } from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre')\n    .not('[score]')\n    .each((index, node) => {\n      // The raw score for this paragraph, before we add any parent/child\n      // scores.\n      let $node = $(node);\n      $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n      const $parent = $node.parent();\n      const rawScore = scoreNode($node);\n\n      addScoreTo($parent, $, rawScore, weightNodes);\n      if ($parent) {\n        // Add half of the individual content score to the\n        // grandparent\n        addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n      }\n    });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","import { textLength, linkDensity } from 'utils/dom';\nimport { hasSentenceEnd } from 'utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate\n    .parent()\n    .children()\n    .each((index, sibling) => {\n      const $sibling = $(sibling);\n      // Ignore tags like BR, HR, etc\n      if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n        return null;\n      }\n\n      const siblingScore = getScore($sibling);\n      if (siblingScore) {\n        if ($sibling.get(0) === $candidate.get(0)) {\n          wrappingDiv.append($sibling);\n        } else {\n          let contentBonus = 0;\n          const density = linkDensity($sibling);\n\n          // If sibling has a very low link density,\n          // give it a small bonus\n          if (density < 0.05) {\n            contentBonus += 20;\n          }\n\n          // If sibling has a high link density,\n          // give it a penalty\n          if (density >= 0.5) {\n            contentBonus -= 20;\n          }\n\n          // If sibling node has the same class as\n          // candidate, give it a bonus\n          if ($sibling.attr('class') === $candidate.attr('class')) {\n            contentBonus += topScore * 0.2;\n          }\n\n          const newScore = siblingScore + contentBonus;\n\n          if (newScore >= siblingScoreThreshold) {\n            return wrappingDiv.append($sibling);\n          }\n          if (sibling.tagName === 'p') {\n            const siblingContent = $sibling.text();\n            const siblingContentLength = textLength(siblingContent);\n\n            if (siblingContentLength > 80 && density < 0.25) {\n              return wrappingDiv.append($sibling);\n            }\n            if (\n              siblingContentLength <= 80 &&\n              density === 0 &&\n              hasSentenceEnd(siblingContent)\n            ) {\n              return wrappingDiv.append($sibling);\n            }\n          }\n        }\n      }\n\n      return null;\n    });\n\n  if (\n    wrappingDiv.children().length === 1 &&\n    wrappingDiv\n      .children()\n      .first()\n      .get(0) === $candidate.get(0)\n  ) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","import { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\nimport mergeSiblings from './merge-siblings';\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nexport default function findTopCandidate($) {\n  let $candidate;\n  let topScore = 0;\n\n  $('[score]').each((index, node) => {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(node.tagName)) {\n      return;\n    }\n\n    const $node = $(node);\n    const score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from 'extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS, KEEP_CLASS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (\n          previousNode &&\n          normalizeSpaces(previousNode.text()).slice(-1) === ':'\n        ) {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    // If marked to keep, skip it\n    if ($node.hasClass(KEEP_CLASS) || $node.find(`.${KEEP_CLASS}`).length > 0)\n      return;\n\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","import { getWeight } from 'extractors/generic/content/scoring';\n\nimport { HEADER_TAG_LIST } from './constants';\nimport { normalizeSpaces } from '../text';\n\nexport default function cleanHeaders($article, $, title = '') {\n  $(HEADER_TAG_LIST, $article).each((index, header) => {\n    const $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n","import { convertNodeTo } from 'utils/dom';\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\nexport default function rewriteTopLevel(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo($('html'), $, 'div');\n  $ = convertNodeTo($('body'), $, 'div');\n\n  return $;\n}\n","import URL from 'url';\n\nimport { getAttrs, setAttr } from 'utils/dom';\n\nfunction absolutize($, rootUrl, attr) {\n  const baseUrl = $('base').attr('href');\n\n  $(`[${attr}]`).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n    if (!url) return;\n    const absoluteUrl = URL.resolve(baseUrl || rootUrl, url);\n\n    setAttr(node, attr, absoluteUrl);\n  });\n}\n\nfunction absolutizeSet($, rootUrl, $content) {\n  $('[srcset]', $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const urlSet = attrs.srcset;\n\n    if (urlSet) {\n      // a comma should be considered part of the candidate URL unless preceded by a descriptor\n      // descriptors can only contain positive numbers followed immediately by either 'w' or 'x'\n      // space characters inside the URL should be encoded (%20 or +)\n      const candidates = urlSet.match(\n        /(?:\\s*)(\\S+(?:\\s*[\\d.]+[wx])?)(?:\\s*,\\s*)?/g\n      );\n      if (!candidates) return;\n      const absoluteCandidates = candidates.map(candidate => {\n        // a candidate URL cannot start or end with a comma\n        // descriptors are separated from the URLs by unescaped whitespace\n        const parts = candidate\n          .trim()\n          .replace(/,$/, '')\n          .split(/\\s+/);\n        parts[0] = URL.resolve(rootUrl, parts[0]);\n        return parts.join(' ');\n      });\n      const absoluteUrlSet = [...new Set(absoluteCandidates)].join(', ');\n      setAttr(node, 'srcset', absoluteUrlSet);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr));\n  absolutizeSet($, url, $content);\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  }\n  if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { stripTags } from 'utils/dom';\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\nexport default function extractFromMeta(\n  $,\n  metaNames,\n  cachedNames,\n  cleanTags = true\n) {\n  const foundNames = metaNames.filter(name => cachedNames.indexOf(name) !== -1);\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of foundNames) {\n    const type = 'name';\n    const value = 'value';\n\n    const nodes = $(`meta[${type}=\"${name}\"]`);\n\n    // Get the unique value of every matching node, in case there\n    // are two meta tags with the same name and value.\n    // Remove empty values.\n    const values = nodes\n      .map((index, node) => $(node).attr(value))\n      .toArray()\n      .filter(text => text !== '');\n\n    // If we have more than one value for the same name, we have a\n    // conflict and can't trust any of them. Skip this name. If we have\n    // zero, that means our meta tags had no values. Skip this name\n    // also.\n    if (values.length === 1) {\n      let metaValue;\n      // Meta values that contain HTML should be stripped, as they\n      // weren't subject to cleaning previously.\n      if (cleanTags) {\n        metaValue = stripTags(values[0], $);\n      } else {\n        [metaValue] = values;\n      }\n\n      return metaValue;\n    }\n  }\n\n  // If nothing is found, return null\n  return null;\n}\n","import { withinComment } from 'utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find(parent => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","import { IS_WP_SELECTOR } from './constants';\n\nexport default function isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","export default function setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    Reflect.ownKeys(attrs).forEach(key => {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n","export const IS_LINK = new RegExp('https?://', 'i');\nconst IMAGE_RE = '.(png|gif|jpe?g)';\nexport const IS_IMAGE = new RegExp(`${IMAGE_RE}`, 'i');\nexport const IS_SRCSET = new RegExp(\n  `${IMAGE_RE}(\\\\?\\\\S+)?(\\\\s*[\\\\d.]+[wx])`,\n  'i'\n);\n\nexport const TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n","import { getAttrs } from 'utils/dom';\n\nimport { IS_LINK, IS_IMAGE, IS_SRCSET } from './constants';\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nexport default function convertLazyLoadedImages($) {\n  const extractSrcFromJSON = str => {\n    try {\n      const { src } = JSON.parse(str);\n      if (typeof src === 'string') return src;\n    } catch (_) {\n      return false;\n    }\n\n    return false;\n  };\n\n  $('img').each((_, img) => {\n    const attrs = getAttrs(img);\n\n    Reflect.ownKeys(attrs).forEach(attr => {\n      const value = attrs[attr];\n\n      if (attr !== 'srcset' && IS_LINK.test(value) && IS_SRCSET.test(value)) {\n        $(img).attr('srcset', value);\n      } else if (\n        attr !== 'src' &&\n        attr !== 'srcset' &&\n        IS_LINK.test(value) &&\n        IS_IMAGE.test(value)\n      ) {\n        // Is the value a JSON object? If so, we should attempt to extract the image src from the data.\n        const existingSrc = extractSrcFromJSON(value);\n        if (existingSrc) {\n          $(img).attr('src', existingSrc);\n        } else {\n          $(img).attr('src', value);\n        }\n      }\n    });\n  });\n\n  return $;\n}\n","import { TAGS_TO_REMOVE } from './constants';\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root()\n    .find('*')\n    .contents()\n    .filter(isComment)\n    .remove();\n\n  return $;\n}\n\nexport default function clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n","import cheerio from 'cheerio';\nimport iconv from 'iconv-lite';\n\nimport { getEncoding } from 'utils/text';\nimport { fetchResource } from './utils';\nimport { normalizeMetaTags, convertLazyLoadedImages, clean } from './utils/dom';\n\nconst Resource = {\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  // :param headers: Custom headers to be included in the request\n  async create(url, preparedResponse, parsedUrl, headers = {}) {\n    let result;\n\n    if (preparedResponse) {\n      const validResponse = {\n        statusMessage: 'OK',\n        statusCode: 200,\n        headers: {\n          'content-type': 'text/html',\n          'content-length': 500,\n        },\n      };\n\n      result = {\n        body: preparedResponse,\n        response: validResponse,\n        alreadyDecoded: true,\n      };\n    } else {\n      result = await fetchResource(url, parsedUrl, headers);\n    }\n\n    if (result.error) {\n      result.failed = true;\n      return result;\n    }\n\n    return this.generateDoc(result);\n  },\n\n  generateDoc({ body: content, response, alreadyDecoded = false }) {\n    const { 'content-type': contentType = '' } = response.headers;\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    let $ = this.encodeDoc({ content, contentType, alreadyDecoded });\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  },\n\n  encodeDoc({ content, contentType, alreadyDecoded = false }) {\n    if (alreadyDecoded) {\n      return cheerio.load(content);\n    }\n\n    const encoding = getEncoding(contentType);\n    let decodedContent = iconv.decode(content, encoding);\n    let $ = cheerio.load(decodedContent);\n    // after first cheerio.load, check to see if encoding matches\n    const contentTypeSelector = cheerio.browser\n      ? 'meta[http-equiv=content-type]'\n      : 'meta[http-equiv=content-type i]';\n    const metaContentType =\n      $(contentTypeSelector).attr('content') ||\n      $('meta[charset]').attr('charset');\n    const properEncoding = getEncoding(metaContentType);\n\n    // if encodings in the header/body dont match, use the one in the body\n    if (metaContentType && properEncoding !== encoding) {\n      decodedContent = iconv.decode(content, properEncoding);\n      $ = cheerio.load(decodedContent);\n    }\n\n    return $;\n  },\n};\n\nexport default Resource;\n","export default function* range(start = 1, end = 1) {\n  while (start <= end) {\n    yield (start += 1);\n  }\n}\n","// extremely simple url validation as a first step\nexport default function validateUrl({ hostname }) {\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n","const merge = (extractor, domains) =>\n  domains.reduce((acc, domain) => {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n\nexport default function mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains\n    ? merge(extractor, [extractor.domain, ...extractor.supportedDomains])\n    : merge(extractor, [extractor.domain]);\n}\n","import mergeSupportedDomains from '../utils/merge-supported-domains';\n\nexport const apiExtractors = {};\n\nexport default function addExtractor(extractor) {\n  if (!extractor || !extractor.domain) {\n    return {\n      error: true,\n      message: 'Unable to add custom extractor. Invalid parameters.',\n    };\n  }\n\n  Object.assign(apiExtractors, mergeSupportedDomains(extractor));\n\n  return apiExtractors;\n}\n","export const BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div',\n    },\n  },\n\n  author: {\n    selectors: ['.post-author-name'],\n  },\n\n  title: {\n    selectors: ['.post h2.title'],\n  },\n\n  date_published: {\n    selectors: ['span.publishdate'],\n  },\n};\n","export const NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: ($node, $) => {\n        const $children = $.browser ? $($node.text()) : $node.children();\n        if (\n          $children.length === 1 &&\n          $children.get(0) !== undefined &&\n          $children.get(0).tagName.toLowerCase() === 'img'\n        ) {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1'],\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author'],\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.article-timestamp[datetime]', 'datetime'],\n      'time.article-timestamp',\n    ],\n  },\n};\n","export const WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': $node => {\n        const $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure',\n    },\n\n    // Selectors to remove from the extracted content\n    clean: [\n      '.mw-editsection',\n      'figure tr, figure td, figure tbody',\n      '#toc',\n      '.navbox',\n    ],\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title'],\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod'],\n  },\n};\n","export const TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': ($node, $) => {\n        const tweets = $node.find('.tweet');\n        const $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span',\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer'],\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username'],\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']],\n  },\n};\n","export const NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: [\n      'h1[data-testid=\"headline\"]',\n      'h1.g-headline',\n      'h1[itemprop=\"headline\"]',\n      'h1.headline',\n      'h1 .balancedHeadline',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      '.g-byline',\n      '.byline',\n      ['meta[name=\"byl\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'section[name=\"articleBody\"]', 'article#story'],\n\n    transforms: {\n      'img.g-lazy': $node => {\n        let src = $node.attr('src');\n        const width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      },\n    },\n\n    clean: [\n      '.ad',\n      'header#story-header',\n      '.story-body-1 .lede.video',\n      '.visually-hidden',\n      '#newsletter-promo',\n      '.promo',\n      '.comments-button',\n      '.hidden',\n      '.comments',\n      '.supplemental',\n      '.nocontent',\n      '.story-footer-links',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[name=\"article:published\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\nexport const TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1', '.c-article-header__hed'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.c-byline__author'],\n  },\n\n  content: {\n    selectors: ['article', '.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.partner-box',\n      '.callout',\n      '.c-article-writer__image',\n      '.c-article-writer__content',\n      '.c-letters-cta__text',\n      '.c-footer__logo',\n      '.c-recirculation-link',\n      '.twitter-tweet',\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: [\n      'h1[class^=\"content-header\"]',\n      'h1[class^=\"ArticleHeader__hed\"]',\n      'h1[class*=\"ContentHeaderHed\"]',\n      ['meta[name=\"og:title\"]', 'value'],\n    ],\n  },\n\n  author: {\n    selectors: [\n      'article header div[class^=\"BylinesWrapper\"]',\n      ['meta[name=\"article:author\"]', 'value'],\n      'div[class^=\"ArticleContributors\"] a[rel=\"author\"]',\n      'article header div[class*=\"Byline__multipleContributors\"]',\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.article__body',\n      'article.article.main-content',\n      'main[class^=\"Layout__content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.caption__text': 'figcaption',\n      '.caption__credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['footer[class^=\"ArticleFooter__footer\"]', 'aside'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      'time.content-header__publish-date',\n      ['meta[name=\"pubdate\"]', 'value'],\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      'div[class^=\"ContentHeaderDek\"]',\n      'div.content-header__dek',\n      'h2[class^=\"ArticleHeader__dek\"]',\n    ],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: [\n      'h1[data-testId=\"ContentHeaderHed\"]',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      'a[rel=\"author\"]',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'article.article.main-content',\n      'article.content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden', 'figcaption img.photo', '.alert-message'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: [\n      'h1',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.authorname-txt',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'div.richtext',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption'],\n  },\n\n  date_published: {\n    selectors: ['span.time'],\n  },\n\n  lead_image_url: {\n    selectors: [],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: [\n      'header.canvas-header',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.provider-name',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.content-canvas',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption'],\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter dek selectors\n    ],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n\n  supportedDomains: ['www.buzzfeednews.com'],\n\n  title: {\n    selectors: [\n      'h1.embed-headline-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[data-action=\"user/username\"]',\n      'byline__author',\n      ['meta[name=\"author\"]', 'value'],\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      ['div[class^=\"featureimage_featureImageWrapper\"]', '.js-subbuzz-wrapper'],\n      ['.js-subbuzz-wrapper'],\n    ],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b',\n\n      'div.longform_custom_header_media': $node => {\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\n          return 'figure';\n        }\n\n        return null;\n      },\n\n      'figure.longform_custom_header_media .longform_header_image_source':\n        'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.instapaper_ignore',\n      '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline',\n      '.share-box',\n      '.print',\n      '.js-inline-share-bar',\n      '.js-ad-placement',\n    ],\n  },\n\n  date_published: {\n    selectors: [['time[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.embed-headline-description'],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: [\n      'h1.entry-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      '.author vcard',\n      '.fn',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.grid-content',\n      '.entry-content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: [\n      'h1[class*=\"PostHeader\"]',\n      'h1.post-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'div[class^=\"PostHeader__ScAuthorNameSection\"]',\n      ['meta[name=\"author\"]', 'value'],\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      'section[class*=\"PostMainArticle\"]',\n      '.mainContentIntro',\n      '.content-wrapper',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","export const PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      ['div[itemprop=\"author\"] meta[itemprop=\"name\"]', 'value'],\n      '.story-meta__authors .vcard',\n      '.story-main-content .byline .vcard',\n    ],\n  },\n\n  content: {\n    selectors: [['.story-text'], '.story-main-content', '.story-core'],\n\n    transforms: [],\n\n    clean: ['figcaption', '.story-meta', '.ad'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\n      ['.story-meta__details time[datetime]', 'datetime'],\n      ['.story-main-content .timestamp time[datetime]', 'datetime'],\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n};\n","export const DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: [\n    'jezebel.com',\n    'lifehacker.com',\n    'kotaku.com',\n    'gizmodo.com',\n    'jalopnik.com',\n    'kinja.com',\n    'avclub.com',\n    'clickhole.com',\n    'splinternews.com',\n    'theonion.com',\n    'theroot.com',\n    'thetakeout.com',\n    'theinventory.com',\n  ],\n\n  title: {\n    selectors: ['header h1', 'h1.headline'],\n  },\n\n  author: {\n    selectors: ['a[data-ga*=\"Author\"]', '.author'],\n  },\n\n  content: {\n    selectors: ['.js_post-content', '.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': $node => {\n        const youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.magnifier', '.lightbox'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time.updated[datetime]', 'datetime'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1[itemprop=headline]', 'h1.article-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]'],\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline'],\n  },\n\n  author: {\n    selectors: ['.PostByline__name'],\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': ($node, $) => {\n        const data = JSON.parse($node.attr('data-props'));\n        const { src } = data.sources[0];\n        const $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const MediumExtractor = {\n  domain: 'medium.com',\n\n  title: {\n    selectors: ['h1', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Allow drop cap character.\n      'section span:first-of-type': $node => {\n        const $text = $node.html();\n        if ($text.length === 1 && /^[a-zA-Z()]+$/.test($text)) {\n          $node.replaceWith($text);\n        }\n      },\n      // Re-write lazy-loaded youtube videos\n      iframe: $node => {\n        const ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        const thumb = decodeURIComponent($node.attr('data-thumbnail'));\n        const $parent = $node.parents('figure');\n\n        if (ytRe.test(thumb)) {\n          const [_, youtubeId] = thumb.match(ytRe); // eslint-disable-line\n          $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n          const $caption = $parent.find('figcaption');\n          $parent.empty().append([$node, $caption]);\n          return;\n        }\n\n        // If we can't draw the YouTube preview, remove the figure.\n        $parent.remove();\n      },\n\n      // rewrite figures to pull out image and caption, remove rest\n      figure: $node => {\n        // ignore if figure has an iframe\n        if ($node.find('iframe').length > 0) return;\n\n        const $img = $node.find('img').slice(-1)[0];\n        const $caption = $node.find('figcaption');\n\n        $node.empty().append([$img, $caption]);\n      },\n\n      // Remove any smaller images that did not get caught by the generic image\n      // cleaner (author photo 48px, leading sentence images 79px, etc.).\n      img: $node => {\n        const width = parseInt($node.attr('width'), 10);\n        if (width < 100) $node.remove();\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span a', 'svg'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const WwwTmzComExtractor = {\n  domain: 'www.tmz.com',\n\n  title: {\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline'],\n  },\n\n  author: 'TMZ STAFF',\n\n  date_published: {\n    selectors: ['.article__published-at', '.article-posted-date'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article__blocks', '.article-content', '.all-post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lightbox-link'],\n  },\n};\n","export const WwwWashingtonpostComExtractor = {\n  domain: 'www.washingtonpost.com',\n\n  title: {\n    selectors: ['h1', '#topper-headline-wrapper'],\n  },\n\n  author: {\n    selectors: ['.pb-author-name'],\n  },\n\n  date_published: {\n    selectors: [['.author-timestamp[itemprop=\"datePublished\"]', 'content']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.inline-content': $node => {\n        if ($node.has('img,iframe,video').length > 0) {\n          return 'figure';\n        }\n\n        $node.remove();\n        return null;\n      },\n      '.pb-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.interstitial-link', '.newsletter-inline-unit'],\n  },\n};\n","export const WwwHuffingtonpostComExtractor = {\n  domain: 'www.huffingtonpost.com',\n\n  title: {\n    selectors: ['h1.headline__title'],\n  },\n\n  author: {\n    selectors: ['span.author-card__details__name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:modified_time\"]', 'value'],\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: ['h2.headline__subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry__body'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.pull-quote',\n      '.tag-cloud',\n      '.embed-asset',\n      '.below-entry',\n      '.entry-corrections',\n      '#suggested-story',\n    ],\n  },\n};\n","export const NewrepublicComExtractor = {\n  domain: 'newrepublic.com',\n\n  title: {\n    selectors: ['h1.article-headline'],\n  },\n\n  author: {\n    selectors: ['span.AuthorList'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['h2.article-subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['div.article-body']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['aside'],\n  },\n};\n","export const MoneyCnnComExtractor = {\n  domain: 'money.cnn.com',\n\n  title: {\n    selectors: ['.article-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.byline a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: ['#storytext h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inStoryHeading'],\n  },\n};\n","export const WwwThevergeComExtractor = {\n  domain: 'www.theverge.com',\n\n  supportedDomains: ['www.polygon.com'],\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // feature template multi-match\n      ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\n      // regular post multi-match\n      ['.e-image--hero', '.c-entry-content'],\n      // feature template fallback\n      '.l-wrapper .l-feature',\n      // regular post fallback\n      'div.c-entry-content',\n    ],\n\n    // Transform lazy-loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'span';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.aside',\n      'img.c-dynamic-image', // images come from noscript transform\n    ],\n  },\n};\n","export const WwwCnnComExtractor = {\n  domain: 'www.cnn.com',\n\n  title: {\n    selectors: ['h1.pg-headline', 'h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // a more specific selector to grab the lead image and the body\n      ['.media__video--thumbnail', '.zn-body-text'],\n      // a fallback for the above\n      '.zn-body-text',\n      'div[itemprop=\"articleBody\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': $node => {\n        const $text = $node.html();\n        if ($text) {\n          return 'p';\n        }\n\n        return null;\n      },\n\n      // this transform cleans the short, all-link sections linking\n      // to related content but not marked as such in any way.\n      '.zn-body__paragraph': $node => {\n        if ($node.has('a')) {\n          if (\n            $node.text().trim() ===\n            $node\n              .find('a')\n              .text()\n              .trim()\n          ) {\n            $node.remove();\n          }\n        }\n      },\n\n      '.media__video--thumbnail': 'figure',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAolComExtractor = {\n  domain: 'www.aol.com',\n\n  title: {\n    selectors: ['h1.p-article__title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.p-article__byline__date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwYoutubeComExtractor = {\n  domain: 'www.youtube.com',\n\n  title: {\n    selectors: [\n      ['meta[name=\"title\"]', 'value'],\n      '.watch-title',\n      'h1.watch-title-container',\n    ],\n  },\n\n  author: {\n    selectors: [['link[itemprop=\"name\"]', 'content'], '.yt-user-info'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: [\n      '#player-container-outer',\n      'ytd-expandable-video-description-body-renderer #description',\n      ['#player-api', '#description'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#player-api': ($node, $) => {\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        $node.html(`\n          <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`);\n      },\n      '#player-container-outer': ($node, $) => {\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        const description = $('meta[itemProp=\"description\"]').attr('value');\n        $node.html(`\n        <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>\n        <div><span>${description}</span></div>`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTheguardianComExtractor = {\n  domain: 'www.theguardian.com',\n\n  title: {\n    selectors: ['h1', '.content__headline'],\n  },\n\n  author: {\n    selectors: ['address[data-link-name=\"byline\"]', 'p.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['div[data-gu-name=\"standfirst\"]', '.content__standfirst'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#maincontent', '.content__article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.hide-on-mobile', '.inline-icon'],\n  },\n};\n","export const WwwSbnationComExtractor = {\n  domain: 'www.sbnation.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['p.c-entry-summary.p-dek', 'h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwBloombergComExtractor = {\n  domain: 'www.bloomberg.com',\n\n  title: {\n    selectors: [\n      // normal articles\n      '.lede-headline',\n\n      // /graphics/ template\n      'h1.article-title',\n\n      // /news/ template\n      'h1[class^=\"headline\"]',\n      'h1.lede-text-only__hed',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"parsely-author\"]', 'value'],\n      '.byline-details__link',\n\n      // /graphics/ template\n      '.bydek',\n\n      // /news/ template\n      '.author',\n      'p[class*=\"author\"]',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.published-at', 'datetime'],\n      ['time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n      ['meta[name=\"parsely-pub-date\"]', 'value'],\n      ['meta[name=\"parsely-pub-date\"]', 'content'],\n    ],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[name=\"og:image\"]', 'content'],\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.article-body__content',\n      '.body-content',\n\n      // /graphics/ template\n      ['section.copy-block'],\n\n      // /news/ template\n      '.body-copy',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inline-newsletter', '.page-ad'],\n  },\n};\n","export const WwwBustleComExtractor = {\n  domain: 'www.bustle.com',\n\n  title: {\n    selectors: ['h1', 'h1.post-page__title'],\n  },\n\n  author: {\n    selectors: ['a[href*=\"profile\"]', 'div.content-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['time', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', '.post-page__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNprOrgExtractor = {\n  domain: 'www.npr.org',\n\n  title: {\n    selectors: ['h1', '.storytitle'],\n  },\n\n  author: {\n    selectors: ['p.byline__name.byline__name--block'],\n  },\n\n  date_published: {\n    selectors: [\n      ['.dateblock time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[name=\"twitter:image:src\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['.storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.bucketwrap.image': 'figure',\n      '.bucketwrap.image .credit-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['div.enlarge_measure'],\n  },\n};\n","export const WwwRecodeNetExtractor = {\n  domain: 'www.recode.net',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const QzComExtractor = {\n  domain: 'qz.com',\n\n  title: {\n    selectors: ['article header h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time[datetime]', 'datetime'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n    ],\n  },\n\n  content: {\n    selectors: ['#article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwDmagazineComExtractor = {\n  domain: 'www.dmagazine.com',\n\n  title: {\n    selectors: ['h1.story__title'],\n  },\n\n  author: {\n    selectors: ['.story__info .story__info__item:first-child'],\n  },\n\n  date_published: {\n    selectors: [\n      // enter selectors\n      '.story__info',\n    ],\n\n    timezone: 'America/Chicago',\n    format: 'MMMM D, YYYY h:mm a',\n  },\n\n  dek: {\n    selectors: ['.story__subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['article figure a:first-child', 'href']],\n  },\n\n  content: {\n    selectors: ['.story__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwReutersComExtractor = {\n  domain: 'www.reuters.com',\n\n  title: {\n    selectors: ['h1[class*=\"ArticleHeader-headline-\"]', 'h1.article-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"og:article:author\"]', 'value'], '.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.ArticleBodyWrapper', '#article-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.article-subtitle': 'h4',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      'div[class^=\"ArticleBody-byline-container-\"]',\n      '#article-byline .author',\n    ],\n  },\n};\n","export const MashableComExtractor = {\n  domain: 'mashable.com',\n\n  title: {\n    selectors: ['header h1', 'h1.title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.author_name a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article', 'section.article-content.blueprint'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.image-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwChicagotribuneComExtractor = {\n  domain: 'www.chicagotribune.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['div.article_byline span:first-of-type'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwVoxComExtractor = {\n  domain: 'www.vox.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure .e-image__image noscript': $node => {\n        const imgHtml = $node.html();\n        $node\n          .parents('.e-image__image')\n          .find('.c-dynamic-image')\n          .replaceWith(imgHtml);\n      },\n\n      'figure .e-image__meta': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const NewsNationalgeographicComExtractor = {\n  domain: 'news.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\n    timezone: 'EST',\n  },\n\n  dek: {\n    selectors: ['.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imgSrc = $node\n          .find('.image.parbase.section')\n          .find('.picturefill')\n          .first()\n          .data('platform-src');\n        if ($imgSrc) {\n          $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--large'],\n  },\n};\n","export const WwwNationalgeographicComExtractor = {\n  domain: 'www.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.Article__Headline__Desc', '.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'section.Article__Content',\n      ['.parsys.content', '.__image-lead__'],\n      '.content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imageParent = $node.children().first();\n        if ($imageParent.hasClass('imageGroup')) {\n          const $dataAttrContainer = $imageParent\n            .find('.media--medium__container')\n            .children()\n            .first();\n          const imgPath1 = $dataAttrContainer.data('platform-image1-path');\n          const imgPath2 = $dataAttrContainer.data('platform-image2-path');\n          if (imgPath2 && imgPath1) {\n            $node.prepend(\n              $(`<div class=\"__image-lead__\">\n                <img src=\"${imgPath1}\"/>\n                <img src=\"${imgPath2}\"/>\n              </div>`)\n            );\n          }\n        } else {\n          const $imgSrc = $node\n            .find('.image.parbase.section')\n            .find('.picturefill')\n            .first()\n            .data('platform-src');\n          if ($imgSrc) {\n            $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--small'],\n  },\n};\n","export const WwwLatimesComExtractor = {\n  domain: 'www.latimes.com',\n\n  title: {\n    selectors: ['h1.headline', '.trb_ar_hl'],\n  },\n\n  author: {\n    selectors: [\n      'a[data-click=\"standardBylineAuthorName\"]',\n      ['meta[name=\"author\"]', 'value'],\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.page-article-body', '.trb_ar_main'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.trb_ar_la': $node => {\n        const $figure = $node.find('figure');\n        $node.replaceWith($figure);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.trb_ar_by', '.trb_ar_cr'],\n  },\n};\n","export const PagesixComExtractor = {\n  domain: 'pagesix.com',\n\n  supportedDomains: ['nypost.com'],\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['#featured-image-wrapper', '.entry-content'],\n      '.entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#featured-image-wrapper': 'figure',\n      '.wp-caption-text': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.modal-trigger'],\n  },\n};\n","export const ThefederalistpapersOrgExtractor = {\n  domain: 'thefederalistpapers.org',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['.author-meta-title', 'main span.entry-author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      'header',\n      '.article-sharing',\n      '.after-article',\n      '.type-commenting',\n      '.more-posts',\n      ['p[style]'],\n    ],\n  },\n};\n","export const WwwCbssportsComExtractor = {\n  domain: 'www.cbssports.com',\n\n  title: {\n    selectors: ['.Article-headline', '.article-headline'],\n  },\n\n  author: {\n    selectors: ['.ArticleAuthor-nameText', '.author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n    timezone: 'UTC',\n  },\n\n  dek: {\n    selectors: ['.Article-subline', '.article-subline'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMsnbcComExtractor = {\n  domain: 'www.msnbc.com',\n\n  title: {\n    selectors: ['h1', 'h1.is-title-pane'],\n  },\n\n  author: {\n    selectors: ['.byline-name', '.author'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n      ['meta[name=\"DC.date.issued\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body__content', '.pane-node-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.pane-node-body': ($node, $) => {\n        const [\n          selector,\n          attr,\n        ] = WwwMsnbcComExtractor.lead_image_url.selectors[0];\n        const src = $(selector).attr(attr);\n        if (src) {\n          $node.prepend(`<img src=\"${src}\" />`);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepoliticalinsiderComExtractor = {\n  domain: 'www.thepoliticalinsider.com',\n\n  title: {\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'], // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: ['div#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMentalflossComExtractor = {\n  domain: 'www.mentalfloss.com',\n\n  title: {\n    selectors: [\n      ['meta[name=\"og:title\"]', 'value'],\n      'h1.title',\n      '.title-group',\n      '.inner',\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[data-vars-label*=\"authors\"]',\n      '.field-name-field-enhanced-authors',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      '.date-display-single',\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article main', 'div.field.field-name-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['small'],\n  },\n};\n","export const AbcnewsGoComExtractor = {\n  domain: 'abcnews.go.com',\n\n  title: {\n    selectors: ['div[class*=\"Article_main__body\"] h1', '.article-header h1'],\n  },\n\n  author: {\n    selectors: ['.ShareByline span:nth-child(2)', '.authors'],\n    clean: ['.author-overlay', '.by-text'],\n  },\n\n  date_published: {\n    selectors: ['.ShareByline', '.timestamp'],\n    format: 'MMMM D, YYYY h:mm a',\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', '.article-copy'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNydailynewsComExtractor = {\n  domain: 'www.nydailynews.com',\n\n  title: {\n    selectors: ['h1.headline', 'h1#ra-headline'],\n  },\n\n  author: {\n    selectors: [\n      '.article_byline span',\n      ['meta[name=\"parsely-author\"]', 'value'],\n    ],\n  },\n\n  date_published: {\n    selectors: ['time', ['meta[name=\"sailthru.date\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', 'article#ra-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom'],\n  },\n};\n","export const WwwCnbcComExtractor = {\n  domain: 'www.cnbc.com',\n\n  title: {\n    selectors: ['h1.title', 'h1.ArticleHeader-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div#article_body.content',\n      'div.story',\n      'div.ArticleBody-articleBody',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwPopsugarComExtractor = {\n  domain: 'www.popsugar.com',\n\n  title: {\n    selectors: ['h2.post-title', 'title-text'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.share-copy-title', '.post-tags', '.reactions'],\n  },\n};\n","export const ObserverComExtractor = {\n  domain: 'observer.com',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['.author', '.vcard'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PeopleComExtractor = {\n  domain: 'people.com',\n\n  title: {\n    selectors: ['.article-header h1', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value'], 'a.author.url.fn'],\n  },\n\n  date_published: {\n    selectors: [\n      '.mntl-attribution__item-date',\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article-header h2'],\n  },\n\n  content: {\n    selectors: ['div[class^=\"loc article-content\"]', 'div.article-body__inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwUsmagazineComExtractor = {\n  domain: 'www.usmagazine.com',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: {\n    selectors: ['a.author', 'a.article-byline.tracked-offpage'],\n  },\n\n  date_published: {\n    timezone: 'America/New_York',\n\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related'],\n  },\n};\n","export const WwwRollingstoneComExtractor = {\n  domain: 'www.rollingstone.com',\n\n  title: {\n    selectors: ['h1.l-article-header__row--title', 'h1.content-title'],\n  },\n\n  author: {\n    selectors: ['a.c-byline__link', 'a.content-author.tracked-offpage'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      'time.content-published-date',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['h2.l-article-header__row--lead', '.content-description'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.l-article-content',\n      ['.lead-container', '.article-content'],\n      '.article-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.c-related-links-wrapper', '.module-related'],\n  },\n};\n","export const twofortysevensportsComExtractor = {\n  domain: '247sports.com',\n\n  title: {\n    selectors: ['title', 'article header h1'],\n  },\n\n  author: {\n    selectors: ['.article-cnt__author', '.author'],\n  },\n\n  date_published: {\n    selectors: [['time[data-published]', 'data-published']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body', 'section.body.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const UproxxComExtractor = {\n  domain: 'uproxx.com',\n\n  title: {\n    selectors: ['div.entry-header h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"qc:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image': 'figure',\n      'div.image .wp-media-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwEonlineComExtractor = {\n  domain: 'www.eonline.com',\n\n  title: {\n    selectors: ['h1.article-detail__title', 'h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.article-detail__meta__author', '.entry-meta__author a'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.article-detail__main-content section'],\n      ['.post-content section, .post-content div.post-content__image'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.post-content__image': 'figure',\n      'div.post-content__image .image__credits': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMiamiheraldComExtractor = {\n  domain: 'www.miamiherald.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  date_published: {\n    selectors: ['p.published-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.dateline-storybody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRefinery29ComExtractor = {\n  domain: 'www.refinery29.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['.contributor'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.full-width-opener', '.article-content'],\n      '.article-content',\n      '.body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.loading noscript': $node => {\n        const imgHtml = $node.html();\n        $node.parents('.loading').replaceWith(imgHtml);\n      },\n\n      '.section-image': 'figure',\n\n      '.section-image .content-caption': 'figcaption',\n\n      '.section-text': 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.story-share'],\n  },\n};\n","export const WwwMacrumorsComExtractor = {\n  domain: 'www.macrumors.com',\n\n  title: {\n    selectors: ['h1', 'h1.title'],\n  },\n\n  author: {\n    selectors: ['article a[rel=\"author\"]', '.author-url'],\n  },\n\n  date_published: {\n    selectors: [['time', 'datetime']],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', '.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAndroidcentralComExtractor = {\n  domain: 'www.androidcentral.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.intro', 'blockquote'],\n  },\n};\n","export const WwwSiComExtractor = {\n  domain: 'www.si.com',\n\n  title: {\n    selectors: ['h1', 'h1.headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"published\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.m-detail-header--dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.m-detail--body',\n      ['p', '.marquee_large_2x', '.component.image'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      ['.inline-thumb', '.primary-message', '.description', '.instructions'],\n    ],\n  },\n};\n","export const WwwRawstoryComExtractor = {\n  domain: 'www.rawstory.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.blog-title'],\n  },\n\n  author: {\n    selectors: [\n      'div.main-post-head .social-author__name',\n      '.blog-author a:first-of-type',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      '.blog-author a:last-of-type',\n    ],\n\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post-body', '.blog-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwCnetComExtractor = {\n  domain: 'www.cnet.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['span.author', 'a.author'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: ['.c-head_dek', '.article-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['img.__image-lead__', '.article-main-body'],\n      '.article-main-body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure.image': $node => {\n        const $img = $node.find('img');\n        $img.attr('width', '100%');\n        $img.attr('height', '100%');\n        $img.addClass('__image-lead__');\n        $node.remove('.imgContainer').prepend($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTodayComExtractor = {\n  domain: 'www.today.com',\n\n  title: {\n    selectors: ['h1.article-hero-headline__htag', 'h1.entry-headline'],\n  },\n\n  author: {\n    selectors: ['span.byline-name', ['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['time[datetime]', ['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body__content', '.entry-container'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.label-comment'],\n  },\n};\n","export const WwwAlComExtractor = {\n  domain: 'www.al.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepennyhoarderComExtractor = {\n  domain: 'www.thepennyhoarder.com',\n\n  title: {\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['link[rel=\"author\"]', 'title']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.post-img', '.post-text'],\n      '.post-text',\n      '.single-post-content-inner',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwWesternjournalismComExtractor = {\n  domain: 'www.westernjournalism.com',\n\n  title: {\n    selectors: ['title', 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-sharing.top + div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.ad-notice-small'],\n  },\n};\n","export const WwwAmericanowComExtractor = {\n  domain: 'www.americanow.com',\n\n  title: {\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.article-content', '.image', '.body'], '.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-video-wrapper', '.show-for-small-only'],\n  },\n};\n","export const ScienceflyComExtractor = {\n  domain: 'sciencefly.com',\n\n  title: {\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title'],\n  },\n\n  author: {\n    selectors: ['div.cb-author', 'div.cb-author-title'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['div.theiaPostSlider_slides img', 'src']],\n  },\n\n  content: {\n    selectors: ['div.theiaPostSlider_slides'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const HellogigglesComExtractor = {\n  domain: 'hellogiggles.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.title'],\n  },\n\n  author: {\n    selectors: ['.byline-wrapper span.author_name', '.author-link'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[property=\"article:published_time\"]', 'content'],\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.main-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ThoughtcatalogComExtractor = {\n  domain: 'thoughtcatalog.com',\n\n  title: {\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      'cite a',\n      'div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name',\n      'h1.writer-name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.tc_mark', 'figcaption'],\n  },\n};\n","export const WwwInquisitrComExtractor = {\n  domain: 'www.inquisitr.com',\n\n  title: {\n    selectors: ['h1.entry-title.story--header--title'],\n  },\n\n  author: {\n    selectors: ['div.story--header--author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.story', '.entry-content.'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.post-category',\n      '.story--header--socials',\n      '.story--header--content',\n    ],\n  },\n};\n","export const WwwNbcnewsComExtractor = {\n  domain: 'www.nbcnews.com',\n\n  title: {\n    selectors: ['div.article-hero-headline h1', 'div.article-hed h1'],\n  },\n\n  author: {\n    selectors: [\n      'div.article-inline-byline span.byline-name',\n      'span.byline_author',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published\"]', 'value'],\n      ['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'],\n      '.flag_article-wrapper time',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body__content', 'div.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const FortuneComExtractor = {\n  domain: 'fortune.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.MblGHNMJ'],\n\n    timezone: 'UTC',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['picture', 'article.row'], 'article.row'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwLinkedinComExtractor = {\n  domain: 'www.linkedin.com',\n\n  title: {\n    selectors: ['.article-title', 'h1'],\n  },\n\n  author: {\n    selectors: [\n      '.main-author-card h3',\n      ['meta[name=\"article:author\"]', 'value'],\n      '.entity-name a[rel=author]',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      '.base-main-card__metadata',\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\n    ],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.article-content__body',\n      ['header figure', '.prose'],\n      '.prose',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.entity-image'],\n  },\n};\n","export const ObamawhitehouseArchivesGovExtractor = {\n  domain: 'obamawhitehouse.archives.gov',\n\n  supportedDomains: ['whitehouse.gov'],\n\n  title: {\n    selectors: ['h1', '.pane-node-title'],\n  },\n\n  author: {\n    selectors: ['.blog-author-link', '.node-person-name-link'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.field-name-field-forall-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: ['div#content-start', '.pane-node-field-forall-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pane-node-title', '.pane-custom.pane-1'],\n  },\n};\n","export const WwwOpposingviewsComExtractor = {\n  domain: 'www.opposingviews.com',\n\n  title: {\n    selectors: ['h1.m-detail-header--title', 'h1.title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], 'div.date span span a'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"published\"]', 'value'],\n      ['meta[name=\"publish_date\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.m-detail--body', '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.show-for-small-only'],\n  },\n};\n","export const WwwProspectmagazineCoUkExtractor = {\n  domain: 'www.prospectmagazine.co.uk',\n\n  title: {\n    selectors: ['.blog-header__title', '.page-title'],\n  },\n\n  author: {\n    selectors: ['.blog-header__author-link', '.aside_author .title'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value'], '.post-info'],\n\n    timezone: 'Europe/London',\n  },\n\n  dek: {\n    selectors: ['.blog-header__description', '.page-subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.blog__container', 'article .post_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ForwardComExtractor = {\n  domain: 'forward.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      '.post-author a',\n      '.author-name',\n      ['meta[name=\"sailthru.author\"]', 'value'],\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[name=\"date\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.content-container article',\n      ['.post-item-media-wrap', '.post-item p'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.post-author', '.donate-box', '.message', '.subtitle'],\n  },\n};\n","export const WwwQdailyComExtractor = {\n  domain: 'www.qdaily.com',\n\n  title: {\n    selectors: ['h2', 'h2.title'],\n  },\n\n  author: {\n    selectors: ['.name'],\n  },\n\n  date_published: {\n    selectors: [['.date.smart-date', 'data-origindate']],\n  },\n\n  dek: {\n    selectors: ['.excerpt'],\n  },\n\n  lead_image_url: {\n    selectors: [['.article-detail-hd img', 'src']],\n  },\n\n  content: {\n    selectors: ['.detail'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lazyload', '.lazylad', '.lazylood'],\n  },\n};\n","export const GothamistComExtractor = {\n  domain: 'gothamist.com',\n\n  supportedDomains: [\n    'chicagoist.com',\n    'laist.com',\n    'sfist.com',\n    'shanghaiist.com',\n    'dcist.com',\n  ],\n\n  title: {\n    selectors: ['h1', '.entry-header h1'],\n  },\n\n  author: {\n    // There are multiple article-metadata and byline-author classes, but the main article's is the 3rd child of the l-container class\n    selectors: ['.article-metadata:nth-child(3) .byline-author', '.author'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      'abbr',\n      'abbr.published',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [null],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body', '.entry-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image-none': 'figure',\n      '.image-none i': 'figcaption',\n      'div.image-left': 'figure',\n      '.image-left i': 'figcaption',\n      'div.image-right': 'figure',\n      '.image-right i': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.image-none br',\n      '.image-left br',\n      '.image-right br',\n      '.galleryEase',\n    ],\n  },\n};\n","export const WwwFoolComExtractor = {\n  domain: 'www.fool.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      '.author-inline .author-name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value'], 'header h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.tailwind-article-body', '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.caption img': $node => {\n        const src = $node.attr('src');\n        $node.parent().replaceWith(`<figure><img src=\"${src}\"/></figure>`);\n      },\n      '.caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#pitch'],\n  },\n};\n","export const WwwSlateComExtractor = {\n  domain: 'www.slate.com',\n\n  title: {\n    selectors: ['.hed', 'h1'],\n  },\n\n  author: {\n    selectors: ['a[rel=author]'],\n  },\n\n  date_published: {\n    selectors: ['.pub-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.about-the-author',\n      '.pullquote',\n      '.newsletter-signup-component',\n      '.top-comment',\n    ],\n  },\n};\n","export const IciRadioCanadaCaExtractor = {\n  domain: 'ici.radio-canada.ca',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"dc.creator\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"dc.date.created\"]', 'value']],\n    format: 'YYYY-MM-DD|HH[h]mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['div.lead-container', '.bunker-component.lead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'section.document-content-style',\n      ['.main-multimedia-item', '.news-story-content'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwFortinetComExtractor = {\n  domain: 'www.fortinet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.b15-blog-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div.responsivegrid.aem-GridColumn.aem-GridColumn--default--12',\n    ],\n\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n        return null;\n      },\n    },\n  },\n};\n","export const WwwFastcompanyComExtractor = {\n  domain: 'www.fastcompany.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.post__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post__article'],\n  },\n};\n","export const BlisterreviewComExtractor = {\n  domain: 'blisterreview.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span.author-name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time.entry-date', 'datetime'],\n      ['meta[itemprop=\"datePublished\"]', 'content'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[itemprop=\"image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n      ['img.attachment-large', 'src'],\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        '.elementor-section-wrap',\n        '.elementor-text-editor > p, .elementor-text-editor > ul > li, .attachment-large, .wp-caption-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      figcaption: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.comments-area'],\n  },\n};\n","export const NewsMynaviJpExtractor = {\n  domain: 'news.mynavi.jp',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      'a.articleHeader_name',\n      'main div.article-author a.article-author__name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body', 'main article div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      img: $node => {\n        const src = $node.attr('data-original');\n        if (src !== '') {\n          $node.attr('src', src);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ClinicaltrialsGovExtractor = {\n  domain: 'clinicaltrials.gov',\n\n  title: {\n    selectors: ['h1.tr-solo_record'],\n  },\n\n  author: {\n    selectors: ['div#sponsor.tr-info-text'],\n  },\n\n  date_published: {\n    // selectors: ['span.term[data-term=\"Last Update Posted\"]'],\n    selectors: ['div:has(> span.term[data-term=\"Last Update Posted\"])'],\n  },\n\n  content: {\n    selectors: ['div#tab-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.usa-alert> img'],\n  },\n};\n","export const GithubComExtractor = {\n  domain: 'github.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      // enter author selectors\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['relative-time[datetime]', 'datetime'],\n      ['span[itemprop=\"dateModified\"] relative-time', 'datetime'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      ['meta[name=\"description\"]', 'value'],\n      'span[itemprop=\"about\"]',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['#readme article']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRedditComExtractor = {\n  domain: 'www.reddit.com',\n\n  title: {\n    selectors: [\n      'div[data-test-id=\"post-content\"] h1',\n      'div[data-test-id=\"post-content\"] h2',\n    ],\n  },\n\n  author: {\n    selectors: ['div[data-test-id=\"post-content\"] a[href*=\"user/\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      'div[data-test-id=\"post-content\"] span[data-click-id=\"timestamp\"]',\n      'div[data-test-id=\"post-content\"] a[data-click-id=\"timestamp\"]',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['div[data-test-id=\"post-content\"] p'], // text post\n      [\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])', // external link\n        'div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]', // embedded media\n      ], // external link with media preview (YouTube, imgur album, etc...)\n      ['div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]'], // Embedded media (Reddit video)\n      ['div[data-test-id=\"post-content\"] a'], // external link\n      'div[data-test-id=\"post-content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[role=\"img\"]': $node => {\n        // External link image preview\n        const $img = $node.find('img');\n        const bgImg = $node.css('background-image');\n        if ($img.length === 1 && bgImg) {\n          $img.attr('src', bgImg.match(/\\((.*?)\\)/)[1].replace(/('|\")/g, ''));\n          return $img;\n        }\n        return $node;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.icon',\n      'span[id^=\"PostAwardBadges\"]',\n      'div a[data-test-id=\"comments-page-link-num-comments\"]',\n    ],\n  },\n};\n","export const OtrsComExtractor = {\n  domain: 'otrs.com',\n\n  title: {\n    selectors: ['#main article h1'],\n  },\n\n  author: {\n    selectors: ['div.dateplusauthor a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main article'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'div.dateplusauthor',\n      'div.gr-12.push-6.footershare',\n      '#atftbx',\n      'div.category-modul',\n    ],\n  },\n};\n","export const WwwOssnewsJpExtractor = {\n  domain: 'www.ossnews.jp',\n\n  title: {\n    selectors: ['#alpha-block h1.hxnewstitle'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.fs12'],\n    format: 'YYYY年MM月DD日 HH:mm',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#alpha-block .section:has(h1.hxnewstitle)'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BuzzapJpExtractor = {\n  domain: 'buzzap.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.ctiframe'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwAsahiComExtractor = {\n  domain: 'www.asahi.com',\n\n  title: {\n    selectors: ['main h1', '.ArticleTitle h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n  },\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['main'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['div.AdMod', 'div.LoginSelectArea', 'time', 'div.notPrint'],\n  },\n};\n","export const WwwSanwaCoJpExtractor = {\n  domain: 'www.sanwa.co.jp',\n\n  title: {\n    selectors: ['#newsContent h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['dl.date'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#newsContent'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#smartphone', 'div.sns_box', 'div.contentFoot'],\n  },\n};\n","export const WwwElecomCoJpExtractor = {\n  domain: 'www.elecom.co.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.section-last'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['td.TableMain2'],\n\n    defaultCleaner: false,\n\n    transforms: {\n      table: $node => {\n        $node.attr('width', 'auto');\n      },\n    },\n\n    clean: [],\n  },\n};\n","export const ScanNetsecurityNeJpExtractor = {\n  domain: 'scan.netsecurity.ne.jp',\n\n  title: {\n    selectors: ['header.arti-header h1.head'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['header.arti-header p.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.arti-content.arti-content--thumbnail'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['aside.arti-giga'],\n  },\n};\n","export const JvndbJvnJpExtractor = {\n  domain: 'jvndb.jvn.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['div.modifytxt:nth-child(2)'],\n    format: 'YYYY/MM/DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#news-list'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const GeniusComExtractor = {\n  domain: 'genius.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['h2 a'],\n  },\n\n  date_published: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.release_date;\n        },\n      ],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.album.cover_art_url;\n        },\n      ],\n    ],\n  },\n\n  content: {\n    selectors: ['.lyrics'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwJnsaOrgExtractor = {\n  domain: 'www.jnsa.org',\n\n  title: {\n    selectors: ['#wgtitle h2'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main_area'],\n\n    transforms: {},\n\n    clean: ['#pankuzu', '#side'],\n  },\n};\n","export const PhpspotOrgExtractor = {\n  domain: 'phpspot.org',\n\n  title: {\n    selectors: ['h3.hl'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['h4.hl'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.entrybody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwInfoqComExtractor = {\n  domain: 'www.infoq.com',\n\n  title: {\n    selectors: ['h1.heading'],\n  },\n\n  author: {\n    selectors: ['div.widget.article__authors'],\n  },\n\n  date_published: {\n    selectors: ['.article__readTime.date'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__data'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwMoongiftJpExtractor = {\n  domain: 'www.moongift.jp',\n\n  title: {\n    selectors: ['h1.title a'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['ul.meta li:not(.social):first-of-type'],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main'],\n\n    transforms: {},\n\n    clean: ['ul.mg_service.cf'],\n  },\n};\n","export const WwwItmediaCoJpExtractor = {\n  domain: 'www.itmedia.co.jp',\n\n  supportedDomains: [\n    'www.atmarkit.co.jp',\n    'techtarget.itmedia.co.jp',\n    'nlab.itmedia.co.jp',\n  ],\n\n  title: {\n    selectors: ['#cmsTitle h1'],\n  },\n\n  author: {\n    selectors: ['#byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['#cmsAbstract h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#cmsBody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#snsSharebox'],\n  },\n};\n","export const WwwPublickey1JpExtractor = {\n  domain: 'www.publickey1.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.bloggerinchief p:first-of-type', '#subcol p:has(img)'],\n  },\n\n  date_published: {\n    selectors: ['div.pubdate'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#maincol'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#breadcrumbs', 'div.sbm', 'div.ad_footer'],\n  },\n};\n","export const TakagihiromitsuJpExtractor = {\n  domain: 'takagi-hiromitsu.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[http-equiv=\"Last-Modified\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.body'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BookwalkerJpExtractor = {\n  domain: 'bookwalker.jp',\n\n  title: {\n    selectors: ['h1.p-main__title', 'h1.main-heading'],\n  },\n\n  author: {\n    selectors: ['div.p-author__list', 'div.authors'],\n  },\n\n  date_published: {\n    selectors: [\n      'dl.p-information__data dd:nth-of-type(7)',\n      '.work-info .work-detail:first-of-type .work-detail-contents:last-of-type',\n    ],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div.p-main__information',\n      ['div.main-info', 'div.main-cover-inner'],\n    ],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'span.label.label--trial',\n      'dt.info-head.info-head--coin',\n      'dd.info-contents.info-contents--coin',\n      'div.info-notice.fn-toggleClass',\n    ],\n  },\n};\n","export const WwwYomiuriCoJpExtractor = {\n  domain: 'www.yomiuri.co.jp',\n\n  title: {\n    selectors: ['h1.title-article.c-article-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.p-main-contents'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const JapanCnetComExtractor = {\n  domain: 'japan.cnet.com',\n\n  title: {\n    selectors: ['.leaf-headline-ttl'],\n  },\n\n  author: {\n    selectors: ['.writer'],\n  },\n\n  date_published: {\n    selectors: ['.date'],\n    format: 'YYYY年MM月DD日 HH時mm分',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const DeadlineComExtractor = {\n  domain: 'deadline.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['section.author h2'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.a-article-grid__main.pmc-a-grid article.pmc-a-grid-item'],\n\n    transforms: {\n      '.embed-twitter': $node => {\n        const innerHtml = $node.html();\n        $node.replaceWith(innerHtml);\n      },\n    },\n\n    clean: ['figcaption'],\n  },\n};\n","export const WwwGizmodoJpExtractor = {\n  domain: 'www.gizmodo.jp',\n\n  title: {\n    selectors: ['h1.p-post-title'],\n  },\n\n  author: {\n    selectors: ['li.p-post-AssistAuthor'],\n  },\n\n  date_published: {\n    selectors: [['li.p-post-AssistTime time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.p-post'],\n\n    transforms: {\n      'img.p-post-thumbnailImage': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['h1.p-post-title', 'ul.p-post-Assist'],\n  },\n};\n","export const GetnewsJpExtractor = {\n  domain: 'getnews.jp',\n\n  title: {\n    selectors: ['article h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.prof'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['ul.cattag-top time', 'datetime'],\n    ],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.post-bodycopy'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwLifehackerJpExtractor = {\n  domain: 'www.lifehacker.jp',\n\n  title: {\n    selectors: ['h1[class^=\"article_pArticle_Title\"]', 'h1.lh-summary-title'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      'p.lh-entryDetailInner--credit',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['div.lh-entryDetail-header time', 'datetime'],\n    ],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div[class^=\"article_pArticle_Body__\"]',\n      'div.lh-entryDetail-body',\n    ],\n\n    transforms: {\n      'img.lazyload': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['p.lh-entryDetailInner--credit'],\n  },\n};\n","export const SectIijAdJpExtractor = {\n  domain: 'sect.iij.ad.jp',\n\n  title: {\n    selectors: ['div.title-box-inner h1', 'h3'],\n  },\n\n  author: {\n    selectors: ['p.post-author a', 'dl.entrydate dd'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-inner', '#article'],\n\n    transforms: {},\n\n    clean: ['dl.entrydate'],\n  },\n};\n","export const WwwOreillyCoJpExtractor = {\n  domain: 'www.oreilly.co.jp',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h3'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=\"author\"]', 'li[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      ['dd[itemprop=\"datePublished\"]', 'content'],\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image:secure_url\"]', 'value'],\n      ['meta[name=\"og:image\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['section.detail', '#content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['.social-tools'],\n  },\n};\n","export const WwwIpaGoJpExtractor = {\n  domain: 'www.ipa.go.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.ipar_text_right'],\n    format: 'YYYY年M月D日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#ipar_main'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['p.ipar_text_right'],\n  },\n};\n","export const WeeklyAsciiJpExtractor = {\n  domain: 'weekly.ascii.jp',\n\n  title: {\n    selectors: ['article h1', 'h1[itemprop=\"headline\"]'],\n  },\n\n  author: {\n    selectors: ['p.author'],\n  },\n\n  date_published: {\n    selectors: ['p.date', ['meta[name=\"odate\"]', 'value']],\n\n    format: 'YYYY年MM月DD日 HH:mm',\n\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div#contents_detail', 'div.article'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const TechlogIijAdJpExtractor = {\n  domain: 'techlog.iij.ad.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['.wp_social_bookmarking_light'],\n  },\n};\n","import URL from 'url';\n\nexport const WiredJpExtractor = {\n  domain: 'wired.jp',\n\n  title: {\n    selectors: ['h1[data-testid=\"ContentHeaderHed\"]', 'h1.post-title'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      'p[itemprop=\"author\"]',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time', 'datetime'],\n    ],\n  },\n\n  dek: {\n    selectors: ['div[class^=\"ContentHeaderDek\"]', '.post-intro'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div[data-attribute-verso-pattern=\"article-body\"]',\n      'article.article-detail',\n    ],\n\n    transforms: {\n      'img[data-original]': $node => {\n        const dataOriginal = $node.attr('data-original');\n        const src = $node.attr('src');\n        const url = URL.resolve(src, dataOriginal);\n        $node.attr('src', url);\n      },\n    },\n\n    clean: ['.post-category', 'time', 'h1.post-title', '.social-area-syncer'],\n  },\n};\n","export const JapanZdnetComExtractor = {\n  domain: 'japan.zdnet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"cXenseParse:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwRbbtodayComExtractor = {\n  domain: 'www.rbbtoday.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.writer.writer-name'],\n  },\n\n  date_published: {\n    selectors: [['header time', 'datetime']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value'], '.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.arti-content'],\n\n    transforms: {},\n\n    clean: ['.arti-giga'],\n  },\n};\n","export const WwwLemondeFrExtractor = {\n  domain: 'www.lemonde.fr',\n\n  title: {\n    selectors: ['h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.author__name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article__desc'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article__content'],\n\n    transforms: {},\n\n    clean: ['figcaption'],\n  },\n};\n","export const WwwPhoronixComExtractor = {\n  domain: 'www.phoronix.com',\n\n  title: {\n    selectors: ['article h1', 'article header'],\n  },\n\n  author: {\n    selectors: ['.author a:first-child'],\n  },\n\n  date_published: {\n    selectors: ['.author'],\n    // 1 June 2019 at 08:34 PM EDT\n    format: 'D MMMM YYYY at hh:mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PitchforkComExtractor = {\n  domain: 'pitchfork.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'title'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      '.authors-detail__display-name',\n    ],\n  },\n\n  date_published: {\n    selectors: ['div[class^=\"InfoSliceWrapper-\"]', ['.pub-date', 'datetime']],\n  },\n\n  dek: {\n    selectors: [\n      ['meta[name=\"og:description\"]', 'value'],\n      '.review-detail__abstract',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['.single-album-tombstone__art img', 'src'],\n    ],\n  },\n\n  content: {\n    selectors: ['div.body__inner-container', '.review-detail__text'],\n  },\n\n  extend: {\n    score: {\n      selectors: ['p[class*=\"Rating\"]', '.score'],\n    },\n  },\n};\n","export const BiorxivOrgExtractor = {\n  domain: 'biorxiv.org',\n\n  title: {\n    selectors: ['h1#page-title'],\n  },\n\n  author: {\n    selectors: [\n      'div.highwire-citation-biorxiv-article-top > div.highwire-cite-authors',\n    ],\n  },\n\n  content: {\n    selectors: ['div#abstract-1'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const EpaperZeitDeExtractor = {\n  domain: 'epaper.zeit.de',\n\n  title: {\n    selectors: ['p.title'],\n  },\n\n  author: {\n    selectors: ['.article__author'],\n  },\n\n  date_published: null,\n\n  excerpt: {\n    selectors: ['subtitle'],\n  },\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'p.title': 'h1',\n      '.article__author': 'p',\n      byline: 'p',\n      linkbox: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['image-credits', 'box[type=citation]'],\n  },\n};\n","export const WwwLadbibleComExtractor = {\n  domain: 'www.ladbible.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['[class*=Byline]'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n    timezone: 'Europe/London',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['[class*=ArticleContainer]'],\n    clean: [\n      'time',\n      'source',\n      'a[href^=\"https://www.ladbible.com/\"]',\n      'picture',\n      '[class*=StyledCardBlock]',\n    ],\n  },\n};\n","export const TimesofindiaIndiatimesComExtractor = {\n  domain: 'timesofindia.indiatimes.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  extend: {\n    reporter: {\n      selectors: ['div.byline'],\n      transforms: {},\n    },\n  },\n\n  date_published: {\n    selectors: ['.byline'],\n    format: 'MMM D, YYYY, HH:mm z',\n    timezone: 'Asia/Kolkata',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.contentwrapper:has(section)'],\n    defaultCleaner: false,\n\n    clean: [\n      'section',\n      'h1',\n      '.byline',\n      '.img_cptn',\n      '.icon_share_wrap',\n      'ul[itemtype=\"https://schema.org/BreadcrumbList\"]',\n    ],\n  },\n};\n","export const MaTtiasBeExtractor = {\n  domain: 'ma.ttias.be',\n\n  title: {\n    selectors: [['meta[name=\"twitter:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.content']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: $node => {\n        // The \"id\" attribute values would result in low scores and the element being\n        // removed.\n        $node.attr('id', null);\n\n        // h1 elements will be demoted to h2, so demote h2 elements to h3.\n        return 'h3';\n      },\n      h1: $node => {\n        // The \"id\" attribute values would result in low scores and the element being\n        // removed.\n        $node.attr('id', null);\n\n        // A subsequent h2 will be removed if there is not a paragraph before it, so\n        // add a paragraph here. It will be removed anyway because it is empty.\n        $node.after('<p></p>');\n      },\n      ul: $node => {\n        // Articles contain lists of links which look like, but are not, navigation\n        // elements. Adding this class attribute avoids them being incorrectly removed.\n        $node.attr('class', 'entry-content-asset');\n      },\n    },\n  },\n};\n","export const PastebinComExtractor = {\n  domain: 'pastebin.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.username', '.paste_box_line2 .t_us + a'],\n  },\n\n  date_published: {\n    selectors: ['.date', '.paste_box_line2 .t_da + span'],\n    timezone: 'America/New_York',\n    format: 'MMMM D, YYYY',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.source', '#selectable .text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      ol: 'div',\n      li: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-unused-expressions */\nexport const WwwAbendblattDeExtractor = {\n  domain: 'www.abendblatt.de',\n\n  title: {\n    selectors: ['h2.article__header__headline'],\n  },\n\n  author: {\n    selectors: ['span.author-info__name-text'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.teaser-stream-time', 'datetime'],\n      ['time.article__header__date', 'datetime'],\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      p: $node => {\n        if (!$node.hasClass('obfuscated')) return null;\n        let o = '';\n        let n = 0;\n        for (let i = $node.text(); n < i.length; n += 1) {\n          const r = i.charCodeAt(n);\n          r === 177\n            ? (o += '%')\n            : r === 178\n            ? (o += '!')\n            : r === 180\n            ? (o += ';')\n            : r === 181\n            ? (o += '=')\n            : r === 32\n            ? (o += ' ')\n            : r === 10\n            ? (o += '\\n')\n            : r > 33 && (o += String.fromCharCode(r - 1));\n        }\n\n        $node.html(o);\n        $node.removeClass('obfuscated');\n        $node.addClass('deobfuscated');\n        return null;\n      },\n      div: $node => {\n        if (!$node.hasClass('obfuscated')) return null;\n        let o = '';\n        let n = 0;\n        for (let i = $node.text(); n < i.length; n += 1) {\n          const r = i.charCodeAt(n);\n          r === 177\n            ? (o += '%')\n            : r === 178\n            ? (o += '!')\n            : r === 180\n            ? (o += ';')\n            : r === 181\n            ? (o += '=')\n            : r === 32\n            ? (o += ' ')\n            : r === 10\n            ? (o += '\\n')\n            : r > 33 && (o += String.fromCharCode(r - 1));\n        }\n\n        $node.html(o);\n        $node.removeClass('obfuscated');\n        $node.addClass('deobfuscated');\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwGrueneDeExtractor = {\n  domain: 'www.gruene.de',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[property=\"og:image\"]', 'content']],\n  },\n\n  content: {\n    // selectors: ['section'],\n    selectors: [['section header', 'section h2', 'section p', 'section ol']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption', 'p[class]'],\n  },\n};\n","export const WwwEngadgetComExtractor = {\n  domain: 'www.engadget.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.th-meta[data-ylk*=\"subsec:author\"]'],\n  },\n\n  // Engadget stories have publish dates, but the only representation of them on the page\n  // is in a format like \"2h ago\". There are also these tags with blank values:\n  // <meta class=\"swiftype\" name=\"published_at\" data-type=\"date\" value=\"\">\n  date_published: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  dek: {\n    selectors: ['div[class*=\"o-title_mark\"] div'],\n  },\n\n  // Engadget stories do have lead images specified by an og:image meta tag, but selecting\n  // the value attribute of that tag fails. I believe the \"&#x2111;\" sequence of characters\n  // is triggering this inability to select the attribute value.\n  lead_image_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        // Some figures will be inside div.article-text, but some header figures/images\n        // will not.\n        '#page_body figure:not(div.article-text figure)',\n        'div.article-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ArstechnicaComExtractor = {\n  domain: 'arstechnica.com',\n\n  // Articles from this site are often paginated, but I was unable to write a CSS\n  // selector to find the next page. On the last page, there will be a link with a CSS\n  // selector indicating that the previous page is next. But the parser appears to find\n  // the next page without this extractor finding it, as long as the fallback option is\n  // left at its default value of true.\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['*[rel=\"author\"] *[itemprop=\"name\"]'],\n  },\n\n  date_published: {\n    selectors: [['.byline time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['h2[itemprop=\"description\"]'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: $node => {\n        // Some pages have an element h2 that is significant, and that the parser will\n        // remove if not following a paragraph. Adding this empty paragraph fixes it, and\n        // the empty paragraph will be removed anyway.\n        $node.before('<p></p>');\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result.\n    clean: [\n      // Remove enlarge links and separators inside image captions.\n      'figcaption .enlarge-link',\n      'figcaption .sep',\n\n      // I could not transform the video into usable elements, so I\n      // removed them.\n      'figure.video',\n\n      // Image galleries that do not work.\n      '.gallery',\n\n      'aside',\n      '.sidebar',\n    ],\n  },\n};\n","export const WwwNdtvComExtractor = {\n  domain: 'www.ndtv.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=\"author\"] span[itemprop=\"name\"]'],\n  },\n\n  date_published: {\n    selectors: [['span[itemprop=\"dateModified\"]', 'content']],\n  },\n\n  dek: {\n    selectors: ['h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // This site puts a dateline in a 'b' above the first paragraph, and then somehow\n      // blends it into the first paragraph with CSS. This transform moves the dateline\n      // to the first paragraph.\n      '.place_cont': $node => {\n        if (!$node.parents('p').length) {\n          const nextSibling = $node.next('p');\n          if (nextSibling) {\n            $node.remove();\n            nextSibling.prepend($node);\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.highlghts_Wdgt',\n      '.ins_instory_dv_caption',\n      'input',\n      '._world-wrapper .mt20',\n    ],\n  },\n};\n","export const SpektrumExtractor = {\n  domain: 'www.spektrum.de',\n\n  title: {\n    selectors: ['.content__title'],\n  },\n\n  author: {\n    selectors: ['.content__author__info__name'],\n  },\n\n  date_published: {\n    selectors: ['.content__meta__date'],\n    timezone: 'Europe/Berlin',\n  },\n\n  dek: {\n    selectors: ['.content__intro'],\n  },\n\n  lead_image_url: {\n    selectors: [\n      // This is how the meta tag appears in the original source code.\n      ['meta[name=\"og:image\"]', 'value'],\n      // This is how the meta tag appears in the DOM in Chrome.\n      // The selector is included here to make the code work within the browser as well.\n      ['meta[property=\"og:image\"]', 'content'],\n      // This is the image that is shown on the page.\n      // It can be slightly cropped compared to the original in the meta tag.\n      '.image__article__top img',\n    ],\n  },\n\n  content: {\n    selectors: ['article.content'],\n    clean: [\n      '.breadcrumbs',\n      '.hide-for-print',\n      'aside',\n      'header h2',\n      '.image__article__top',\n      '.content__author',\n      '.copyright',\n      '.callout-box',\n    ],\n  },\n};\n","export const PostlightComExtractor = {\n  domain: 'postlight.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.single-hero__abstract'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['main.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      'section.pl-post-link',\n      'aside',\n      'section.insights_featured_case_studies',\n    ],\n  },\n};\n","export const WwwInvestmentexecutiveComExtractor = {\n  domain: 'www.investmentexecutive.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['div[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['section.article-body'],\n\n    clean: ['.hidden'],\n  },\n};\n","export const WwwCbcCaExtractor = {\n  domain: 'www.cbc.ca',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.authorText', '.bylineDetails'],\n  },\n\n  date_published: {\n    selectors: [['.timeStamp[datetime]', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.story'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","import mergeSupportedDomains from 'utils/merge-supported-domains';\nimport * as CustomExtractors from './custom/index';\n\nexport default Object.keys(CustomExtractors).reduce((acc, key) => {\n  const extractor = CustomExtractors[key];\n  return {\n    ...acc,\n    ...mergeSupportedDomains(extractor),\n  };\n}, {});\n","import Extractors from './all';\nimport { apiExtractors } from './add-extractor';\n\n/**\n * 根据URL查找对应的抽取器。\n *\n * 匹配的规则是： 1 && 2\n * 1. 域名匹配\n * 2. 路径匹配（但多个路径是或的关系，只要匹配一个即可） 支持正则\n */\nexport default function getExtractor(url) {\n  const apiExtractorsKeys = Object.keys(apiExtractors);\n  const extractorsKeys = Object.keys(Extractors);\n\n  const key = apiExtractorsKeys.concat(extractorsKeys).find(domain => {\n    const domainMatch = url.includes(domain);\n    const extractor = apiExtractors[domain] || Extractors[domain];\n\n    if (!domainMatch) return false;\n\n    // 如果没有声明includedPaths，意味着只要域名匹配就可以\n    if (!extractor.includedPaths) return true;\n\n    // 匹配任意一个路径即可\n    return extractor.includedPaths.some(path => {\n      const reg = new RegExp(path);\n      return reg.test(url);\n    });\n  });\n\n  return Extractors[key] || apiExtractors[key];\n}\n","// CLEAN AUTHOR CONSTANTS\nexport const CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n\n// CLEAN DEK CONSTANTS\nexport const TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\nexport const DEK_META_TAGS = [];\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\nexport const DEK_SELECTORS = ['.entry-summary'];\n\n// CLEAN DATE PUBLISHED CONSTANTS\nexport const MS_DATE_STRING = /^\\d{13}$/i;\nexport const SEC_DATE_STRING = /^\\d{10}$/i;\nexport const CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nexport const TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nexport const TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nexport const TIME_NOW_STRING = /^\\s*(just|right)?\\s*now\\s*/i;\nconst timeUnits = [\n  'seconds?',\n  'minutes?',\n  'hours?',\n  'days?',\n  'weeks?',\n  'months?',\n  'years?',\n];\nconst allTimeUnits = timeUnits.join('|');\nexport const TIME_AGO_STRING = new RegExp(\n  `(\\\\d+)\\\\s+(${allTimeUnits})\\\\s+ago`,\n  'i'\n);\nconst months = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec',\n];\nconst allMonths = months.join('|');\nconst timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nconst timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nconst timestamp3 = '-[0-9]{3,4}$';\nexport const SPLIT_DATE_STRING = new RegExp(\n  `(${timestamp1})|(${timestamp2})|(${timestamp3})|([0-9]{1,4})|(${allMonths})`,\n  'ig'\n);\n\n// 2016-11-22T08:57-500\n// Check if datetime string has an offset at the end\nexport const TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nexport const TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nexport const DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n","import { normalizeSpaces } from 'utils/text';\nimport { CLEAN_AUTHOR_RE } from './constants';\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nexport default function cleanAuthor(author) {\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\n}\n","import validUrl from 'valid-url';\n\nexport default function clean(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n","import { stripTags } from 'utils/dom';\nimport { excerptContent, normalizeSpaces } from 'utils/text';\n\nimport { TEXT_LINK_RE } from './constants';\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nexport default function cleanDek(dek, { $, excerpt }) {\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10))\n    return null;\n\n  const dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return normalizeSpaces(dekText.trim());\n}\n","import moment from 'moment-timezone';\nimport parseFormat from 'moment-parseformat';\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nimport {\n  MS_DATE_STRING,\n  SEC_DATE_STRING,\n  CLEAN_DATE_STRING_RE,\n  SPLIT_DATE_STRING,\n  TIME_AGO_STRING,\n  TIME_NOW_STRING,\n  TIME_MERIDIAN_SPACE_RE,\n  TIME_MERIDIAN_DOTS_RE,\n  TIME_WITH_OFFSET_RE,\n} from './constants';\n\nexport function cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || [])\n    .join(' ')\n    .replace(TIME_MERIDIAN_DOTS_RE, 'm')\n    .replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3')\n    .replace(CLEAN_DATE_STRING_RE, '$1')\n    .trim();\n}\n\nexport function createDate(dateString, timezone, format) {\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\n    return moment(new Date(dateString));\n  }\n\n  if (TIME_AGO_STRING.test(dateString)) {\n    const fragments = TIME_AGO_STRING.exec(dateString);\n    return moment().subtract(fragments[1], fragments[2]);\n  }\n\n  if (TIME_NOW_STRING.test(dateString)) {\n    return moment();\n  }\n\n  return timezone\n    ? moment.tz(dateString, format || parseFormat(dateString), timezone)\n    : moment(dateString, format || parseFormat(dateString));\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nexport default function cleanDatePublished(\n  dateString,\n  { timezone, format } = {}\n) {\n  // If string is in milliseconds or seconds, convert to int and return\n  if (MS_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10)).toISOString();\n  }\n  if (SEC_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10) * 1000).toISOString();\n  }\n\n  let date = createDate(dateString, timezone, format);\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = createDate(dateString, timezone, format);\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n","import {\n  cleanAttributes,\n  cleanHeaders,\n  cleanHOnes,\n  cleanImages,\n  cleanTags,\n  removeEmpty,\n  rewriteTopLevel,\n  markToKeep,\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom';\n\n// Clean our article content, returning a new, cleaned node.\nexport default function extractCleanNode(\n  article,\n  { $, cleanConditionally = true, title = '', url = '', defaultCleaner = true }\n) {\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Make links absolute\n  makeLinksAbsolute(article, $, url);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes(article, $);\n\n  return article;\n}\n","import { stripTags } from 'utils/dom';\nimport { normalizeSpaces } from 'utils/text';\n\nimport { TITLE_SPLITTERS_RE } from './constants';\nimport { resolveSplitTitle } from './index';\n\nexport default function cleanTitle(title, { url, $ }) {\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    const h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return normalizeSpaces(stripTags(title, $).trim());\n}\n","import URL from 'url';\nimport wuzzy from 'wuzzy';\n\nimport { TITLE_SPLITTERS_RE, DOMAIN_ENDINGS_RE } from './constants';\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    // Look to see if we can find a breadcrumb splitter that happens\n    // more than once. If we can, we'll be able to better pull out\n    // the title.\n    const termCounts = splitTitle.reduce((acc, titleText) => {\n      acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n      return acc;\n    }, {});\n\n    const [maxTerm, termCount] = Reflect.ownKeys(termCounts).reduce(\n      (acc, key) => {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      },\n      [0, 0]\n    );\n\n    // We found a splitter that was used more than once, so it\n    // is probably the breadcrumber. Split our title on that instead.\n    // Note: max_term should be <= 4 characters, so that \" >> \"\n    // will match, but nothing longer than that.\n    if (termCount >= 2 && maxTerm.length <= 4) {\n      splitTitle = text.split(maxTerm);\n    }\n\n    const splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n    const longestEnd = splitEnds.reduce(\n      (acc, end) => (acc.length > end.length ? acc : end),\n      ''\n    );\n\n    if (longestEnd.length > 10) {\n      return longestEnd;\n    }\n\n    return text;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  const { host } = URL.parse(url);\n  const nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  const startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  const startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  const endSlug = splitTitle\n    .slice(-1)[0]\n    .toLowerCase()\n    .replace(' ', '');\n  const endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nexport default function resolveSplitTitle(title, url = '') {\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  const splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  let newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n","import cleanAuthor from './author';\nimport cleanImage from './lead-image-url';\nimport cleanDek from './dek';\nimport cleanDatePublished from './date-published';\nimport cleanContent from './content';\nimport cleanTitle from './title';\n\nconst Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: cleanImage,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: cleanContent,\n  title: cleanTitle,\n};\n\nexport default Cleaners;\n\nexport { cleanAuthor };\nexport { cleanImage };\nexport { cleanDek };\nexport { cleanDatePublished };\nexport { cleanContent };\nexport { cleanTitle };\nexport { default as resolveSplitTitle } from './resolve-split-title';\n","import { stripUnlikelyCandidates, convertToParagraphs } from 'utils/dom';\n\nimport { scoreContent, findTopCandidate } from './scoring';\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nexport default function extractBestNode($, opts) {\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs($);\n  $ = scoreContent($, opts.weightNodes);\n  const $topCandidate = findTopCandidate($);\n\n  return $topCandidate;\n}\n","import cheerio from 'cheerio';\n\nimport { nodeIsSufficient } from 'utils/dom';\nimport { cleanContent } from 'cleaners';\nimport { normalizeSpaces } from 'utils/text';\n\nimport extractBestNode from './extract-best-node';\n\nconst GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true,\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract({ $, html, title, url }, opts) {\n    opts = { ...this.defaultOpts, ...opts };\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    let node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Reflect.ownKeys(opts).filter(k => opts[k] === true)) {\n      opts[key] = false;\n      $ = cheerio.load(html);\n\n      node = this.getContentNode($, title, url, opts);\n\n      if (nodeIsSufficient(node)) {\n        break;\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n  // Get node given current options\n  getContentNode($, title, url, opts) {\n    return cleanContent(extractBestNode($, opts), {\n      $,\n      cleanConditionally: opts.cleanConditionally,\n      title,\n      url,\n    });\n  },\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n  },\n};\n\nexport default GenericContentExtractor;\n","// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nexport const STRONG_TITLE_META_TAGS = [\n  'tweetmeme-title',\n  'dc.title',\n  'rbtitle',\n  'headline',\n  'title',\n];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nexport const WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const STRONG_TITLE_SELECTORS = [\n  '.hentry .entry-title',\n  'h1#articleHeader',\n  'h1.articleHeader',\n  'h1.article',\n  '.instapaper_title',\n  '#meebo-title',\n];\n\nexport const WEAK_TITLE_SELECTORS = [\n  'article h1',\n  '#entry-title',\n  '.entry-title',\n  '#entryTitle',\n  '#entrytitle',\n  '.entryTitle',\n  '.entrytitle',\n  '#articleTitle',\n  '.articleTitle',\n  'post post-title',\n  'h1.title',\n  'h2.article',\n  'h1',\n  'html head title',\n  'title',\n];\n","import { cleanTitle } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\n\nimport {\n  STRONG_TITLE_META_TAGS,\n  WEAK_TITLE_META_TAGS,\n  STRONG_TITLE_SELECTORS,\n  WEAK_TITLE_SELECTORS,\n} from './constants';\n\nconst GenericTitleExtractor = {\n  extract({ $, url, metaCache }) {\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    let title;\n\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // If no matches, return an empty string\n    return '';\n  },\n};\n\nexport default GenericTitleExtractor;\n","// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nexport const AUTHOR_META_TAGS = [\n  'byl',\n  'clmst',\n  'dc.author',\n  'dcsext.author',\n  'dc.creator',\n  'rbauthors',\n  'authors',\n];\n\nexport const AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const AUTHOR_SELECTORS = [\n  '.entry .entry-author',\n  '.author.vcard .fn',\n  '.author .vcard .fn',\n  '.byline.vcard .fn',\n  '.byline .vcard .fn',\n  '.byline .by .author',\n  '.byline .by',\n  '.byline .author',\n  '.post-author.vcard',\n  '.post-author .vcard',\n  'a[rel=author]',\n  '#by_author',\n  '.by_author',\n  '#entryAuthor',\n  '.entryAuthor',\n  '.byline a[href*=author]',\n  '#author .authorname',\n  '.author .authorname',\n  '#author',\n  '.author',\n  '.articleauthor',\n  '.ArticleAuthor',\n  '.byline',\n];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nconst bylineRe = /^[\\n\\s]*By/i;\nexport const BYLINE_SELECTORS_RE = [\n  ['#byline', bylineRe],\n  ['.byline', bylineRe],\n];\n","import { cleanAuthor } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\n\nimport {\n  AUTHOR_META_TAGS,\n  AUTHOR_MAX_LENGTH,\n  AUTHOR_SELECTORS,\n  BYLINE_SELECTORS_RE,\n} from './constants';\n\nconst GenericAuthorExtractor = {\n  extract({ $, metaCache }) {\n    let author;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [selector, regex] of BYLINE_SELECTORS_RE) {\n      const node = $(selector);\n      if (node.length === 1) {\n        const text = node.text();\n        if (regex.test(text)) {\n          return cleanAuthor(text);\n        }\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericAuthorExtractor;\n","// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const DATE_PUBLISHED_META_TAGS = [\n  'article:published_time',\n  'displaydate',\n  'dc.date',\n  'dc.date.issued',\n  'rbpubdate',\n  'publish_date',\n  'pub_date',\n  'pagedate',\n  'pubdate',\n  'revision_date',\n  'doc_date',\n  'date_created',\n  'content_create_date',\n  'lastmodified',\n  'created',\n  'date',\n];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nexport const DATE_PUBLISHED_SELECTORS = [\n  '.hentry .dtstamp.published',\n  '.hentry .published',\n  '.hentry .dtstamp.updated',\n  '.hentry .updated',\n  '.single .published',\n  '.meta .published',\n  '.meta .postDate',\n  '.entry-date',\n  '.byline .date',\n  '.postmetadata .date',\n  '.article_datetime',\n  '.date-header',\n  '.story-date',\n  '.dateStamp',\n  '#story .datetime',\n  '.dateline',\n  '.pubdate',\n];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nconst abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nexport const DATE_PUBLISHED_URL_RES = [\n  new RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n  new RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n  new RegExp(`/(20\\\\d{2}/${abbrevMonthsStr}/[0-3]\\\\d)/`, 'i'),\n];\n","import { cleanDatePublished } from 'cleaners';\nimport { extractFromMeta, extractFromSelectors } from 'utils/dom';\nimport { extractFromUrl } from 'utils/text';\n\nimport {\n  DATE_PUBLISHED_META_TAGS,\n  DATE_PUBLISHED_SELECTORS,\n  DATE_PUBLISHED_URL_RES,\n} from './constants';\n\nconst GenericDatePublishedExtractor = {\n  extract({ $, url, metaCache }) {\n    let datePublished;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta(\n      $,\n      DATE_PUBLISHED_META_TAGS,\n      metaCache,\n      false\n    );\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  },\n};\n\nexport default GenericDatePublishedExtractor;\n","// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nconst GenericDekExtractor = {\n  extract() {\n    return null;\n  },\n};\n\nexport default GenericDekExtractor;\n","// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const LEAD_IMAGE_URL_META_TAGS = [\n  'og:image',\n  'twitter:image',\n  'image_src',\n];\n\nexport const LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS = [\n  'upload',\n  'wp-content',\n  'large',\n  'photo',\n  'wp-image',\n];\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS = [\n  'spacer',\n  'sprite',\n  'blank',\n  'throbber',\n  'gradient',\n  'tile',\n  'bg',\n  'background',\n  'icon',\n  'social',\n  'header',\n  'hdr',\n  'advert',\n  'spinner',\n  'loader',\n  'loading',\n  'default',\n  'rating',\n  'share',\n  'facebook',\n  'twitter',\n  'theme',\n  'promo',\n  'ads',\n  'wp-includes',\n];\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const GIF_RE = /\\.gif(\\?.*)?$/i;\nexport const JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n","import {\n  POSITIVE_LEAD_IMAGE_URL_HINTS_RE,\n  NEGATIVE_LEAD_IMAGE_URL_HINTS_RE,\n  GIF_RE,\n  JPG_RE,\n} from './constants';\n\nimport { PHOTO_HINTS_RE } from '../content/scoring/constants';\n\nfunction getSig($node) {\n  return `${$node.attr('class') || ''} ${$node.attr('id') || ''}`;\n}\n\n// Scores image urls based on a variety of heuristics.\nexport function scoreImageUrl(url) {\n  url = url.trim();\n  let score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nexport function scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nexport function scoreByParents($img) {\n  let score = 0;\n  const $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  const $parent = $img.parent();\n  let $gParent;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach($node => {\n    if (PHOTO_HINTS_RE.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nexport function scoreBySibling($img) {\n  let score = 0;\n  const $sibling = $img.next();\n  const sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nexport function scoreByDimensions($img) {\n  let score = 0;\n\n  const width = parseFloat($img.attr('width'));\n  const height = parseFloat($img.attr('height'));\n  const src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    const area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nexport function scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n","import { extractFromMeta } from 'utils/dom';\nimport { cleanImage } from 'cleaners';\n\nimport {\n  LEAD_IMAGE_URL_META_TAGS,\n  LEAD_IMAGE_URL_SELECTORS,\n} from './constants';\n\nimport {\n  scoreImageUrl,\n  scoreAttr,\n  scoreByParents,\n  scoreBySibling,\n  scoreByDimensions,\n  scoreByPosition,\n} from './score-image';\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nconst GenericLeadImageUrlExtractor = {\n  extract({ $, content, metaCache, html }) {\n    let cleanUrl;\n    if (!$.browser && $('head').length === 0) {\n      $('*')\n        .first()\n        .prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    const imageUrl = extractFromMeta(\n      $,\n      LEAD_IMAGE_URL_META_TAGS,\n      metaCache,\n      false\n    );\n\n    if (imageUrl) {\n      cleanUrl = cleanImage(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    const $content = $(content);\n    const imgs = $('img', $content).toArray();\n    const imgScores = {};\n\n    imgs.forEach((img, index) => {\n      const $img = $(img);\n      const src = $img.attr('src');\n\n      if (!src) return;\n\n      let score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    const [topUrl, topScore] = Reflect.ownKeys(imgScores).reduce(\n      (acc, key) => (imgScores[key] > acc[1] ? [key, imgScores[key]] : acc),\n      [null, 0]\n    );\n\n    if (topScore > 0) {\n      cleanUrl = cleanImage(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const selector of LEAD_IMAGE_URL_SELECTORS) {\n      const $node = $(selector).first();\n      const src = $node.attr('src');\n      if (src) {\n        cleanUrl = cleanImage(src);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const href = $node.attr('href');\n      if (href) {\n        cleanUrl = cleanImage(href);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const value = $node.attr('value');\n      if (value) {\n        cleanUrl = cleanImage(value);\n        if (cleanUrl) return cleanUrl;\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericLeadImageUrlExtractor;\n","import difflib from 'difflib';\n\nexport default function scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    const similarity = new difflib.SequenceMatcher(\n      null,\n      articleUrl,\n      href\n    ).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    const diffPercent = 1.0 - similarity;\n    const diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n","import { IS_DIGIT_RE } from 'utils/text/constants';\n\nexport default function scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  let score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    const linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n","export default function scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n","export const DIGIT_RE = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nexport const NEXT_LINK_TEXT_RE = new RegExp(\n  '(next|weiter|continue|>([^|]|$)|»([^|]|$))',\n  'i'\n);\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n","import { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { range } from 'utils';\nimport {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PAGE_RE,\n} from 'utils/dom/constants';\nimport { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nfunction makeSig($link) {\n  return `${$link.attr('class') || ''} ${$link.attr('id') || ''}`;\n}\n\nexport default function scoreByParents($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  let $parent = $link.parent();\n  let positiveMatch = false;\n  let negativeMatch = false;\n  let score = 0;\n\n  Array.from(range(0, 4)).forEach(() => {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    const parentData = makeSig($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (\n      !negativeMatch &&\n      NEGATIVE_SCORE_RE.test(parentData) &&\n      EXTRANEOUS_LINK_HINTS_RE.test(parentData)\n    ) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n","import { PREV_LINK_TEXT_RE } from '../constants';\n\nexport default function scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { DIGIT_RE, EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function shouldScore(\n  href,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  linkText,\n  previousUrls\n) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(url => href === url) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  const { hostname } = parsedUrl;\n  const { hostname: linkHost } = URL.parse(href);\n\n  // Domain mismatch.\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  const fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n","export default function scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE, CAP_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { getAttrs, isWordpress } from 'utils/dom';\nimport { removeAnchor, pageNumFromUrl } from 'utils/text';\n\nimport {\n  scoreSimilarity,\n  scoreLinkText,\n  scorePageInLink,\n  scoreExtraneousLinks,\n  scoreByParents,\n  scorePrevLink,\n  shouldScore,\n  scoreBaseUrl,\n  scoreCapLinks,\n  scoreNextLinkText,\n} from './utils';\n\nexport function makeBaseRegex(baseUrl) {\n  return new RegExp(`^${baseUrl}`, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return `${linkText || $link.text()} ${$link.attr('class') || ''} ${$link.attr(\n    'id'\n  ) || ''}`;\n}\n\nexport default function scoreLinks({\n  links,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  $,\n  previousUrls = [],\n}) {\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  const baseRegex = makeBaseRegex(baseUrl);\n  const isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  const scoredPages = links.reduce((possiblePages, link) => {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    const attrs = getAttrs(link);\n\n    // if href is undefined, return\n    if (!attrs.href) return possiblePages;\n\n    const href = removeAnchor(attrs.href);\n    const $link = $(link);\n    const linkText = $link.text();\n\n    if (\n      !shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)\n    ) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText,\n        href,\n      };\n    } else {\n      possiblePages[href].linkText = `${\n        possiblePages[href].linkText\n      }|${linkText}`;\n    }\n\n    const possiblePage = possiblePages[href];\n    const linkData = makeSig($link, linkText);\n    const pageNum = pageNumFromUrl(href);\n\n    let score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return Reflect.ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n","import URL from 'url';\n\nimport { articleBaseUrl, removeAnchor } from 'utils/text';\nimport scoreLinks from './scoring/score-links';\n\n// Looks for and returns next page url\n// for multi-page articles\nconst GenericNextPageUrlExtractor = {\n  extract({ $, url, parsedUrl, previousUrls = [] }) {\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    const articleUrl = removeAnchor(url);\n    const baseUrl = articleBaseUrl(url, parsedUrl);\n\n    const links = $('a[href]').toArray();\n\n    const scoredLinks = scoreLinks({\n      links,\n      articleUrl,\n      baseUrl,\n      parsedUrl,\n      $,\n      previousUrls,\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    const topPage = Reflect.ownKeys(scoredLinks).reduce(\n      (acc, link) => {\n        const scoredLink = scoredLinks[link];\n        return scoredLink.score > acc.score ? scoredLink : acc;\n      },\n      { score: -100 }\n    );\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  },\n};\n\nexport default GenericNextPageUrlExtractor;\n","export const CANONICAL_META_SELECTORS = ['og:url'];\n","import URL from 'url';\nimport { extractFromMeta } from 'utils/dom';\n\nimport { CANONICAL_META_SELECTORS } from './constants';\n\nfunction parseDomain(url) {\n  const parsedUrl = URL.parse(url);\n  const { hostname } = parsedUrl;\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url,\n    domain: parseDomain(url),\n  };\n}\n\nconst GenericUrlExtractor = {\n  extract({ $, url, metaCache }) {\n    const $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      const href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    const metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  },\n};\n\nexport default GenericUrlExtractor;\n","export const EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n","import ellipsize from 'ellipsize';\n\nimport { extractFromMeta, stripTags } from 'utils/dom';\n\nimport { EXCERPT_META_SELECTORS } from './constants';\n\nexport function clean(content, $, maxLength = 200) {\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nconst GenericExcerptExtractor = {\n  extract({ $, content, metaCache }) {\n    const excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    const maxLength = 200;\n    const shortContent = content.slice(0, maxLength * 5);\n    return clean($(shortContent).text(), $, maxLength);\n  },\n};\n\nexport default GenericExcerptExtractor;\n","import cheerio from 'cheerio';\n\nimport { normalizeSpaces } from 'utils/text';\n\nconst getWordCount = content => {\n  const $ = cheerio.load(content);\n  const $content = $('div').first();\n  const text = normalizeSpaces($content.text());\n  return text.split(/\\s/).length;\n};\n\nconst getWordCountAlt = content => {\n  content = content.replace(/<[^>]*>/g, ' ');\n  content = content.replace(/\\s+/g, ' ');\n  content = content.trim();\n  return content.split(' ').length;\n};\n\nconst GenericWordCountExtractor = {\n  extract({ content }) {\n    let count = getWordCount(content);\n    if (count === 1) count = getWordCountAlt(content);\n    return count;\n  },\n};\n\nexport default GenericWordCountExtractor;\n","import cheerio from 'cheerio';\nimport stringDirection from 'string-direction';\n\nimport GenericContentExtractor from './content/extractor';\nimport GenericTitleExtractor from './title/extractor';\nimport GenericAuthorExtractor from './author/extractor';\nimport GenericDatePublishedExtractor from './date-published/extractor';\nimport GenericDekExtractor from './dek/extractor';\nimport GenericLeadImageUrlExtractor from './lead-image-url/extractor';\nimport GenericNextPageUrlExtractor from './next-page-url/extractor';\nimport GenericUrlExtractor from './url/extractor';\nimport GenericExcerptExtractor from './excerpt/extractor';\nimport GenericWordCountExtractor from './word-count/extractor';\n\nconst GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: ({ title }) => stringDirection.getDirection(title),\n\n  extract(options) {\n    const { html, $ } = options;\n\n    if (html && !$) {\n      const loaded = cheerio.load(html);\n      options.$ = loaded;\n    }\n\n    const title = this.title(options);\n    const date_published = this.date_published(options);\n    const author = this.author(options);\n    const content = this.content({ ...options, title });\n    const lead_image_url = this.lead_image_url({ ...options, content });\n    const dek = this.dek({ ...options, content });\n    const next_page_url = this.next_page_url(options);\n    const excerpt = this.excerpt({ ...options, content });\n    const word_count = this.word_count({ ...options, content });\n    const direction = this.direction({ title });\n    const { url, domain } = this.url_and_domain(options);\n\n    return {\n      title,\n      author,\n      date_published: date_published || null,\n      dek,\n      lead_image_url,\n      content,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n    };\n  },\n};\n\nexport default GenericExtractor;\n","import Cleaners from 'cleaners';\nimport { convertNodeTo, makeLinksAbsolute } from 'utils/dom';\nimport GenericExtractor from './generic';\n\n// Remove elements by an array of selectors\nexport function cleanBySelectors($content, $, { clean }) {\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nexport function transformElements($content, $, { transforms }) {\n  if (!transforms) return $content;\n\n  Reflect.ownKeys(transforms).forEach(key => {\n    const $matches = $(key, $content);\n    const value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each((index, node) => {\n        convertNodeTo($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each((index, node) => {\n        const result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors, extractHtml, allowMultiple) {\n  return selectors.find(selector => {\n    if (Array.isArray(selector)) {\n      if (extractHtml) {\n        return selector.reduce((acc, s) => acc && $(s).length > 0, true);\n      }\n\n      const [s, attr] = selector;\n      return (\n        (allowMultiple || (!allowMultiple && $(s).length === 1)) &&\n        $(s).attr(attr) &&\n        $(s)\n          .attr(attr)\n          .trim() !== ''\n      );\n    }\n\n    return (\n      (allowMultiple || (!allowMultiple && $(selector).length === 1)) &&\n      $(selector)\n        .text()\n        .trim() !== ''\n    );\n  });\n}\n\nexport function select(opts) {\n  const { $, type, extractionOpts, extractHtml = false } = opts;\n  // Skip if there's not extraction for this type\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  const { selectors, defaultCleaner = true, allowMultiple } = extractionOpts;\n\n  const overrideAllowMultiple = type === 'lead_image_url' || allowMultiple;\n\n  const matchingSelector = findMatchingSelector(\n    $,\n    selectors,\n    extractHtml,\n    overrideAllowMultiple\n  );\n\n  if (!matchingSelector) return null;\n\n  function transformAndClean($node) {\n    makeLinksAbsolute($node, $, opts.url || '');\n    cleanBySelectors($node, $, extractionOpts);\n    transformElements($node, $, extractionOpts);\n    return $node;\n  }\n\n  function selectHtml() {\n    // If the selector type requests html as its return type\n    // transform and clean the element with provided selectors\n    let $content;\n\n    // If matching selector is an array, we're considering this a\n    // multi-match selection, which allows the parser to choose several\n    // selectors to include in the result. Note that all selectors in the\n    // array must match in order for this selector to trigger\n    if (Array.isArray(matchingSelector)) {\n      $content = $(matchingSelector.join(','));\n      const $wrapper = $('<div></div>');\n      $content.each((_, element) => {\n        $wrapper.append(element);\n      });\n\n      $content = $wrapper;\n    } else {\n      $content = $(matchingSelector);\n    }\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n    $content = transformAndClean($content);\n    // P.S. parser 插件核心算法。根据算法提取有效内容（其实做的事情是删除所有非有效内容）\n\n    // if (Cleaners[type]) {\n    //   Cleaners[type]($content, { ...opts, defaultCleaner });\n    // }\n\n    if (allowMultiple) {\n      return (\n        $content\n          .children()\n          .toArray()\n          // 只要有文本内容的区块。\n          .filter(\n            el =>\n              $(el)\n                .text()\n                .trim() !== ''\n          )\n          .map(el => $.html($(el)))\n      );\n    }\n\n    return $.html($content);\n  }\n\n  if (extractHtml) {\n    return selectHtml(matchingSelector);\n  }\n\n  let $match;\n  let result;\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    const [selector, attr, transform] = matchingSelector;\n    $match = $(selector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) => {\n      const item = $(el)\n        .attr(attr)\n        .trim();\n      return transform ? transform(item) : item;\n    });\n  } else {\n    $match = $(matchingSelector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) =>\n      $(el)\n        .text()\n        .trim()\n    );\n  }\n\n  result =\n    Array.isArray(result.toArray()) && allowMultiple\n      ? result.toArray()\n      : result[0];\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner && Cleaners[type]) {\n    return Cleaners[type](result, { ...opts, ...extractionOpts });\n  }\n\n  return result;\n}\n\nexport function selectExtendedTypes(extend, opts) {\n  const results = {};\n  Reflect.ownKeys(extend).forEach(t => {\n    if (!results[t]) {\n      results[t] = select({ ...opts, type: t, extractionOpts: extend[t] });\n    }\n  });\n  return results;\n}\n\nfunction extractResult(opts) {\n  const { type, extractor, fallback = true } = opts;\n\n  const result = select({ ...opts, extractionOpts: extractor[type] });\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nconst RootExtractor = {\n  extract(extractor = GenericExtractor, opts) {\n    const { contentOnly, extractedTitle } = opts;\n    // This is the generic extractor. Run its extract method\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = {\n      ...opts,\n      extractor,\n    };\n\n    if (contentOnly) {\n      const content = extractResult({\n        ...opts,\n        type: 'content',\n        extractHtml: true,\n        title: extractedTitle,\n      });\n      return {\n        content,\n      };\n    }\n    let extendedResults = {};\n    if (extractor.extend) {\n      extendedResults = selectExtendedTypes(extractor.extend, opts);\n    }\n    const title = extractResult({ ...opts, type: 'title' });\n    const date_published = extractResult({ ...opts, type: 'date_published' });\n    const author = extractResult({ ...opts, type: 'author' });\n    const next_page_url = extractResult({ ...opts, type: 'next_page_url' });\n    let content = extractResult({\n      ...opts,\n      type: 'content',\n      extractHtml: true,\n      title,\n    });\n    content = Array.isArray(content) ? content.join('') : content;\n\n    const lead_image_url = extractResult({\n      ...opts,\n      type: 'lead_image_url',\n      content,\n    });\n    const excerpt = extractResult({ ...opts, type: 'excerpt', content });\n\n    const dek = extractResult({ ...opts, type: 'dek', content, excerpt });\n    const word_count = extractResult({ ...opts, type: 'word_count', content });\n    const direction = extractResult({ ...opts, type: 'direction', title });\n    const { url, domain } = extractResult({\n      ...opts,\n      type: 'url_and_domain',\n    }) || { url: null, domain: null };\n\n    return {\n      title,\n      content,\n      author,\n      date_published,\n      lead_image_url,\n      dek,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n      ...extendedResults,\n    };\n  },\n};\n\nexport default RootExtractor;\n","import { removeAnchor } from 'utils/text';\nimport RootExtractor from 'extractors/root-extractor';\nimport GenericExtractor from 'extractors/generic';\nimport Resource from 'resource';\n\nexport default async function collectAllPages({\n  next_page_url,\n  html,\n  $,\n  metaCache,\n  result,\n  Extractor,\n  title,\n  url,\n}) {\n  // At this point, we've fetched just the first page\n  let pages = 1;\n  const previousUrls = [removeAnchor(url)];\n  // If we've gone over 26 pages, something has\n  // likely gone wrong.\n  while (next_page_url && pages < 26) {\n    pages += 1;\n    // eslint-disable-next-line no-await-in-loop\n    $ = await Resource.create(next_page_url);\n    html = $.html();\n\n    const extractorOpts = {\n      url: next_page_url,\n      html,\n      $,\n      metaCache,\n      extractedTitle: title,\n      previousUrls,\n    };\n\n    const nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n    previousUrls.push(next_page_url);\n    result = {\n      ...result,\n      content: `${result.content}<hr><h4>Page ${pages}</h4>${\n        nextPageResult.content\n      }`,\n    };\n\n    // eslint-disable-next-line prefer-destructuring\n    next_page_url = nextPageResult.next_page_url;\n  }\n\n  const word_count = GenericExtractor.word_count({\n    content: `<div>${result.content}</div>`,\n  });\n  return {\n    ...result,\n    total_pages: pages,\n    rendered_pages: pages,\n    word_count,\n  };\n}\n","import URL from 'url';\nimport cheerio from 'cheerio';\nimport TurndownService from 'turndown';\n\nimport Resource from 'resource';\nimport { validateUrl } from 'utils';\nimport addCustomExtractor from 'extractors/add-extractor';\nimport getExtractor from 'extractors/get-extractor';\nimport RootExtractor, { selectExtendedTypes } from 'extractors/root-extractor';\nimport collectAllPages from 'extractors/collect-all-pages';\n\nconst Parser = {\n  async parse(url, { html, ...opts } = {}) {\n    const {\n      fetchAllPages = true,\n      fallback = true,\n      contentType = 'html',\n      headers = {},\n      extend,\n      customExtractor,\n    } = opts;\n\n    // if no url was passed and this is the browser version,\n    // set url to window.location.href and load the html\n    // from the current page\n    if (!url && cheerio.browser) {\n      url = window.location.href; // eslint-disable-line no-undef\n      html = html || cheerio.html();\n    }\n\n    const parsedUrl = URL.parse(url);\n\n    if (!validateUrl(parsedUrl)) {\n      return {\n        error: true,\n        message:\n          'The url parameter passed does not look like a valid URL. Please check your URL and try again.',\n      };\n    }\n\n    const $ = await Resource.create(url, html, parsedUrl, headers);\n\n    // If we found an error creating the resource, return that error\n    if ($.failed) {\n      return $;\n    }\n\n    // Add custom extractor via cli.\n    if (customExtractor) {\n      addCustomExtractor(customExtractor);\n    }\n\n    const Extractor = getExtractor(url);\n    // console.log(`Using extractor for ${JSON.stringify(Extractor)}`);\n\n    // if html still has not been set (i.e., url passed to Parser.parse),\n    // set html from the response of Resource.create\n    if (!html) {\n      html = $.html();\n    }\n\n    // Cached value of every meta name in our document.\n    // Used when extracting title/author/date_published/dek\n    const metaCache = $('meta')\n      .map((_, node) => $(node).attr('name'))\n      .toArray();\n\n    let extendedTypes = {};\n    if (extend) {\n      extendedTypes = selectExtendedTypes(extend, { $, url, html });\n    }\n\n    let result = RootExtractor.extract(Extractor, {\n      url,\n      html,\n      $,\n      metaCache,\n      parsedUrl,\n      fallback,\n      contentType,\n    });\n\n    const { title, next_page_url } = result;\n\n    // Fetch more pages if next_page_url found\n    if (fetchAllPages && next_page_url) {\n      result = await collectAllPages({\n        Extractor,\n        next_page_url,\n        html,\n        $,\n        metaCache,\n        result,\n        title,\n        url,\n      });\n    } else {\n      result = {\n        ...result,\n        total_pages: 1,\n        rendered_pages: 1,\n      };\n    }\n\n    if (contentType === 'markdown') {\n      const turndownService = new TurndownService();\n      result.content = turndownService.turndown(result.content);\n    } else if (contentType === 'text') {\n      result.content = $.text($(result.content));\n    }\n\n    // 如果当前url没有匹配到任何extractor，返回原始的html作为content\n    if (!Extractor) {\n      result.content = html;\n    }\n\n    return { ...result, ...extendedTypes };\n  },\n\n  browser: !!cheerio.browser,\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource(url) {\n    return Resource.create(url);\n  },\n\n  addExtractor(extractor) {\n    return addCustomExtractor(extractor);\n  },\n};\n\nexport default Parser;\n"],"names":["NORMALIZE_RE","normalizeSpaces","text","replace","trim","extractFromUrl","url","regexList","matchRe","find","re","test","exec","PAGE_IN_HREF_RE","RegExp","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","ENCODING_RE","DEFAULT_ENCODING","pageNumFromUrl","matches","match","pageNum","_parseInt","removeAnchor","split","isGoodSegment","segment","index","firstSegmentHasLetters","goodSegment","length","toLowerCase","articleBaseUrl","parsed","parsedUrl","URL","parse","protocol","host","path","cleanedSegments","reverse","reduce","acc","rawSegment","includes","_segment$split","_segment$split2","_slicedToArray","possibleSegment","fileExt","push","concat","join","SENTENCE_END_RE","hasSentenceEnd","excerptContent","content","words","arguments","undefined","slice","getEncoding","str","encoding","_matches","iconv","encodingExists","REQUEST_HEADERS","cheerio","browser","FETCH_TIMEOUT","BAD_CONTENT_TYPES","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","get","options","_Promise","resolve","reject","request","err","response","body","validateResponse","parseNon200","statusMessage","statusCode","Error","error","_response$headers","headers","contentType","contentLength","fetchResource","_x","_x2","_fetchResource","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$get","_args","wrap","_callee$","_context","prev","next","encodeURI","_objectSpread","href","timeout","jar","gzip","followAllRedirects","window","followRedirect","sent","abrupt","t0","message","stop","apply","convertMetaProp","$","from","to","each","_","node","$node","value","attr","removeAttr","normalizeMetaTags","SPACER_RE","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","IS_WP_SELECTOR","PAGE_RE","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","stripUnlikelyCandidates","not","classes","id","classAndId","remove","brsToPs","collapsing","element","$element","nextElement","tagName","paragraphize","br","sibling","nextSibling","p","_sibling","appendTo","replaceWith","convertDivs","div","$div","convertible","children","convertNodeTo","convertSpans","span","$span","parents","convertToParagraphs","tag","attrs","getAttrs","attribString","_Reflect$ownKeys","map","key","html","contents","cleanForHeight","$img","height","width","removeSpacers","cleanImages","$article","img","markToKeep","article","tags","_URL$parse","hostname","_toConsumableArray","addClass","stripJunkTags","cleanHOnes","$hOnes","removeAllButWhitelist","setAttrs","_defineProperty","removeClass","cleanAttributes","parent","removeEmpty","$p","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","READABILITY_ASSET","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","getWeight","score","getScore","_parseFloat","scoreCommas","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","setScore","addScore","amount","getOrInitScore","e","addToParent","weightNodes","scoreNode","_$node$get","addScoreTo","scorePs","$parent","rawScore","scoreContent","forEach","_ref","_ref2","parentSelector","childSelector","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","findTopCandidate","removeUnlessContent","weight","hasClass","pCount","inputCount","imgCount","nodeIsList","previousNode","scriptCount","cleanTags","cleanHeaders","title","header","$header","prevAll","rewriteTopLevel","absolutize","rootUrl","baseUrl","absoluteUrl","setAttr","absolutizeSet","$content","urlSet","srcset","candidates","absoluteCandidates","candidate","parts","absoluteUrlSet","_Set","makeLinksAbsolute","totalTextLength","linkText","linkLength","extractFromMeta","metaNames","cachedNames","foundNames","filter","name","indexOf","_iterator","_createForOfIteratorHelper","_step","_loop","type","nodes","values","toArray","metaValue","stripTags","_values","v","_ret","s","n","done","f","isGoodNode","maxChildren","withinComment","extractFromSelectors","selectors","textOnly","selector","cleanText","commentParent","nodeClass","nodeIsSufficient","isWordpress","attribs","attributes","val","setAttribute","removeAttribute","IS_LINK","IMAGE_RE","IS_IMAGE","IS_SRCSET","TAGS_TO_REMOVE","convertLazyLoadedImages","extractSrcFromJSON","_JSON$parse","JSON","src","existingSrc","isComment","cleanComments","root","clean","Resource","create","preparedResponse","_arguments","_this","result","validResponse","alreadyDecoded","failed","generateDoc","_ref$alreadyDecoded","_response$headers$con","encodeDoc","_ref2$alreadyDecoded","load","decodedContent","decode","contentTypeSelector","metaContentType","properEncoding","range","start","end","validateUrl","merge","extractor","domains","domain","mergeSupportedDomains","supportedDomains","apiExtractors","addExtractor","_Object$assign","BloggerExtractor","transforms","noscript","author","date_published","NYMagExtractor","h1","$children","dek","WikipediaExtractor","defaultCleaner","infoboxImg","prepend","TwitterExtractor","permalinkRoleMain","tweets","$tweetContainer","NYTimesExtractor","imgGLazy","lead_image_url","next_page_url","excerpt","TheAtlanticExtractor","NewYorkerExtractor","timezone","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","h2","divLongform_custom_header_media","has","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","iframeLazyloadDataRecommendIdYoutube","youtubeId","BroadwayWorldExtractor","ApartmentTherapyExtractor","divDataRenderReactIdImagesLazyPicture","data","sources","MediumExtractor","sectionSpanFirstOfType","$text","iframe","ytRe","thumb","decodeURIComponent","_thumb$match","_thumb$match2","$caption","empty","figure","WwwTmzComExtractor","WwwWashingtonpostComExtractor","divInlineContent","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","znBody__paragraphEl__leafmediaSourcedParagraph","znBody__paragraph","WwwAolComExtractor","WwwYoutubeComExtractor","playerApi","videoId","playerContainerOuter","description","WwwTheguardianComExtractor","WwwSbnationComExtractor","WwwBloombergComExtractor","WwwBustleComExtractor","WwwNprOrgExtractor","WwwRecodeNetExtractor","QzComExtractor","WwwDmagazineComExtractor","format","WwwReutersComExtractor","MashableComExtractor","WwwChicagotribuneComExtractor","WwwVoxComExtractor","figureEImage__imageNoscript","imgHtml","NewsNationalgeographicComExtractor","parsysContent","$imgSrc","WwwNationalgeographicComExtractor","$imageParent","$dataAttrContainer","imgPath1","imgPath2","WwwLatimesComExtractor","trb_ar_la","$figure","PagesixComExtractor","ThefederalistpapersOrgExtractor","WwwCbssportsComExtractor","WwwMsnbcComExtractor","paneNodeBody","_WwwMsnbcComExtractor","WwwThepoliticalinsiderComExtractor","WwwMentalflossComExtractor","AbcnewsGoComExtractor","WwwNydailynewsComExtractor","WwwCnbcComExtractor","WwwPopsugarComExtractor","ObserverComExtractor","PeopleComExtractor","WwwUsmagazineComExtractor","WwwRollingstoneComExtractor","twofortysevensportsComExtractor","UproxxComExtractor","WwwEonlineComExtractor","WwwMiamiheraldComExtractor","WwwRefinery29ComExtractor","divLoadingNoscript","WwwMacrumorsComExtractor","WwwAndroidcentralComExtractor","WwwSiComExtractor","WwwRawstoryComExtractor","WwwCnetComExtractor","figureImage","WwwTodayComExtractor","WwwAlComExtractor","WwwThepennyhoarderComExtractor","WwwWesternjournalismComExtractor","WwwAmericanowComExtractor","ScienceflyComExtractor","HellogigglesComExtractor","ThoughtcatalogComExtractor","WwwInquisitrComExtractor","WwwNbcnewsComExtractor","FortuneComExtractor","WwwLinkedinComExtractor","ObamawhitehouseArchivesGovExtractor","WwwOpposingviewsComExtractor","WwwProspectmagazineCoUkExtractor","ForwardComExtractor","WwwQdailyComExtractor","GothamistComExtractor","WwwFoolComExtractor","captionImg","WwwSlateComExtractor","IciRadioCanadaCaExtractor","WwwFortinetComExtractor","WwwFastcompanyComExtractor","BlisterreviewComExtractor","figcaption","NewsMynaviJpExtractor","ClinicaltrialsGovExtractor","GithubComExtractor","WwwRedditComExtractor","divRoleImg","bgImg","css","OtrsComExtractor","WwwOssnewsJpExtractor","BuzzapJpExtractor","WwwAsahiComExtractor","WwwSanwaCoJpExtractor","WwwElecomCoJpExtractor","table","ScanNetsecurityNeJpExtractor","JvndbJvnJpExtractor","GeniusComExtractor","res","json","song","release_date","album","cover_art_url","WwwJnsaOrgExtractor","PhpspotOrgExtractor","WwwInfoqComExtractor","WwwMoongiftJpExtractor","WwwItmediaCoJpExtractor","WwwPublickey1JpExtractor","TakagihiromitsuJpExtractor","BookwalkerJpExtractor","WwwYomiuriCoJpExtractor","JapanCnetComExtractor","DeadlineComExtractor","embedTwitter","innerHtml","WwwGizmodoJpExtractor","imgPPostThumbnailImage","GetnewsJpExtractor","WwwLifehackerJpExtractor","imgLazyload","SectIijAdJpExtractor","WwwOreillyCoJpExtractor","WwwIpaGoJpExtractor","WeeklyAsciiJpExtractor","TechlogIijAdJpExtractor","WiredJpExtractor","imgDataOriginal","dataOriginal","JapanZdnetComExtractor","WwwRbbtodayComExtractor","WwwLemondeFrExtractor","WwwPhoronixComExtractor","PitchforkComExtractor","extend","BiorxivOrgExtractor","EpaperZeitDeExtractor","byline","linkbox","WwwLadbibleComExtractor","TimesofindiaIndiatimesComExtractor","reporter","MaTtiasBeExtractor","after","ul","PastebinComExtractor","ol","li","WwwAbendblattDeExtractor","o","i","r","charCodeAt","String","fromCharCode","WwwGrueneDeExtractor","WwwEngadgetComExtractor","ArstechnicaComExtractor","before","WwwNdtvComExtractor","place_cont","SpektrumExtractor","PostlightComExtractor","WwwInvestmentexecutiveComExtractor","WwwCbcCaExtractor","_Object$keys","CustomExtractors","getExtractor","apiExtractorsKeys","extractorsKeys","Extractors","domainMatch","includedPaths","some","reg","CLEAN_AUTHOR_RE","TEXT_LINK_RE","MS_DATE_STRING","SEC_DATE_STRING","CLEAN_DATE_STRING_RE","TIME_MERIDIAN_SPACE_RE","TIME_MERIDIAN_DOTS_RE","TIME_NOW_STRING","timeUnits","allTimeUnits","TIME_AGO_STRING","months","allMonths","timestamp1","timestamp2","timestamp3","SPLIT_DATE_STRING","TIME_WITH_OFFSET_RE","TITLE_SPLITTERS_RE","DOMAIN_ENDINGS_RE","cleanAuthor","leadImageUrl","validUrl","isWebUri","cleanDek","dekText","cleanDateString","dateString","createDate","moment","Date","fragments","subtract","tz","parseFormat","cleanDatePublished","toISOString","date","isValid","extractCleanNode","_ref$cleanConditional","cleanConditionally","_ref$title","_ref$url","_ref$defaultCleaner","cleanTitle","resolveSplitTitle","extractBreadcrumbTitle","splitTitle","termCounts","titleText","_Reflect$ownKeys$redu","_Reflect$ownKeys$redu2","maxTerm","termCount","splitEnds","longestEnd","cleanDomainFromTitle","nakedDomain","startSlug","startSlugRatio","wuzzy","levenshtein","endSlug","endSlugRatio","newTitle","Cleaners","cleanImage","cleanContent","extractBestNode","opts","$topCandidate","GenericContentExtractor","defaultOpts","extract","getContentNode","cleanAndReturnNode","k","STRONG_TITLE_META_TAGS","WEAK_TITLE_META_TAGS","STRONG_TITLE_SELECTORS","WEAK_TITLE_SELECTORS","GenericTitleExtractor","metaCache","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","bylineRe","BYLINE_SELECTORS_RE","GenericAuthorExtractor","_step$value","regex","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","abbrevMonthsStr","DATE_PUBLISHED_URL_RES","GenericDatePublishedExtractor","datePublished","GenericDekExtractor","LEAD_IMAGE_URL_META_TAGS","LEAD_IMAGE_URL_SELECTORS","POSITIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","getSig","scoreImageUrl","scoreAttr","scoreByParents","$figParent","$gParent","scoreBySibling","scoreByDimensions","area","round","scoreByPosition","$imgs","GenericLeadImageUrlExtractor","cleanUrl","imageUrl","imgs","imgScores","topUrl","scoreSimilarity","articleUrl","similarity","difflib","SequenceMatcher","ratio","diffPercent","diffModifier","scoreLinkText","linkTextAsNum","scorePageInLink","isWp","DIGIT_RE","EXTRANEOUS_LINK_HINTS","EXTRANEOUS_LINK_HINTS_RE","NEXT_LINK_TEXT_RE","CAP_LINK_TEXT_RE","PREV_LINK_TEXT_RE","scoreExtraneousLinks","makeSig","$link","positiveMatch","negativeMatch","_Array$from","parentData","scorePrevLink","linkData","shouldScore","previousUrls","linkHost","fragment","scoreBaseUrl","baseRegex","scoreNextLinkText","scoreCapLinks","makeBaseRegex","scoreLinks","links","_ref$previousUrls","scoredPages","possiblePages","link","possiblePage","GenericNextPageUrlExtractor","scoredLinks","topPage","scoredLink","CANONICAL_META_SELECTORS","parseDomain","GenericUrlExtractor","$canonical","metaUrl","EXCERPT_META_SELECTORS","maxLength","ellipsize","ellipse","GenericExcerptExtractor","shortContent","getWordCount","getWordCountAlt","GenericWordCountExtractor","count","GenericExtractor","bind","url_and_domain","word_count","direction","stringDirection","getDirection","loaded","_this$url_and_domain","cleanBySelectors","transformElements","$matches","findMatchingSelector","extractHtml","allowMultiple","_Array$isArray","_selector","select","extractionOpts","_opts$extractHtml","_extractionOpts$defau","overrideAllowMultiple","matchingSelector","transformAndClean","selectHtml","$wrapper","el","$match","_matchingSelector","transform","item","selectExtendedTypes","results","t","extractResult","_opts$fallback","fallback","RootExtractor","_opts","contentOnly","extractedTitle","extendedResults","_ref3","collectAllPages","_collectAllPages","Extractor","pages","extractorOpts","nextPageResult","total_pages","rendered_pages","Parser","_opts$fetchAllPages","fetchAllPages","_opts$contentType","_opts$headers","customExtractor","extendedTypes","_result","turndownService","_objectWithoutProperties","_excluded","location","addCustomExtractor","TurndownService","turndown"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAY,GAAG,0CAA0C;AAEhD,SAASC,eAAeA,CAACC,IAAI,EAAE;EAC5C,OAAOA,IAAI,CAACC,OAAO,CAACH,YAAY,EAAE,GAAG,CAAC,CAACI,IAAI,EAAE;AAC/C;;ACJA;AACA;AACA;AACA;AACA;AACA,AAAe,SAASC,cAAcA,CAACC,GAAG,EAAEC,SAAS,EAAE;EACrD,IAAMC,OAAO,GAAGD,SAAS,CAACE,IAAI,CAAC,UAAAC,EAAE;IAAA,OAAIA,EAAE,CAACC,IAAI,CAACL,GAAG,CAAC;IAAC;EAClD,IAAIE,OAAO,EAAE;IACX,OAAOA,OAAO,CAACI,IAAI,CAACN,GAAG,CAAC,CAAC,CAAC,CAAC;;EAG7B,OAAO,IAAI;AACb;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAO,IAAMO,eAAe,GAAG,IAAIC,MAAM,CACvC,0EAA0E,EAC1E,GACF,CAAC;AAED,AAAO,IAAMC,YAAY,GAAG,QAAQ;AAEpC,AAAO,IAAMC,WAAW,GAAG,WAAW;AACtC,AAAO,IAAMC,WAAW,GAAG,WAAW;AAEtC,AAAO,IAAMC,WAAW,GAAG,oBAAoB;AAC/C,AAAO,IAAMC,gBAAgB,GAAG,OAAO;;ACzBxB,SAASC,cAAcA,CAACd,GAAG,EAAE;EAC1C,IAAMe,OAAO,GAAGf,GAAG,CAACgB,KAAK,CAACT,eAAe,CAAC;EAC1C,IAAI,CAACQ,OAAO,EAAE,OAAO,IAAI;EAEzB,IAAME,OAAO,GAAGC,SAAA,CAASH,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;;;;EAIxC,OAAOE,OAAO,GAAG,GAAG,GAAGA,OAAO,GAAG,IAAI;AACvC;;ACXe,SAASE,YAAYA,CAACnB,GAAG,EAAE;EACxC,OAAOA,GAAG,CAACoB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACvB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAC7C;;ACOA,SAASwB,aAAaA,CAACC,OAAO,EAAEC,KAAK,EAAEC,sBAAsB,EAAE;EAC7D,IAAIC,WAAW,GAAG,IAAI;;;;EAItB,IAAIF,KAAK,GAAG,CAAC,IAAIZ,WAAW,CAACN,IAAI,CAACiB,OAAO,CAAC,IAAIA,OAAO,CAACI,MAAM,GAAG,CAAC,EAAE;IAChED,WAAW,GAAG,IAAI;;;;;EAKpB,IAAIF,KAAK,KAAK,CAAC,IAAID,OAAO,CAACK,WAAW,EAAE,KAAK,OAAO,EAAE;IACpDF,WAAW,GAAG,KAAK;;;;;EAKrB,IAAIF,KAAK,GAAG,CAAC,IAAID,OAAO,CAACI,MAAM,GAAG,CAAC,IAAI,CAACF,sBAAsB,EAAE;IAC9DC,WAAW,GAAG,KAAK;;EAGrB,OAAOA,WAAW;AACpB;;AAEA;AACA;AACA;AACA,AAAe,SAASG,cAAcA,CAAC5B,GAAG,EAAE6B,MAAM,EAAE;EAClD,IAAMC,SAAS,GAAGD,MAAM,IAAIE,GAAG,CAACC,KAAK,CAAChC,GAAG,CAAC;EAC1C,IAAQiC,QAAQ,GAAiBH,SAAS,CAAlCG,QAAQ;IAAEC,IAAI,GAAWJ,SAAS,CAAxBI,IAAI;IAAEC,IAAI,GAAKL,SAAS,CAAlBK,IAAI;EAE5B,IAAIX,sBAAsB,GAAG,KAAK;EAClC,IAAMY,eAAe,GAAGD,IAAI,CACzBf,KAAK,CAAC,GAAG,CAAC,CACViB,OAAO,EAAE,CACTC,MAAM,CAAC,UAACC,GAAG,EAAEC,UAAU,EAAEjB,KAAK,EAAK;IAClC,IAAID,OAAO,GAAGkB,UAAU;;;IAGxB,IAAIlB,OAAO,CAACmB,QAAQ,CAAC,GAAG,CAAC,EAAE;MACzB,IAAAC,cAAA,GAAmCpB,OAAO,CAACF,KAAK,CAAC,GAAG,CAAC;QAAAuB,eAAA,GAAAC,cAAA,CAAAF,cAAA;QAA9CG,eAAe,GAAAF,eAAA;QAAEG,OAAO,GAAAH,eAAA;MAC/B,IAAIjC,WAAW,CAACL,IAAI,CAACyC,OAAO,CAAC,EAAE;QAC7BxB,OAAO,GAAGuB,eAAe;;;;;;IAM7B,IAAItC,eAAe,CAACF,IAAI,CAACiB,OAAO,CAAC,IAAIC,KAAK,GAAG,CAAC,EAAE;MAC9CD,OAAO,GAAGA,OAAO,CAACzB,OAAO,CAACU,eAAe,EAAE,EAAE,CAAC;;;;;;;IAOhD,IAAIgB,KAAK,KAAK,CAAC,EAAE;MACfC,sBAAsB,GAAGf,YAAY,CAACJ,IAAI,CAACiB,OAAO,CAAC;;;;IAIrD,IAAID,aAAa,CAACC,OAAO,EAAEC,KAAK,EAAEC,sBAAsB,CAAC,EAAE;MACzDe,GAAG,CAACQ,IAAI,CAACzB,OAAO,CAAC;;IAGnB,OAAOiB,GAAG;GACX,EAAE,EAAE,CAAC;EAER,UAAAS,MAAA,CAAUf,QAAQ,QAAAe,MAAA,CAAKd,IAAI,EAAAc,MAAA,CAAGZ,eAAe,CAACC,OAAO,EAAE,CAACY,IAAI,CAAC,GAAG,CAAC;AACnE;;AC9EA;AACA;AACA,IAAMC,eAAe,GAAG,IAAI1C,MAAM,CAAC,QAAQ,CAAC;AAC5C,AAAe,SAAS2C,cAAcA,CAACvD,IAAI,EAAE;EAC3C,OAAOsD,eAAe,CAAC7C,IAAI,CAACT,IAAI,CAAC;AACnC;;ACLe,SAASwD,cAAcA,CAACC,OAAO,EAAc;EAAA,IAAZC,KAAK,GAAAC,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACxD,OAAOF,OAAO,CACXvD,IAAI,EAAE,CACNsB,KAAK,CAAC,KAAK,CAAC,CACZqC,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,CACfL,IAAI,CAAC,GAAG,CAAC;AACd;;ACHA;AACA;AACA;AACA,AAAe,SAASS,WAAWA,CAACC,GAAG,EAAE;EACvC,IAAIC,QAAQ,GAAG/C,gBAAgB;EAC/B,IAAME,OAAO,GAAGH,WAAW,CAACN,IAAI,CAACqD,GAAG,CAAC;EACrC,IAAI5C,OAAO,KAAK,IAAI,EAAE;IAAA,IAAA8C,QAAA,GAAAjB,cAAA,CACV7B,OAAO;IAAd4C,GAAG,GAAAE,QAAA;;EAER,IAAIC,KAAK,CAACC,cAAc,CAACJ,GAAG,CAAC,EAAE;IAC7BC,QAAQ,GAAGD,GAAG;;EAEhB,OAAOC,QAAQ;AACjB;;ACdA;AACA,AAAO,IAAMI,eAAe,GAAGC,OAAO,CAACC,OAAO,GAC1C,EAAE,GACF;EACE,YAAY,EACV;AACJ,CAAC;;AAEL;AACA,AAAO,IAAMC,aAAa,GAAG,KAAK;;AAElC;AACA,IAAMC,iBAAiB,GAAG,CACxB,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,WAAW,CACZ;AAED,AAAO,IAAMC,oBAAoB,GAAG,IAAI7D,MAAM,MAAAwC,MAAA,CACvCoB,iBAAiB,CAACnB,IAAI,CAAC,GAAG,CAAC,SAChC,GACF,CAAC;;AAED;AACA;AACA,AAAO,IAAMqB,kBAAkB,GAAG,OAAO;;;;;AClBzC,SAASC,GAAGA,CAACC,OAAO,EAAE;EACpB,OAAO,IAAAC,QAAA,CAAY,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtCC,OAAO,CAACJ,OAAO,EAAE,UAACK,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAK;MACxC,IAAIF,GAAG,EAAE;QACPF,MAAM,CAACE,GAAG,CAAC;OACZ,MAAM;QACLH,OAAO,CAAC;UAAEK,IAAI,EAAJA,IAAI;UAAED,QAAQ,EAARA;SAAU,CAAC;;KAE9B,CAAC;GACH,CAAC;AACJ;;AAEA;AACA;AACA;AACA;;AAEA,AAAO,SAASE,gBAAgBA,CAACF,QAAQ,EAAuB;EAAA,IAArBG,WAAW,GAAA1B,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;;;;;;;EAO5D,IACGuB,QAAQ,CAACI,aAAa,IAAIJ,QAAQ,CAACI,aAAa,KAAK,IAAI,IAC1DJ,QAAQ,CAACK,UAAU,KAAK,GAAG,EAC3B;IACA,IAAI,CAACL,QAAQ,CAACK,UAAU,EAAE;MACxB,MAAM,IAAIC,KAAK,oDAAApC,MAAA,CACsC8B,QAAQ,CAACO,KAAK,CACnE,CAAC;KACF,MAAM,IAAI,CAACJ,WAAW,EAAE;MACvB,MAAM,IAAIG,KAAK,gDAAApC,MAAA,CAEX8B,QAAQ,CAACK,UAAU,iEAEvB,CAAC;;;EAIL,IAAAG,iBAAA,GAGIR,QAAQ,CAACS,OAAO;IAFFC,WAAW,GAAAF,iBAAA,CAA3B,cAAc;IACIG,aAAa,GAAAH,iBAAA,CAA/B,gBAAgB;;;EAIlB,IAAIjB,oBAAoB,CAAChE,IAAI,CAACmF,WAAW,CAAC,EAAE;IAC1C,MAAM,IAAIJ,KAAK,uCAAApC,MAAA,CACyBwC,WAAW,yBACnD,CAAC;;;;EAIH,IAAIC,aAAa,GAAGnB,kBAAkB,EAAE;IACtC,MAAM,IAAIc,KAAK,uEAAApC,MAAA,CACyDsB,kBAAkB,MAC1F,CAAC;;EAGH,OAAO,IAAI;AACb;;AAWA;AACA;AACA;AACA;AACA;;AAEA,SAA8BoB,aAAaA,CAAAC,EAAA,EAAAC,GAAA;EAAA,QAAAC,cAAA,GAAAA,cAAA,IAAAC,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAA5B,SAAAC,QAA6BjG,GAAG,EAAE8B,SAAS;IAAA,IAAAyD,OAAA;MAAAf,OAAA;MAAA0B,UAAA;MAAApB,QAAA;MAAAC,IAAA;MAAAoB,KAAA,GAAA5C,SAAA;IAAA,OAAAwC,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAEjB,OAAO,GAAAY,KAAA,CAAAzE,MAAA,QAAAyE,KAAA,QAAA3C,SAAA,GAAA2C,KAAA,MAAG,EAAE;UACtErE,SAAS,GAAGA,SAAS,IAAIC,GAAG,CAACC,KAAK,CAACyE,SAAS,CAACzG,GAAG,CAAC,CAAC;UAC5CwE,OAAO,GAAAkC,aAAA;YACX1G,GAAG,EAAE8B,SAAS,CAAC6E,IAAI;YACnBpB,OAAO,EAAAmB,aAAA,CAAAA,aAAA,KAAO1C,eAAe,GAAKuB,OAAO,CAAE;YAC3CqB,OAAO,EAAEzC,aAAa;;YAEtB0C,GAAG,EAAE,IAAI;;;YAGTjD,QAAQ,EAAE,IAAI;;YAEdkD,IAAI,EAAE,IAAI;;YAEVC,kBAAkB,EAAE;aAChB,OAAOC,MAAM,KAAK,WAAW,GAC7B,EAAE,GACF;;YAEEC,cAAc,EAAE;WACjB;UAAAX,QAAA,CAAAE,IAAA;UAAA,OAG0BjC,GAAG,CAACC,OAAO,CAAC;QAAA;UAAA0B,UAAA,GAAAI,QAAA,CAAAY,IAAA;UAArCpC,QAAQ,GAAAoB,UAAA,CAARpB,QAAQ;UAAEC,IAAI,GAAAmB,UAAA,CAAJnB,IAAI;UAAAuB,QAAA,CAAAC,IAAA;UAGpBvB,gBAAgB,CAACF,QAAQ,CAAC;UAAC,OAAAwB,QAAA,CAAAa,MAAA,WACpB;YACLpC,IAAI,EAAJA,IAAI;YACJD,QAAQ,EAARA;WACD;QAAA;UAAAwB,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAc,EAAA,GAAAd,QAAA;UAAA,OAAAA,QAAA,CAAAa,MAAA,WAEM;YACL9B,KAAK,EAAE,IAAI;YACXgC,OAAO,EAAEf,QAAA,CAAAc,EAAA,CAAEC;WACZ;QAAA;QAAA;UAAA,OAAAf,QAAA,CAAAgB,IAAA;;OAAArB,OAAA;GAEJ,IAAAsB,KAAA,OAAAhE,SAAA;AAAA;;AC7HD,SAASiE,eAAeA,CAACC,CAAC,EAAEC,IAAI,EAAEC,EAAE,EAAE;EACpCF,CAAC,SAAAzE,MAAA,CAAS0E,IAAI,MAAG,CAAC,CAACE,IAAI,CAAC,UAACC,CAAC,EAAEC,IAAI,EAAK;IACnC,IAAMC,KAAK,GAAGN,CAAC,CAACK,IAAI,CAAC;IAErB,IAAME,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACP,IAAI,CAAC;IAC9BK,KAAK,CAACE,IAAI,CAACN,EAAE,EAAEK,KAAK,CAAC;IACrBD,KAAK,CAACG,UAAU,CAACR,IAAI,CAAC;GACvB,CAAC;EAEF,OAAOD,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,AAAe,SAASU,iBAAiBA,CAACV,CAAC,EAAE;EAC3CA,CAAC,GAAGD,eAAe,CAACC,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC;EAC1CA,CAAC,GAAGD,eAAe,CAACC,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC;EAC1C,OAAOA,CAAC;AACV;;ACvBA;AACA,AAAO,IAAMW,SAAS,GAAG,IAAI5H,MAAM,CAAC,0BAA0B,EAAE,GAAG,CAAC;;AAEpE;AACA;AACA,AAAO,IAAM6H,UAAU,GAAG,qBAAqB;AAE/C,AAAO,IAAMC,cAAc,GAAG,CAC5B,wCAAwC,EACxC,iDAAiD,EACjD,uCAAuC,EACvC,qCAAqC,EACrC,oCAAoC,EACpC,4CAA4C,CAC7C;;AAED;AACA,AAAO,IAAMC,iBAAiB,GAAG,CAC/B,OAAO,EACP,QAAQ,EACR,UAAU,EACV,MAAM,EACN,OAAO,EACP,IAAI,EACJ,OAAO,EACP,QAAQ,EACR,QAAQ,CACT;AAQM,IAAMC,eAAe,GAAG,CAC7B,KAAK,EACL,QAAQ,EACR,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,KAAK,EACL,YAAY,EACZ,OAAO,EACP,QAAQ,CACT;AAED,AAAO,IAAMC,kBAAkB,GAAG,IAAIjI,MAAM,MAAAwC,MAAA,CACrCwF,eAAe,CAACvF,IAAI,CAAC,GAAG,CAAC,SAC9B,GACF,CAAC;;AAQD;AACA,AAAO,IAAMyF,wBAAwB,GAAG,CACtC,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,KAAK,EACL,QAAQ,EACR,MAAM,CACP,CAACzF,IAAI,CAAC,GAAG,CAAC;;AAEX;AACA,IAAM0F,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAClD,AAAO,IAAMC,eAAe,GAAGD,WAAW,CAAC1F,IAAI,CAAC,GAAG,CAAC;;AAEpD;;AAEA;AACA;AACA;AACA;AACA,AAAO,IAAM4F,6BAA6B,GAAG,CAC3C,UAAU,EACV,OAAO,EACP,QAAQ,EACR,SAAS,EACT,SAAS,EACT,KAAK,EACL,gBAAgB,EAChB,OAAO,EACP,SAAS,EACT,cAAc,EACd,QAAQ,EACR,iBAAiB,EACjB,OAAO,EACP,MAAM;AACN;AACA,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO;AAAE;AACT,MAAM,EACN,MAAM,EACN,KAAK,EACL,UAAU,EACV,OAAO,EACP,YAAY,EACZ,UAAU;AAAE;AACZ,2BAA2B;AAAE;AAC7B,OAAO,EACP,eAAe,EACf,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,OAAO,EACP,UAAU,EACV,SAAS,EACT,UAAU,EACV,SAAS,EACT,SAAS,EACT,OAAO,CACR;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAO,IAAMC,6BAA6B,GAAG,CAC3C,KAAK,EACL,SAAS,EACT,MAAM,EACN,WAAW,EACX,QAAQ,EACR,SAAS,EACT,qBAAqB,EACrB,QAAQ;AAAE;AACV,OAAO,EACP,QAAQ,EACR,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,EACP,QAAQ,CACT;;AAED;AACA;AACA;AACA,AAAO,IAAMC,mBAAmB,GAAG,CACjC,GAAG,EACH,YAAY,EACZ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,GAAG,EACH,KAAK,EACL,OAAO,CACR,CAAC9F,IAAI,CAAC,GAAG,CAAC;;AAuCX;AACA;AACA;AACA;AACA,AAAO,IAAM+F,oBAAoB,GAAG,CAClC,SAAS,EACT,gBAAgB,EAChB,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,SAAS,EACT,qBAAqB,EACrB,OAAO,EACP,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,MAAM,EACN,YAAY,EACZ,WAAW,EACX,MAAM,EACN,OAAO,EACP,MAAM,EACN,UAAU;AAAE;AACZ,SAAS,CACV;;AAED;AACA,AAAO,IAAMC,iBAAiB,GAAG,IAAIzI,MAAM,CACzCwI,oBAAoB,CAAC/F,IAAI,CAAC,GAAG,CAAC,EAC9B,GACF,CAAC;;AAKD;AACA;AACA;AACA;AACA,AAAO,IAAMiG,oBAAoB,GAAG,CAClC,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,MAAM,EACN,OAAO,EACP,SAAS,EACT,YAAY,EACZ,SAAS,EACT,MAAM,EACN,QAAQ,EACR,OAAO,EACP,MAAM,EACN,MAAM,EACN,SAAS,EACT,UAAU;AAAE;AACZ,MAAM,EACN,QAAQ,EACR,UAAU,EACV,MAAM,EACN,MAAM,EACN,MAAM,EACN,UAAU;AAAE;AACZ,mBAAmB,EACnB,MAAM,EACN,WAAW,EACX,MAAM,EACN,UAAU,EACV,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU;AAAE;AACZ,OAAO,EACP,KAAK;AAAE;AACP,SAAS,EACT,SAAS,EACT,cAAc;AAAE;AAChB,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,UAAU,EACV,MAAM,EACN,SAAS,EACT,SAAS,EACT,OAAO,EACP,KAAK,EACL,SAAS,EACT,MAAM,EACN,OAAO,EACP,QAAQ,CACT;AACD;AACA,AAAO,IAAMC,iBAAiB,GAAG,IAAI3I,MAAM,CACzC0I,oBAAoB,CAACjG,IAAI,CAAC,GAAG,CAAC,EAC9B,GACF,CAAC;;AAED;AACA,AAAO,IAAMmG,cAAc,GAAG,wCAAwC;;AA4BtE;AACA,AAAO,IAAMC,OAAO,GAAG,IAAI7I,MAAM,CAAC,iBAAiB,EAAE,GAAG,CAAC;;AAsBzD;AACA;AACA,AAAO,IAAM8I,gBAAgB,GAAG,CAC9B,SAAS,EACT,OAAO,EACP,YAAY,EACZ,MAAM,EACN,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,KAAK,EACL,UAAU,EACV,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,UAAU,EACV,YAAY,EACZ,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,QAAQ,EACR,IAAI,EACJ,QAAQ,EACR,GAAG,EACH,KAAK,EACL,UAAU,EACV,SAAS,EACT,OAAO,EACP,OAAO,EACP,UAAU,EACV,OAAO,EACP,IAAI,EACJ,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,OAAO,CACR;AACD,AAAO,IAAMC,mBAAmB,GAAG,IAAI/I,MAAM,MAAAwC,MAAA,CACtCsG,gBAAgB,CAACrG,IAAI,CAAC,GAAG,CAAC,SAC/B,GACF,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAMuG,mBAAmB,GAAGX,6BAA6B,CAAC5F,IAAI,CAAC,GAAG,CAAC;AACnE,AAAO,IAAMwG,oBAAoB,GAAG,IAAIjJ,MAAM,CAACgJ,mBAAmB,EAAE,GAAG,CAAC;AAExE,IAAME,mBAAmB,GAAGZ,6BAA6B,CAAC7F,IAAI,CAAC,GAAG,CAAC;AACnE,AAAO,IAAM0G,oBAAoB,GAAG,IAAInJ,MAAM,CAACkJ,mBAAmB,EAAE,GAAG,CAAC;;ACnazD,SAASE,uBAAuBA,CAACnC,CAAC,EAAE;;;;;;;;;;EAUjDA,CAAC,CAAC,GAAG,CAAC,CACHoC,GAAG,CAAC,GAAG,CAAC,CACRjC,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;IACrB,IAAMC,KAAK,GAAGN,CAAC,CAACK,IAAI,CAAC;IACrB,IAAMgC,OAAO,GAAG/B,KAAK,CAACE,IAAI,CAAC,OAAO,CAAC;IACnC,IAAM8B,EAAE,GAAGhC,KAAK,CAACE,IAAI,CAAC,IAAI,CAAC;IAC3B,IAAI,CAAC8B,EAAE,IAAI,CAACD,OAAO,EAAE;IAErB,IAAME,UAAU,MAAAhH,MAAA,CAAM8G,OAAO,IAAI,EAAE,OAAA9G,MAAA,CAAI+G,EAAE,IAAI,EAAE,CAAE;IACjD,IAAIJ,oBAAoB,CAACtJ,IAAI,CAAC2J,UAAU,CAAC,EAAE;MACzC;;IAEF,IAAIP,oBAAoB,CAACpJ,IAAI,CAAC2J,UAAU,CAAC,EAAE;MACzCjC,KAAK,CAACkC,MAAM,EAAE;;GAEjB,CAAC;EAEJ,OAAOxC,CAAC;AACV;;AC5BA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,AAAe,SAASyC,OAAOA,CAACzC,CAAC,EAAE;EACjC,IAAI0C,UAAU,GAAG,KAAK;EACtB1C,CAAC,CAAC,IAAI,CAAC,CAACG,IAAI,CAAC,UAACrG,KAAK,EAAE6I,OAAO,EAAK;IAC/B,IAAMC,QAAQ,GAAG5C,CAAC,CAAC2C,OAAO,CAAC;IAC3B,IAAME,WAAW,GAAGD,QAAQ,CAAC7D,IAAI,EAAE,CAACjC,GAAG,CAAC,CAAC,CAAC;IAE1C,IAAI+F,WAAW,IAAIA,WAAW,CAACC,OAAO,CAAC5I,WAAW,EAAE,KAAK,IAAI,EAAE;MAC7DwI,UAAU,GAAG,IAAI;MACjBE,QAAQ,CAACJ,MAAM,EAAE;KAClB,MAAM,IAAIE,UAAU,EAAE;MACrBA,UAAU,GAAG,KAAK;MAClBK,YAAY,CAACJ,OAAO,EAAE3C,CAAC,EAAE,IAAI,CAAC;;GAEjC,CAAC;EAEF,OAAOA,CAAC;AACV;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,AAAe,SAAS+C,YAAYA,CAAC1C,IAAI,EAAEL,CAAC,EAAc;EAAA,IAAZgD,EAAE,GAAAlH,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;EACtD,IAAMwE,KAAK,GAAGN,CAAC,CAACK,IAAI,CAAC;EAErB,IAAI2C,EAAE,EAAE;IACN,IAAIC,OAAO,GAAG5C,IAAI,CAAC6C,WAAW;IAC9B,IAAMC,CAAC,GAAGnD,CAAC,CAAC,SAAS,CAAC;;;;IAItB,OACEiD,OAAO,IACP,EAAEA,OAAO,CAACH,OAAO,IAAIhB,mBAAmB,CAAClJ,IAAI,CAACqK,OAAO,CAACH,OAAO,CAAC,CAAC,EAC/D;MACA,IAAAM,QAAA,GAAwBH,OAAO;QAAvBC,WAAW,GAAAE,QAAA,CAAXF,WAAW;MACnBlD,CAAC,CAACiD,OAAO,CAAC,CAACI,QAAQ,CAACF,CAAC,CAAC;MACtBF,OAAO,GAAGC,WAAW;;IAGvB5C,KAAK,CAACgD,WAAW,CAACH,CAAC,CAAC;IACpB7C,KAAK,CAACkC,MAAM,EAAE;IACd,OAAOxC,CAAC;;EAGV,OAAOA,CAAC;AACV;;ACjCA,SAASuD,WAAWA,CAACvD,CAAC,EAAE;EACtBA,CAAC,CAAC,KAAK,CAAC,CAACG,IAAI,CAAC,UAACrG,KAAK,EAAE0J,GAAG,EAAK;IAC5B,IAAMC,IAAI,GAAGzD,CAAC,CAACwD,GAAG,CAAC;IACnB,IAAME,WAAW,GAAGD,IAAI,CAACE,QAAQ,CAACrC,mBAAmB,CAAC,CAACrH,MAAM,KAAK,CAAC;IAEnE,IAAIyJ,WAAW,EAAE;MACfE,aAAa,CAACH,IAAI,EAAEzD,CAAC,EAAE,GAAG,CAAC;;GAE9B,CAAC;EAEF,OAAOA,CAAC;AACV;AAEA,SAAS6D,YAAYA,CAAC7D,CAAC,EAAE;EACvBA,CAAC,CAAC,MAAM,CAAC,CAACG,IAAI,CAAC,UAACrG,KAAK,EAAEgK,IAAI,EAAK;IAC9B,IAAMC,KAAK,GAAG/D,CAAC,CAAC8D,IAAI,CAAC;IACrB,IAAMJ,WAAW,GAAGK,KAAK,CAACC,OAAO,CAAC,wBAAwB,CAAC,CAAC/J,MAAM,KAAK,CAAC;IACxE,IAAIyJ,WAAW,EAAE;MACfE,aAAa,CAACG,KAAK,EAAE/D,CAAC,EAAE,GAAG,CAAC;;GAE/B,CAAC;EAEF,OAAOA,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,AAAe,SAASiE,mBAAmBA,CAACjE,CAAC,EAAE;EAC7CA,CAAC,GAAGyC,OAAO,CAACzC,CAAC,CAAC;EACdA,CAAC,GAAGuD,WAAW,CAACvD,CAAC,CAAC;EAClBA,CAAC,GAAG6D,YAAY,CAAC7D,CAAC,CAAC;EAEnB,OAAOA,CAAC;AACV;;AC7Ce,SAAS4D,aAAaA,CAACtD,KAAK,EAAEN,CAAC,EAAa;EAAA,IAAXkE,GAAG,GAAApI,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;EACvD,IAAMuE,IAAI,GAAGC,KAAK,CAACxD,GAAG,CAAC,CAAC,CAAC;EACzB,IAAI,CAACuD,IAAI,EAAE;IACT,OAAOL,CAAC;;EAEV,IAAMmE,KAAK,GAAGC,QAAQ,CAAC/D,IAAI,CAAC,IAAI,EAAE;EAElC,IAAMgE,YAAY,GAAGC,gBAAA,CAAgBH,KAAK,CAAC,CACxCI,GAAG,CAAC,UAAAC,GAAG;IAAA,UAAAjJ,MAAA,CAAOiJ,GAAG,OAAAjJ,MAAA,CAAI4I,KAAK,CAACK,GAAG,CAAC;GAAE,CAAC,CAClChJ,IAAI,CAAC,GAAG,CAAC;EACZ,IAAIiJ,IAAI;EAER,IAAIzE,CAAC,CAACvD,OAAO,EAAE;;;;IAIbgI,IAAI,GACFpE,IAAI,CAACyC,OAAO,CAAC5I,WAAW,EAAE,KAAK,UAAU,GAAGoG,KAAK,CAACnI,IAAI,EAAE,GAAGmI,KAAK,CAACmE,IAAI,EAAE;GAC1E,MAAM;IACLA,IAAI,GAAGnE,KAAK,CAACoE,QAAQ,EAAE;;EAEzBpE,KAAK,CAACgD,WAAW,KAAA/H,MAAA,CAAK2I,GAAG,OAAA3I,MAAA,CAAI8I,YAAY,OAAA9I,MAAA,CAAIkJ,IAAI,QAAAlJ,MAAA,CAAK2I,GAAG,MAAG,CAAC;EAC7D,OAAOlE,CAAC;AACV;;ACvBA,SAAS2E,cAAcA,CAACC,IAAI,EAAE5E,CAAC,EAAE;EAC/B,IAAM6E,MAAM,GAAGpL,SAAA,CAASmL,IAAI,CAACpE,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;EAChD,IAAMsE,KAAK,GAAGrL,SAAA,CAASmL,IAAI,CAACpE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE;;;;;EAKpD,IAAI,CAACqE,MAAM,IAAI,EAAE,IAAI,EAAE,IAAIC,KAAK,GAAG,EAAE,EAAE;IACrCF,IAAI,CAACpC,MAAM,EAAE;GACd,MAAM,IAAIqC,MAAM,EAAE;;;;IAIjBD,IAAI,CAACnE,UAAU,CAAC,QAAQ,CAAC;;EAG3B,OAAOT,CAAC;AACV;;AAEA;AACA;AACA,SAAS+E,aAAaA,CAACH,IAAI,EAAE5E,CAAC,EAAE;EAC9B,IAAIW,SAAS,CAAC/H,IAAI,CAACgM,IAAI,CAACpE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IACpCoE,IAAI,CAACpC,MAAM,EAAE;;EAGf,OAAOxC,CAAC;AACV;AAEA,AAAe,SAASgF,WAAWA,CAACC,QAAQ,EAAEjF,CAAC,EAAE;EAC/CiF,QAAQ,CAACvM,IAAI,CAAC,KAAK,CAAC,CAACyH,IAAI,CAAC,UAACrG,KAAK,EAAEoL,GAAG,EAAK;IACxC,IAAMN,IAAI,GAAG5E,CAAC,CAACkF,GAAG,CAAC;IAEnBP,cAAc,CAACC,IAAI,EAAE5E,CAAC,CAAC;IACvB+E,aAAa,CAACH,IAAI,EAAE5E,CAAC,CAAC;GACvB,CAAC;EAEF,OAAOA,CAAC;AACV;;ACpCe,SAASmF,UAAUA,CAACC,OAAO,EAAEpF,CAAC,EAAEzH,GAAG,EAAa;EAAA,IAAX8M,IAAI,GAAAvJ,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAC3D,IAAIuJ,IAAI,CAACpL,MAAM,KAAK,CAAC,EAAE;IACrBoL,IAAI,GAAGxE,cAAc;;EAGvB,IAAItI,GAAG,EAAE;IACP,IAAA+M,UAAA,GAA+BhL,GAAG,CAACC,KAAK,CAAChC,GAAG,CAAC;MAArCiC,QAAQ,GAAA8K,UAAA,CAAR9K,QAAQ;MAAE+K,QAAQ,GAAAD,UAAA,CAARC,QAAQ;IAC1BF,IAAI,MAAA9J,MAAA,CAAAiK,kBAAA,CAAOH,IAAI,qBAAA9J,MAAA,CAAkBf,QAAQ,QAAAe,MAAA,CAAKgK,QAAQ,UAAK;;EAG7DvF,CAAC,CAACqF,IAAI,CAAC7J,IAAI,CAAC,GAAG,CAAC,EAAE4J,OAAO,CAAC,CAACK,QAAQ,CAAC7E,UAAU,CAAC;EAE/C,OAAOZ,CAAC;AACV;;ACfe,SAAS0F,aAAaA,CAACN,OAAO,EAAEpF,CAAC,EAAa;EAAA,IAAXqF,IAAI,GAAAvJ,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACzD,IAAIuJ,IAAI,CAACpL,MAAM,KAAK,CAAC,EAAE;IACrBoL,IAAI,GAAGvE,iBAAiB;;;;;EAK1Bd,CAAC,CAACqF,IAAI,CAAC7J,IAAI,CAAC,GAAG,CAAC,EAAE4J,OAAO,CAAC,CACvBhD,GAAG,KAAA7G,MAAA,CAAKqF,UAAU,CAAE,CAAC,CACrB4B,MAAM,EAAE;EAEX,OAAOxC,CAAC;AACV;;ACZA;AACA;AACA;AACA,AAAe,SAAS2F,UAAUA,CAACP,OAAO,EAAEpF,CAAC,EAAE;EAC7C,IAAM4F,MAAM,GAAG5F,CAAC,CAAC,IAAI,EAAEoF,OAAO,CAAC;EAE/B,IAAIQ,MAAM,CAAC3L,MAAM,GAAG,CAAC,EAAE;IACrB2L,MAAM,CAACzF,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI;MAAA,OAAKL,CAAC,CAACK,IAAI,CAAC,CAACmC,MAAM,EAAE;MAAC;GAC/C,MAAM;IACLoD,MAAM,CAACzF,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;MAC3BuD,aAAa,CAAC5D,CAAC,CAACK,IAAI,CAAC,EAAEL,CAAC,EAAE,IAAI,CAAC;KAChC,CAAC;;EAGJ,OAAOA,CAAC;AACV;;;;ACbA,SAAS6F,qBAAqBA,CAACZ,QAAQ,EAAEjF,CAAC,EAAE;EAC1CiF,QAAQ,CAACvM,IAAI,CAAC,GAAG,CAAC,CAACyH,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;IACvC,IAAM8D,KAAK,GAAGC,QAAQ,CAAC/D,IAAI,CAAC;IAE5ByF,QAAQ,CACNzF,IAAI,EACJiE,gBAAA,CAAgBH,KAAK,CAAC,CAACtJ,MAAM,CAAC,UAACC,GAAG,EAAE0F,IAAI,EAAK;MAC3C,IAAIQ,kBAAkB,CAACpI,IAAI,CAAC4H,IAAI,CAAC,EAAE;QACjC,OAAAvB,eAAA,CAAAA,eAAA,KAAYnE,GAAG,OAAAiL,eAAA,KAAGvF,IAAI,EAAG2D,KAAK,CAAC3D,IAAI,CAAC;;MAGtC,OAAO1F,GAAG;KACX,EAAE,EAAE,CACP,CAAC;GACF,CAAC;;;EAGFkF,CAAC,KAAAzE,MAAA,CAAKqF,UAAU,GAAIqE,QAAQ,CAAC,CAACe,WAAW,CAACpF,UAAU,CAAC;EAErD,OAAOqE,QAAQ;AACjB;;AAEA;AACA,AAAe,SAASgB,eAAeA,CAAChB,QAAQ,EAAEjF,CAAC,EAAE;;;;EAInD,OAAO6F,qBAAqB,CAC1BZ,QAAQ,CAACiB,MAAM,EAAE,CAACjM,MAAM,GAAGgL,QAAQ,CAACiB,MAAM,EAAE,GAAGjB,QAAQ,EACvDjF,CACF,CAAC;AACH;;ACnCe,SAASmG,WAAWA,CAAClB,QAAQ,EAAEjF,CAAC,EAAE;EAC/CiF,QAAQ,CAACvM,IAAI,CAAC,GAAG,CAAC,CAACyH,IAAI,CAAC,UAACrG,KAAK,EAAEqJ,CAAC,EAAK;IACpC,IAAMiD,EAAE,GAAGpG,CAAC,CAACmD,CAAC,CAAC;IACf,IAAIiD,EAAE,CAAC1N,IAAI,CAAC,aAAa,CAAC,CAACuB,MAAM,KAAK,CAAC,IAAImM,EAAE,CAACjO,IAAI,EAAE,CAACE,IAAI,EAAE,KAAK,EAAE,EAChE+N,EAAE,CAAC5D,MAAM,EAAE;GACd,CAAC;EAEF,OAAOxC,CAAC;AACV;;ACRA;;AA0FA;AACA;AACA,AAAO,IAAMqG,sBAAsB,GAAG,CACpC,IAAI,EACJ,GAAG,EACH,GAAG,EACH,OAAO,EACP,IAAI,EACJ,MAAM,EACN,MAAM,EACN,UAAU,EACV,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,CACP;AAED,AAAO,IAAMC,yBAAyB,GAAG,IAAIvN,MAAM,MAAAwC,MAAA,CAC5C8K,sBAAsB,CAAC7K,IAAI,CAAC,GAAG,CAAC,SACrC,GACF,CAAC;;AAED;AACA;AACA;AACA,AAAO,IAAM+K,uBAAuB,GAAG,CACrC,CAAC,SAAS,EAAE,gBAAgB,CAAC,EAC7B,CAAC,OAAO,EAAE,gBAAgB,CAAC,EAC3B,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EAC5B,CAAC,OAAO,EAAE,WAAW,CAAC,EACtB,CAAC,OAAO,EAAE,YAAY,CAAC,EACvB,CAAC,OAAO,EAAE,YAAY,CAAC,CACxB;AAED,AAAO,IAAMC,WAAW,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC;AAClE,AAAO,IAAMC,cAAc,GAAG,IAAI1N,MAAM,CAACyN,WAAW,CAAChL,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;;AAEpE;AACA;AACA;AACA;AACA,AAAO,IAAM+F,sBAAoB,GAAG,CAClC,SAAS,EACT,gBAAgB,EAChB,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,SAAS,EACT,qBAAqB,EACrB,OAAO,EACP,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,MAAM,EACN,YAAY,EACZ,WAAW,EACX,MAAM,EACN,OAAO,EACP,MAAM,EACN,UAAU;AAAE;AACZ,SAAS,CACV;;AAED;AACA,AAAO,IAAMC,mBAAiB,GAAG,IAAIzI,MAAM,CACzCwI,sBAAoB,CAAC/F,IAAI,CAAC,GAAG,CAAC,EAC9B,GACF,CAAC;;AAED;AACA,AAAO,IAAMkL,iBAAiB,GAAG,IAAI3N,MAAM,CAAC,qBAAqB,EAAE,GAAG,CAAC;;AAEvE;AACA;AACA;AACA;AACA,AAAO,IAAM0I,sBAAoB,GAAG,CAClC,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,MAAM,EACN,OAAO,EACP,SAAS,EACT,YAAY,EACZ,SAAS,EACT,MAAM,EACN,QAAQ,EACR,OAAO,EACP,MAAM,EACN,MAAM,EACN,SAAS,EACT,UAAU;AAAE;AACZ,MAAM,EACN,QAAQ,EACR,UAAU,EACV,MAAM,EACN,MAAM,EACN,MAAM,EACN,UAAU;AAAE;AACZ,mBAAmB,EACnB,MAAM,EACN,WAAW,EACX,MAAM,EACN,UAAU,EACV,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU;AAAE;AACZ,OAAO,EACP,KAAK;AAAE;AACP,SAAS,EACT,SAAS,EACT,cAAc;AAAE;AAChB,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,UAAU,EACV,MAAM,EACN,SAAS,EACT,SAAS,EACT,OAAO,EACP,KAAK,EACL,SAAS,EACT,MAAM,EACN,OAAO,EACP,QAAQ,CACT;AACD;AACA,AAAO,IAAMC,mBAAiB,GAAG,IAAI3I,MAAM,CACzC0I,sBAAoB,CAACjG,IAAI,CAAC,GAAG,CAAC,EAC9B,GACF,CAAC;AAkFM,IAAMmL,oBAAoB,GAAG,IAAI5N,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC;AACxE,AAAO,IAAM6N,kBAAkB,GAAG,IAAI7N,MAAM,CAAC,4BAA4B,EAAE,GAAG,CAAC;AAC/E,AAAO,IAAM8N,QAAQ,GAAG,IAAI9N,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;;AChT3D;AACA,AAAe,SAAS+N,SAASA,CAACzG,IAAI,EAAE;EACtC,IAAMgC,OAAO,GAAGhC,IAAI,CAACG,IAAI,CAAC,OAAO,CAAC;EAClC,IAAM8B,EAAE,GAAGjC,IAAI,CAACG,IAAI,CAAC,IAAI,CAAC;EAC1B,IAAIuG,KAAK,GAAG,CAAC;EAEb,IAAIzE,EAAE,EAAE;;IAEN,IAAId,mBAAiB,CAAC5I,IAAI,CAAC0J,EAAE,CAAC,EAAE;MAC9ByE,KAAK,IAAI,EAAE;;IAEb,IAAIrF,mBAAiB,CAAC9I,IAAI,CAAC0J,EAAE,CAAC,EAAE;MAC9ByE,KAAK,IAAI,EAAE;;;EAIf,IAAI1E,OAAO,EAAE;IACX,IAAI0E,KAAK,KAAK,CAAC,EAAE;;;MAGf,IAAIvF,mBAAiB,CAAC5I,IAAI,CAACyJ,OAAO,CAAC,EAAE;QACnC0E,KAAK,IAAI,EAAE;;MAEb,IAAIrF,mBAAiB,CAAC9I,IAAI,CAACyJ,OAAO,CAAC,EAAE;QACnC0E,KAAK,IAAI,EAAE;;;;;;;IAOf,IAAIN,cAAc,CAAC7N,IAAI,CAACyJ,OAAO,CAAC,EAAE;MAChC0E,KAAK,IAAI,EAAE;;;;;;;IAOb,IAAIL,iBAAiB,CAAC9N,IAAI,CAACyJ,OAAO,CAAC,EAAE;MACnC0E,KAAK,IAAI,EAAE;;;EAIf,OAAOA,KAAK;AACd;;ACpDA;AACA;AACA;AACA,AAAe,SAASC,QAAQA,CAAC1G,KAAK,EAAE;EACtC,OAAO2G,WAAA,CAAW3G,KAAK,CAACE,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI;AAChD;;ACLA;AACA,AAAe,SAAS0G,WAAWA,CAAC/O,IAAI,EAAE;EACxC,OAAO,CAACA,IAAI,CAACoB,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAEU,MAAM;AACxC;;ACHA,IAAMkN,KAAK,GAAG,IAAIpO,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC;AAE1C,AAAe,SAASqO,WAAWA,CAACC,UAAU,EAAiB;EAAA,IAAfvE,OAAO,GAAAhH,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;EAC3D,IAAMwL,MAAM,GAAGD,UAAU,GAAG,EAAE;EAE9B,IAAIC,MAAM,GAAG,CAAC,EAAE;IACd,IAAIC,WAAW;;;;;;;IAOf,IAAIJ,KAAK,CAACvO,IAAI,CAACkK,OAAO,CAAC,EAAE;MACvByE,WAAW,GAAGD,MAAM,GAAG,CAAC;KACzB,MAAM;MACLC,WAAW,GAAGD,MAAM,GAAG,IAAI;;IAG7B,OAAOE,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;;EAG9C,OAAO,CAAC;AACV;;ACrBA;AACA;AACA,AAAe,SAASI,cAAcA,CAACtH,IAAI,EAAE;EAC3C,IAAI0G,KAAK,GAAG,CAAC;EACb,IAAM5O,IAAI,GAAGkI,IAAI,CAAClI,IAAI,EAAE,CAACE,IAAI,EAAE;EAC/B,IAAMgP,UAAU,GAAGlP,IAAI,CAAC8B,MAAM;;;EAG9B,IAAIoN,UAAU,GAAG,EAAE,EAAE;IACnB,OAAO,CAAC;;;;EAIVN,KAAK,IAAIG,WAAW,CAAC/O,IAAI,CAAC;;;;EAI1B4O,KAAK,IAAIK,WAAW,CAACC,UAAU,CAAC;;;;;;EAMhC,IAAIlP,IAAI,CAAC6D,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC1B+K,KAAK,IAAI,CAAC;;EAGZ,OAAOA,KAAK;AACd;;AC9Be,SAASa,QAAQA,CAACtH,KAAK,EAAEN,CAAC,EAAE+G,KAAK,EAAE;EAChDzG,KAAK,CAACE,IAAI,CAAC,OAAO,EAAEuG,KAAK,CAAC;EAC1B,OAAOzG,KAAK;AACd;;ACDe,SAASuH,QAAQA,CAACvH,KAAK,EAAEN,CAAC,EAAE8H,MAAM,EAAE;EACjD,IAAI;IACF,IAAMf,KAAK,GAAGgB,cAAc,CAACzH,KAAK,EAAEN,CAAC,CAAC,GAAG8H,MAAM;IAC/CF,QAAQ,CAACtH,KAAK,EAAEN,CAAC,EAAE+G,KAAK,CAAC;GAC1B,CAAC,OAAOiB,CAAC,EAAE;;;EAIZ,OAAO1H,KAAK;AACd;;ACTA;AACA,AAAe,SAAS2H,WAAWA,CAAC5H,IAAI,EAAEL,CAAC,EAAE+G,KAAK,EAAE;EAClD,IAAMb,MAAM,GAAG7F,IAAI,CAAC6F,MAAM,EAAE;EAC5B,IAAIA,MAAM,EAAE;IACV2B,QAAQ,CAAC3B,MAAM,EAAElG,CAAC,EAAE+G,KAAK,GAAG,IAAI,CAAC;;EAGnC,OAAO1G,IAAI;AACb;;ACRA;AACA;AACA;AACA,AAAe,SAAS0H,cAAcA,CAACzH,KAAK,EAAEN,CAAC,EAAsB;EAAA,IAApBkI,WAAW,GAAApM,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;EACjE,IAAIiL,KAAK,GAAGC,QAAQ,CAAC1G,KAAK,CAAC;EAE3B,IAAIyG,KAAK,EAAE;IACT,OAAOA,KAAK;;EAGdA,KAAK,GAAGoB,SAAS,CAAC7H,KAAK,CAAC;EAExB,IAAI4H,WAAW,EAAE;IACfnB,KAAK,IAAID,SAAS,CAACxG,KAAK,CAAC;;EAG3B2H,WAAW,CAAC3H,KAAK,EAAEN,CAAC,EAAE+G,KAAK,CAAC;EAE5B,OAAOA,KAAK;AACd;;ACdA;AACA;AACA,AAAe,SAASoB,SAASA,CAAC7H,KAAK,EAAE;EACvC,IAAA8H,UAAA,GAAoB9H,KAAK,CAACxD,GAAG,CAAC,CAAC,CAAC;IAAxBgG,OAAO,GAAAsF,UAAA,CAAPtF,OAAO;;;;;EAKf,IAAI6D,oBAAoB,CAAC/N,IAAI,CAACkK,OAAO,CAAC,EAAE;IACtC,OAAO6E,cAAc,CAACrH,KAAK,CAAC;;EAE9B,IAAIwC,OAAO,CAAC5I,WAAW,EAAE,KAAK,KAAK,EAAE;IACnC,OAAO,CAAC;;EAEV,IAAI0M,kBAAkB,CAAChO,IAAI,CAACkK,OAAO,CAAC,EAAE;IACpC,OAAO,CAAC;;EAEV,IAAI+D,QAAQ,CAACjO,IAAI,CAACkK,OAAO,CAAC,EAAE;IAC1B,OAAO,CAAC,CAAC;;EAEX,IAAIA,OAAO,CAAC5I,WAAW,EAAE,KAAK,IAAI,EAAE;IAClC,OAAO,CAAC,CAAC;;EAGX,OAAO,CAAC;AACV;;AC3BA,SAAS2J,cAAYA,CAACvD,KAAK,EAAEN,CAAC,EAAE;EAC9B,IAAIM,KAAK,CAACxD,GAAG,CAAC,CAAC,CAAC,EAAE;IAChB,IAAAsL,UAAA,GAAoB9H,KAAK,CAACxD,GAAG,CAAC,CAAC,CAAC;MAAxBgG,OAAO,GAAAsF,UAAA,CAAPtF,OAAO;IAEf,IAAIA,OAAO,KAAK,MAAM,EAAE;;MAEtBc,aAAa,CAACtD,KAAK,EAAEN,CAAC,EAAE,KAAK,CAAC;;;AAGpC;AAEA,SAASqI,UAAUA,CAAC/H,KAAK,EAAEN,CAAC,EAAE+G,KAAK,EAAE;EACnC,IAAIzG,KAAK,EAAE;IACTuD,cAAY,CAACvD,KAAK,EAAEN,CAAC,CAAC;IACtB6H,QAAQ,CAACvH,KAAK,EAAEN,CAAC,EAAE+G,KAAK,CAAC;;AAE7B;AAEA,SAASuB,OAAOA,CAACtI,CAAC,EAAEkI,WAAW,EAAE;EAC/BlI,CAAC,CAAC,QAAQ,CAAC,CACRoC,GAAG,CAAC,SAAS,CAAC,CACdjC,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;;;IAGrB,IAAIC,KAAK,GAAGN,CAAC,CAACK,IAAI,CAAC;IACnBC,KAAK,GAAGsH,QAAQ,CAACtH,KAAK,EAAEN,CAAC,EAAE+H,cAAc,CAACzH,KAAK,EAAEN,CAAC,EAAEkI,WAAW,CAAC,CAAC;IAEjE,IAAMK,OAAO,GAAGjI,KAAK,CAAC4F,MAAM,EAAE;IAC9B,IAAMsC,QAAQ,GAAGL,SAAS,CAAC7H,KAAK,CAAC;IAEjC+H,UAAU,CAACE,OAAO,EAAEvI,CAAC,EAAEwI,QAAQ,AAAa,CAAC;IAC7C,IAAID,OAAO,EAAE;;;MAGXF,UAAU,CAACE,OAAO,CAACrC,MAAM,EAAE,EAAElG,CAAC,EAAEwI,QAAQ,GAAG,CAAC,AAAa,CAAC;;GAE7D,CAAC;EAEJ,OAAOxI,CAAC;AACV;;AAEA;AACA;AACA,AAAe,SAASyI,YAAYA,CAACzI,CAAC,EAAsB;EAAA,IAApBkI,WAAW,GAAApM,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;;;EAGxDyK,uBAAuB,CAACmC,OAAO,CAAC,UAAAC,IAAA,EAAqC;IAAA,IAAAC,KAAA,GAAAzN,cAAA,CAAAwN,IAAA;MAAnCE,cAAc,GAAAD,KAAA;MAAEE,aAAa,GAAAF,KAAA;IAC7D5I,CAAC,IAAAzE,MAAA,CAAIsN,cAAc,OAAAtN,MAAA,CAAIuN,aAAa,CAAE,CAAC,CAAC3I,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;MAC5DwH,QAAQ,CAAC7H,CAAC,CAACK,IAAI,CAAC,CAAC6F,MAAM,CAAC2C,cAAc,CAAC,EAAE7I,CAAC,EAAE,EAAE,CAAC;KAChD,CAAC;GACH,CAAC;;;;;;;EAOFsI,OAAO,CAACtI,CAAC,EAAEkI,WAAW,CAAC;EACvBI,OAAO,CAACtI,CAAC,EAAEkI,WAAW,CAAC;EAEvB,OAAOlI,CAAC;AACV;;AC5DA;AACA;AACA;AACA;AACA;AACA,AAAe,SAAS+I,aAAaA,CAACC,UAAU,EAAEC,QAAQ,EAAEjJ,CAAC,EAAE;EAC7D,IAAI,CAACgJ,UAAU,CAAC9C,MAAM,EAAE,CAACjM,MAAM,EAAE;IAC/B,OAAO+O,UAAU;;EAGnB,IAAME,qBAAqB,GAAG1B,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEuB,QAAQ,GAAG,IAAI,CAAC;EAC3D,IAAME,WAAW,GAAGnJ,CAAC,CAAC,aAAa,CAAC;EAEpCgJ,UAAU,CACP9C,MAAM,EAAE,CACRvC,QAAQ,EAAE,CACVxD,IAAI,CAAC,UAACrG,KAAK,EAAEmJ,OAAO,EAAK;IACxB,IAAMmG,QAAQ,GAAGpJ,CAAC,CAACiD,OAAO,CAAC;;IAE3B,IAAIqD,yBAAyB,CAAC1N,IAAI,CAACqK,OAAO,CAACH,OAAO,CAAC,EAAE;MACnD,OAAO,IAAI;;IAGb,IAAMuG,YAAY,GAAGrC,QAAQ,CAACoC,QAAQ,CAAC;IACvC,IAAIC,YAAY,EAAE;MAChB,IAAID,QAAQ,CAACtM,GAAG,CAAC,CAAC,CAAC,KAAKkM,UAAU,CAAClM,GAAG,CAAC,CAAC,CAAC,EAAE;QACzCqM,WAAW,CAACG,MAAM,CAACF,QAAQ,CAAC;OAC7B,MAAM;QACL,IAAIG,YAAY,GAAG,CAAC;QACpB,IAAMC,OAAO,GAAGC,WAAW,CAACL,QAAQ,CAAC;;;;QAIrC,IAAII,OAAO,GAAG,IAAI,EAAE;UAClBD,YAAY,IAAI,EAAE;;;;;QAKpB,IAAIC,OAAO,IAAI,GAAG,EAAE;UAClBD,YAAY,IAAI,EAAE;;;;;QAKpB,IAAIH,QAAQ,CAAC5I,IAAI,CAAC,OAAO,CAAC,KAAKwI,UAAU,CAACxI,IAAI,CAAC,OAAO,CAAC,EAAE;UACvD+I,YAAY,IAAIN,QAAQ,GAAG,GAAG;;QAGhC,IAAMS,QAAQ,GAAGL,YAAY,GAAGE,YAAY;QAE5C,IAAIG,QAAQ,IAAIR,qBAAqB,EAAE;UACrC,OAAOC,WAAW,CAACG,MAAM,CAACF,QAAQ,CAAC;;QAErC,IAAInG,OAAO,CAACH,OAAO,KAAK,GAAG,EAAE;UAC3B,IAAM6G,cAAc,GAAGP,QAAQ,CAACjR,IAAI,EAAE;UACtC,IAAMyR,oBAAoB,GAAGvC,UAAU,CAACsC,cAAc,CAAC;UAEvD,IAAIC,oBAAoB,GAAG,EAAE,IAAIJ,OAAO,GAAG,IAAI,EAAE;YAC/C,OAAOL,WAAW,CAACG,MAAM,CAACF,QAAQ,CAAC;;UAErC,IACEQ,oBAAoB,IAAI,EAAE,IAC1BJ,OAAO,KAAK,CAAC,IACb9N,cAAc,CAACiO,cAAc,CAAC,EAC9B;YACA,OAAOR,WAAW,CAACG,MAAM,CAACF,QAAQ,CAAC;;;;;IAM3C,OAAO,IAAI;GACZ,CAAC;EAEJ,IACED,WAAW,CAACxF,QAAQ,EAAE,CAAC1J,MAAM,KAAK,CAAC,IACnCkP,WAAW,CACRxF,QAAQ,EAAE,CACVkG,KAAK,EAAE,CACP/M,GAAG,CAAC,CAAC,CAAC,KAAKkM,UAAU,CAAClM,GAAG,CAAC,CAAC,CAAC,EAC/B;IACA,OAAOkM,UAAU;;EAGnB,OAAOG,WAAW;AACpB;;ACxFA;AACA;AACA,AAAe,SAASW,gBAAgBA,CAAC9J,CAAC,EAAE;EAC1C,IAAIgJ,UAAU;EACd,IAAIC,QAAQ,GAAG,CAAC;EAEhBjJ,CAAC,CAAC,SAAS,CAAC,CAACG,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;;IAEjC,IAAIiG,yBAAyB,CAAC1N,IAAI,CAACyH,IAAI,CAACyC,OAAO,CAAC,EAAE;MAChD;;IAGF,IAAMxC,KAAK,GAAGN,CAAC,CAACK,IAAI,CAAC;IACrB,IAAM0G,KAAK,GAAGC,QAAQ,CAAC1G,KAAK,CAAC;IAE7B,IAAIyG,KAAK,GAAGkC,QAAQ,EAAE;MACpBA,QAAQ,GAAGlC,KAAK;MAChBiC,UAAU,GAAG1I,KAAK;;GAErB,CAAC;;;;EAIF,IAAI,CAAC0I,UAAU,EAAE;IACf,OAAOhJ,CAAC,CAAC,MAAM,CAAC,IAAIA,CAAC,CAAC,GAAG,CAAC,CAAC6J,KAAK,EAAE;;EAGpCb,UAAU,GAAGD,aAAa,CAACC,UAAU,EAAEC,QAAQ,EAAEjJ,CAAC,CAAC;EAEnD,OAAOgJ,UAAU;AACnB;;ACvBA,SAASe,mBAAmBA,CAACzJ,KAAK,EAAEN,CAAC,EAAEgK,MAAM,EAAE;;;;;EAK7C,IAAI1J,KAAK,CAAC2J,QAAQ,CAAC,qBAAqB,CAAC,EAAE;IACzC;;EAGF,IAAMrO,OAAO,GAAG1D,eAAe,CAACoI,KAAK,CAACnI,IAAI,EAAE,CAAC;EAE7C,IAAI+O,WAAW,CAACtL,OAAO,CAAC,GAAG,EAAE,EAAE;IAC7B,IAAMsO,MAAM,GAAGlK,CAAC,CAAC,GAAG,EAAEM,KAAK,CAAC,CAACrG,MAAM;IACnC,IAAMkQ,UAAU,GAAGnK,CAAC,CAAC,OAAO,EAAEM,KAAK,CAAC,CAACrG,MAAM;;;IAG3C,IAAIkQ,UAAU,GAAGD,MAAM,GAAG,CAAC,EAAE;MAC3B5J,KAAK,CAACkC,MAAM,EAAE;MACd;;IAGF,IAAMxE,aAAa,GAAGpC,OAAO,CAAC3B,MAAM;IACpC,IAAMmQ,QAAQ,GAAGpK,CAAC,CAAC,KAAK,EAAEM,KAAK,CAAC,CAACrG,MAAM;;;;IAIvC,IAAI+D,aAAa,GAAG,EAAE,IAAIoM,QAAQ,KAAK,CAAC,EAAE;MACxC9J,KAAK,CAACkC,MAAM,EAAE;MACd;;IAGF,IAAMgH,OAAO,GAAGC,WAAW,CAACnJ,KAAK,CAAC;;;;;IAKlC,IAAI0J,MAAM,GAAG,EAAE,IAAIR,OAAO,GAAG,GAAG,IAAIxL,aAAa,GAAG,EAAE,EAAE;MACtDsC,KAAK,CAACkC,MAAM,EAAE;MACd;;;;;IAKF,IAAIwH,MAAM,IAAI,EAAE,IAAIR,OAAO,GAAG,GAAG,EAAE;;;;MAIjC,IAAM1G,OAAO,GAAGxC,KAAK,CAACxD,GAAG,CAAC,CAAC,CAAC,CAACgG,OAAO,CAAC5I,WAAW,EAAE;MAClD,IAAMmQ,UAAU,GAAGvH,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,IAAI;MACvD,IAAIuH,UAAU,EAAE;QACd,IAAMC,YAAY,GAAGhK,KAAK,CAACxB,IAAI,EAAE;QACjC,IACEwL,YAAY,IACZpS,eAAe,CAACoS,YAAY,CAACnS,IAAI,EAAE,CAAC,CAAC6D,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EACtD;UACA;;;MAIJsE,KAAK,CAACkC,MAAM,EAAE;MACd;;IAGF,IAAM+H,WAAW,GAAGvK,CAAC,CAAC,QAAQ,EAAEM,KAAK,CAAC,CAACrG,MAAM;;;IAG7C,IAAIsQ,WAAW,GAAG,CAAC,IAAIvM,aAAa,GAAG,GAAG,EAAE;MAC1CsC,KAAK,CAACkC,MAAM,EAAE;;;AAGpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAe,SAASgI,SAASA,CAACvF,QAAQ,EAAEjF,CAAC,EAAE;EAC7CA,CAAC,CAACiB,wBAAwB,EAAEgE,QAAQ,CAAC,CAAC9E,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;IAC1D,IAAMC,KAAK,GAAGN,CAAC,CAACK,IAAI,CAAC;;IAErB,IAAIC,KAAK,CAAC2J,QAAQ,CAACrJ,UAAU,CAAC,IAAIN,KAAK,CAAC5H,IAAI,KAAA6C,MAAA,CAAKqF,UAAU,CAAE,CAAC,CAAC3G,MAAM,GAAG,CAAC,EACvE;IAEF,IAAI+P,MAAM,GAAGhD,QAAQ,CAAC1G,KAAK,CAAC;IAC5B,IAAI,CAAC0J,MAAM,EAAE;MACXA,MAAM,GAAGjC,cAAc,CAACzH,KAAK,EAAEN,CAAC,CAAC;MACjC4H,QAAQ,CAACtH,KAAK,EAAEN,CAAC,EAAEgK,MAAM,CAAC;;;;IAI5B,IAAIA,MAAM,GAAG,CAAC,EAAE;MACd1J,KAAK,CAACkC,MAAM,EAAE;KACf,MAAM;;MAELuH,mBAAmB,CAACzJ,KAAK,EAAEN,CAAC,EAAEgK,MAAM,CAAC;;GAExC,CAAC;EAEF,OAAOhK,CAAC;AACV;;AC5Ge,SAASyK,YAAYA,CAACxF,QAAQ,EAAEjF,CAAC,EAAc;EAAA,IAAZ0K,KAAK,GAAA5O,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAC1DkE,CAAC,CAACmB,eAAe,EAAE8D,QAAQ,CAAC,CAAC9E,IAAI,CAAC,UAACrG,KAAK,EAAE6Q,MAAM,EAAK;IACnD,IAAMC,OAAO,GAAG5K,CAAC,CAAC2K,MAAM,CAAC;;;;;IAKzB,IAAI3K,CAAC,CAAC4K,OAAO,EAAE3F,QAAQ,CAAC,CAAC4F,OAAO,CAAC,GAAG,CAAC,CAAC5Q,MAAM,KAAK,CAAC,EAAE;MAClD,OAAO2Q,OAAO,CAACpI,MAAM,EAAE;;;;IAIzB,IAAItK,eAAe,CAAC8H,CAAC,CAAC2K,MAAM,CAAC,CAACxS,IAAI,EAAE,CAAC,KAAKuS,KAAK,EAAE;MAC/C,OAAOE,OAAO,CAACpI,MAAM,EAAE;;;;;IAKzB,IAAIsE,SAAS,CAAC9G,CAAC,CAAC2K,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE;MAC5B,OAAOC,OAAO,CAACpI,MAAM,EAAE;;IAGzB,OAAOoI,OAAO;GACf,CAAC;EAEF,OAAO5K,CAAC;AACV;;AC7BA;AACA;AACA,AAAe,SAAS8K,eAAeA,CAAC1F,OAAO,EAAEpF,CAAC,EAAE;;;;EAIlDA,CAAC,GAAG4D,aAAa,CAAC5D,CAAC,CAAC,MAAM,CAAC,EAAEA,CAAC,EAAE,KAAK,CAAC;EACtCA,CAAC,GAAG4D,aAAa,CAAC5D,CAAC,CAAC,MAAM,CAAC,EAAEA,CAAC,EAAE,KAAK,CAAC;EAEtC,OAAOA,CAAC;AACV;;ACRA,SAAS+K,UAAUA,CAAC/K,CAAC,EAAEgL,OAAO,EAAExK,IAAI,EAAE;EACpC,IAAMyK,OAAO,GAAGjL,CAAC,CAAC,MAAM,CAAC,CAACQ,IAAI,CAAC,MAAM,CAAC;EAEtCR,CAAC,KAAAzE,MAAA,CAAKiF,IAAI,MAAG,CAAC,CAACL,IAAI,CAAC,UAACC,CAAC,EAAEC,IAAI,EAAK;IAC/B,IAAM8D,KAAK,GAAGC,QAAQ,CAAC/D,IAAI,CAAC;IAC5B,IAAM9H,GAAG,GAAG4L,KAAK,CAAC3D,IAAI,CAAC;IACvB,IAAI,CAACjI,GAAG,EAAE;IACV,IAAM2S,WAAW,GAAG5Q,GAAG,CAAC2C,OAAO,CAACgO,OAAO,IAAID,OAAO,EAAEzS,GAAG,CAAC;IAExD4S,OAAO,CAAC9K,IAAI,EAAEG,IAAI,EAAE0K,WAAW,CAAC;GACjC,CAAC;AACJ;AAEA,SAASE,aAAaA,CAACpL,CAAC,EAAEgL,OAAO,EAAEK,QAAQ,EAAE;EAC3CrL,CAAC,CAAC,UAAU,EAAEqL,QAAQ,CAAC,CAAClL,IAAI,CAAC,UAACC,CAAC,EAAEC,IAAI,EAAK;IACxC,IAAM8D,KAAK,GAAGC,QAAQ,CAAC/D,IAAI,CAAC;IAC5B,IAAMiL,MAAM,GAAGnH,KAAK,CAACoH,MAAM;IAE3B,IAAID,MAAM,EAAE;;;;MAIV,IAAME,UAAU,GAAGF,MAAM,CAAC/R,KAAK,CAC7B,6CACF,CAAC;MACD,IAAI,CAACiS,UAAU,EAAE;MACjB,IAAMC,kBAAkB,GAAGD,UAAU,CAACjH,GAAG,CAAC,UAAAmH,SAAS,EAAI;;;QAGrD,IAAMC,KAAK,GAAGD,SAAS,CACpBrT,IAAI,EAAE,CACND,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CACjBuB,KAAK,CAAC,KAAK,CAAC;QACfgS,KAAK,CAAC,CAAC,CAAC,GAAGrR,GAAG,CAAC2C,OAAO,CAAC+N,OAAO,EAAEW,KAAK,CAAC,CAAC,CAAC,CAAC;QACzC,OAAOA,KAAK,CAACnQ,IAAI,CAAC,GAAG,CAAC;OACvB,CAAC;MACF,IAAMoQ,cAAc,GAAGpG,kBAAA,CAAI,IAAAqG,IAAA,CAAQJ,kBAAkB,CAAC,EAAEjQ,IAAI,CAAC,IAAI,CAAC;MAClE2P,OAAO,CAAC9K,IAAI,EAAE,QAAQ,EAAEuL,cAAc,CAAC;;GAE1C,CAAC;AACJ;AAEA,AAAe,SAASE,iBAAiBA,CAACT,QAAQ,EAAErL,CAAC,EAAEzH,GAAG,EAAE;EAC1D,CAAC,MAAM,EAAE,KAAK,CAAC,CAACmQ,OAAO,CAAC,UAAAlI,IAAI;IAAA,OAAIuK,UAAU,CAAC/K,CAAC,EAAEzH,GAAG,EAAEiI,IAAI,CAAC;IAAC;EACzD4K,aAAa,CAACpL,CAAC,EAAEzH,GAAG,EAAE8S,QAAQ,CAAC;EAE/B,OAAOA,QAAQ;AACjB;;ACnDO,SAAShE,UAAUA,CAAClP,IAAI,EAAE;EAC/B,OAAOA,IAAI,CAACE,IAAI,EAAE,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC6B,MAAM;AAChD;;AAEA;AACA;AACA;AACA,AAAO,SAASwP,WAAWA,CAACnJ,KAAK,EAAE;EACjC,IAAMyL,eAAe,GAAG1E,UAAU,CAAC/G,KAAK,CAACnI,IAAI,EAAE,CAAC;EAEhD,IAAM6T,QAAQ,GAAG1L,KAAK,CAAC5H,IAAI,CAAC,GAAG,CAAC,CAACP,IAAI,EAAE;EACvC,IAAM8T,UAAU,GAAG5E,UAAU,CAAC2E,QAAQ,CAAC;EAEvC,IAAID,eAAe,GAAG,CAAC,EAAE;IACvB,OAAOE,UAAU,GAAGF,eAAe;;EAErC,IAAIA,eAAe,KAAK,CAAC,IAAIE,UAAU,GAAG,CAAC,EAAE;IAC3C,OAAO,CAAC;;EAGV,OAAO,CAAC;AACV;;;;;ACrBA;AAEA;AACA;AACA,AAAe,SAASC,eAAeA,CACrClM,CAAC,EACDmM,SAAS,EACTC,WAAW,EAEX;EAAA,IADA5B,SAAS,GAAA1O,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;EAEhB,IAAMuQ,UAAU,GAAGF,SAAS,CAACG,MAAM,CAAC,UAAAC,IAAI;IAAA,OAAIH,WAAW,CAACI,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;IAAC;;;EAE7E,IAAAE,SAAA,GAAAC,0BAAA,CACmBL,UAAU;IAAAM,KAAA;EAAA;IAAA,IAAAC,KAAA,YAAAA,QAAE;QAAA,IAApBL,IAAI,GAAAI,KAAA,CAAApM,KAAA;QACb,IAAMsM,IAAI,GAAG,MAAM;QACnB,IAAMtM,KAAK,GAAG,OAAO;QAErB,IAAMuM,KAAK,GAAG9M,CAAC,SAAAzE,MAAA,CAASsR,IAAI,SAAAtR,MAAA,CAAKgR,IAAI,QAAI,CAAC;;;;;QAK1C,IAAMQ,MAAM,GAAGD,KAAK,CACjBvI,GAAG,CAAC,UAACzK,KAAK,EAAEuG,IAAI;UAAA,OAAKL,CAAC,CAACK,IAAI,CAAC,CAACG,IAAI,CAACD,KAAK,CAAC;UAAC,CACzCyM,OAAO,EAAE,CACTV,MAAM,CAAC,UAAAnU,IAAI;UAAA,OAAIA,IAAI,KAAK,EAAE;UAAC;;;;;;QAM9B,IAAI4U,MAAM,CAAC9S,MAAM,KAAK,CAAC,EAAE;UACvB,IAAIgT,SAAS;;;UAGb,IAAIzC,SAAS,EAAE;YACbyC,SAAS,GAAGC,SAAS,CAACH,MAAM,CAAC,CAAC,CAAC,EAAE/M,CAAC,CAAC;WACpC,MAAM;YAAA,IAAAmN,OAAA,GAAAhS,cAAA,CACS4R,MAAM;YAAnBE,SAAS,GAAAE,OAAA;;UACX;YAAAC,CAAA,EAEMH;;;OAEV;MAAAI,IAAA;IA9BD,KAAAZ,SAAA,CAAAa,CAAA,MAAAX,KAAA,GAAAF,SAAA,CAAAc,CAAA,IAAAC,IAAA;MAAAH,IAAA,GAAAT,KAAA;MAAA,IAAAS,IAAA,SAAAA,IAAA,CAAAD,CAAA;;;;WAgCAhQ,GAAA;IAAAqP,SAAA,CAAAzE,CAAA,CAAA5K,GAAA;;IAAAqP,SAAA,CAAAgB,CAAA;;EACA,OAAO,IAAI;AACb;;;;;AC/CA,AAEA,SAASC,UAAUA,CAACpN,KAAK,EAAEqN,WAAW,EAAE;;;EAGtC,IAAIrN,KAAK,CAACqD,QAAQ,EAAE,CAAC1J,MAAM,GAAG0T,WAAW,EAAE;IACzC,OAAO,KAAK;;;EAGd,IAAIC,aAAa,CAACtN,KAAK,CAAC,EAAE;IACxB,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA,AAAe,SAASuN,oBAAoBA,CAC1C7N,CAAC,EACD8N,SAAS,EAGT;EAAA,IAFAH,WAAW,GAAA7R,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EAAA,IACfiS,QAAQ,GAAAjS,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;;EAEf,IAAA2Q,SAAA,GAAAC,4BAAA,CACuBoB,SAAS;IAAAnB,KAAA;EAAA;IAAhC,KAAAF,SAAA,CAAAa,CAAA,MAAAX,KAAA,GAAAF,SAAA,CAAAc,CAAA,IAAAC,IAAA,GAAkC;MAAA,IAAvBQ,QAAQ,GAAArB,KAAA,CAAApM,KAAA;MACjB,IAAMuM,KAAK,GAAG9M,CAAC,CAACgO,QAAQ,CAAC;;;;MAIzB,IAAIlB,KAAK,CAAC7S,MAAM,KAAK,CAAC,EAAE;QACtB,IAAMqG,KAAK,GAAGN,CAAC,CAAC8M,KAAK,CAAC,CAAC,CAAC,CAAC;QAEzB,IAAIY,UAAU,CAACpN,KAAK,EAAEqN,WAAW,CAAC,EAAE;UAClC,IAAI/R,OAAO;UACX,IAAImS,QAAQ,EAAE;YACZnS,OAAO,GAAG0E,KAAK,CAACnI,IAAI,EAAE;WACvB,MAAM;YACLyD,OAAO,GAAG0E,KAAK,CAACmE,IAAI,EAAE;;UAGxB,IAAI7I,OAAO,EAAE;YACX,OAAOA,OAAO;;;;;WAIrBwB,GAAA;IAAAqP,SAAA,CAAAzE,CAAA,CAAA5K,GAAA;;IAAAqP,SAAA,CAAAgB,CAAA;;EAED,OAAO,IAAI;AACb;;AClDA;AACA,AAAe,SAASP,SAASA,CAAC/U,IAAI,EAAE6H,CAAC,EAAE;;;EAGzC,IAAMiO,SAAS,GAAGjO,CAAC,UAAAzE,MAAA,CAAUpD,IAAI,YAAS,CAAC,CAACA,IAAI,EAAE;EAClD,OAAO8V,SAAS,KAAK,EAAE,GAAG9V,IAAI,GAAG8V,SAAS;AAC5C;;ACJe,SAASL,aAAaA,CAACtN,KAAK,EAAE;EAC3C,IAAM0D,OAAO,GAAG1D,KAAK,CAAC0D,OAAO,EAAE,CAACgJ,OAAO,EAAE;EACzC,IAAMkB,aAAa,GAAGlK,OAAO,CAACtL,IAAI,CAAC,UAAAwN,MAAM,EAAI;IAC3C,IAAM/B,KAAK,GAAGC,QAAQ,CAAC8B,MAAM,CAAC;IAC9B,IAAeiI,SAAS,GAAShK,KAAK;MAAZ7B,EAAE,GAAK6B,KAAK,CAAZ7B,EAAE;IAC5B,IAAMC,UAAU,MAAAhH,MAAA,CAAM4S,SAAS,OAAA5S,MAAA,CAAI+G,EAAE,CAAE;IACvC,OAAOC,UAAU,CAACvH,QAAQ,CAAC,SAAS,CAAC;GACtC,CAAC;EAEF,OAAOkT,aAAa,KAAKnS,SAAS;AACpC;;ACZA;AACA;AACA;;AAEA,AAAe,SAASqS,gBAAgBA,CAAC9N,KAAK,EAAE;EAC9C,OAAOA,KAAK,CAACnI,IAAI,EAAE,CAACE,IAAI,EAAE,CAAC4B,MAAM,IAAI,GAAG;AAC1C;;ACJe,SAASoU,WAAWA,CAACrO,CAAC,EAAE;EACrC,OAAOA,CAAC,CAAC2B,cAAc,CAAC,CAAC1H,MAAM,GAAG,CAAC;AACrC;;ACJe,SAASmK,QAAQA,CAAC/D,IAAI,EAAE;EACrC,IAAQiO,OAAO,GAAiBjO,IAAI,CAA5BiO,OAAO;IAAEC,UAAU,GAAKlO,IAAI,CAAnBkO,UAAU;EAE3B,IAAI,CAACD,OAAO,IAAIC,UAAU,EAAE;IAC1B,IAAMpK,KAAK,GAAGG,gBAAA,CAAgBiK,UAAU,CAAC,CAAC1T,MAAM,CAAC,UAACC,GAAG,EAAEhB,KAAK,EAAK;MAC/D,IAAM0G,IAAI,GAAG+N,UAAU,CAACzU,KAAK,CAAC;MAE9B,IAAI,CAAC0G,IAAI,CAAC+L,IAAI,IAAI,CAAC/L,IAAI,CAACD,KAAK,EAAE,OAAOzF,GAAG;MAEzCA,GAAG,CAAC0F,IAAI,CAAC+L,IAAI,CAAC,GAAG/L,IAAI,CAACD,KAAK;MAC3B,OAAOzF,GAAG;KACX,EAAE,EAAE,CAAC;IACN,OAAOqJ,KAAK;;EAGd,OAAOmK,OAAO;AAChB;;AChBe,SAASnD,OAAOA,CAAC9K,IAAI,EAAEG,IAAI,EAAEgO,GAAG,EAAE;EAC/C,IAAInO,IAAI,CAACiO,OAAO,EAAE;IAChBjO,IAAI,CAACiO,OAAO,CAAC9N,IAAI,CAAC,GAAGgO,GAAG;GACzB,MAAM,IAAInO,IAAI,CAACkO,UAAU,EAAE;IAC1BlO,IAAI,CAACoO,YAAY,CAACjO,IAAI,EAAEgO,GAAG,CAAC;;EAG9B,OAAOnO,IAAI;AACb;;ACRe,SAASyF,QAAQA,CAACzF,IAAI,EAAE8D,KAAK,EAAE;EAC5C,IAAI9D,IAAI,CAACiO,OAAO,EAAE;IAChBjO,IAAI,CAACiO,OAAO,GAAGnK,KAAK;GACrB,MAAM,IAAI9D,IAAI,CAACkO,UAAU,EAAE;IAC1B,OAAOlO,IAAI,CAACkO,UAAU,CAACtU,MAAM,GAAG,CAAC,EAAE;MACjCoG,IAAI,CAACqO,eAAe,CAACrO,IAAI,CAACkO,UAAU,CAAC,CAAC,CAAC,CAAChC,IAAI,CAAC;;IAG/CjI,gBAAA,CAAgBH,KAAK,CAAC,CAACuE,OAAO,CAAC,UAAAlE,GAAG,EAAI;MACpCnE,IAAI,CAACoO,YAAY,CAACjK,GAAG,EAAEL,KAAK,CAACK,GAAG,CAAC,CAAC;KACnC,CAAC;;EAGJ,OAAOnE,IAAI;AACb;;ACdO,IAAMsO,OAAO,GAAG,IAAI5V,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC;AACnD,IAAM6V,QAAQ,GAAG,kBAAkB;AACnC,AAAO,IAAMC,QAAQ,GAAG,IAAI9V,MAAM,IAAAwC,MAAA,CAAIqT,QAAQ,GAAI,GAAG,CAAC;AACtD,AAAO,IAAME,SAAS,GAAG,IAAI/V,MAAM,IAAAwC,MAAA,CAC9BqT,QAAQ,kCACX,GACF,CAAC;AAED,AAAO,IAAMG,cAAc,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAACvT,IAAI,CAAC,GAAG,CAAC;;ACJnE;AACA;AACA;AACA;AACA;AACA,AAAe,SAASwT,uBAAuBA,CAAChP,CAAC,EAAE;EACjD,IAAMiP,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAG/S,GAAG,EAAI;IAChC,IAAI;MACF,IAAAgT,WAAA,GAAgBC,IAAI,CAAC5U,KAAK,CAAC2B,GAAG,CAAC;QAAvBkT,GAAG,GAAAF,WAAA,CAAHE,GAAG;MACX,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;KACxC,CAAC,OAAOhP,CAAC,EAAE;MACV,OAAO,KAAK;;IAGd,OAAO,KAAK;GACb;EAEDJ,CAAC,CAAC,KAAK,CAAC,CAACG,IAAI,CAAC,UAACC,CAAC,EAAE8E,GAAG,EAAK;IACxB,IAAMf,KAAK,GAAGC,QAAQ,CAACc,GAAG,CAAC;IAE3BZ,gBAAA,CAAgBH,KAAK,CAAC,CAACuE,OAAO,CAAC,UAAAlI,IAAI,EAAI;MACrC,IAAMD,KAAK,GAAG4D,KAAK,CAAC3D,IAAI,CAAC;MAEzB,IAAIA,IAAI,KAAK,QAAQ,IAAImO,OAAO,CAAC/V,IAAI,CAAC2H,KAAK,CAAC,IAAIuO,SAAS,CAAClW,IAAI,CAAC2H,KAAK,CAAC,EAAE;QACrEP,CAAC,CAACkF,GAAG,CAAC,CAAC1E,IAAI,CAAC,QAAQ,EAAED,KAAK,CAAC;OAC7B,MAAM,IACLC,IAAI,KAAK,KAAK,IACdA,IAAI,KAAK,QAAQ,IACjBmO,OAAO,CAAC/V,IAAI,CAAC2H,KAAK,CAAC,IACnBsO,QAAQ,CAACjW,IAAI,CAAC2H,KAAK,CAAC,EACpB;;QAEA,IAAM8O,WAAW,GAAGJ,kBAAkB,CAAC1O,KAAK,CAAC;QAC7C,IAAI8O,WAAW,EAAE;UACfrP,CAAC,CAACkF,GAAG,CAAC,CAAC1E,IAAI,CAAC,KAAK,EAAE6O,WAAW,CAAC;SAChC,MAAM;UACLrP,CAAC,CAACkF,GAAG,CAAC,CAAC1E,IAAI,CAAC,KAAK,EAAED,KAAK,CAAC;;;KAG9B,CAAC;GACH,CAAC;EAEF,OAAOP,CAAC;AACV;;AC7CA,SAASsP,SAASA,CAACxV,KAAK,EAAEuG,IAAI,EAAE;EAC9B,OAAOA,IAAI,CAACwM,IAAI,KAAK,SAAS;AAChC;AAEA,SAAS0C,aAAaA,CAACvP,CAAC,EAAE;EACxBA,CAAC,CAACwP,IAAI,EAAE,CACL9W,IAAI,CAAC,GAAG,CAAC,CACTgM,QAAQ,EAAE,CACV4H,MAAM,CAACgD,SAAS,CAAC,CACjB9M,MAAM,EAAE;EAEX,OAAOxC,CAAC;AACV;AAEA,AAAe,SAASyP,KAAKA,CAACzP,CAAC,EAAE;EAC/BA,CAAC,CAAC+O,cAAc,CAAC,CAACvM,MAAM,EAAE;EAE1BxC,CAAC,GAAGuP,aAAa,CAACvP,CAAC,CAAC;EACpB,OAAOA,CAAC;AACV;;ACdA,IAAM0P,QAAQ,GAAG;;;;;;;;EAQTC,MAAM,WAAAA,OAACpX,GAAG,EAAEqX,gBAAgB,EAAEvV,SAAS,EAAgB;IAAA,IAAAwV,UAAA,GAAA/T,SAAA;MAAAgU,KAAA;IAAA,OAAAzR,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,UAAAC;MAAA,IAAAV,OAAA,EAAAiS,MAAA,EAAAC,aAAA;MAAA,OAAA1R,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAdjB,OAAO,GAAA+R,UAAA,CAAA5V,MAAA,QAAA4V,UAAA,QAAA9T,SAAA,GAAA8T,UAAA,MAAG,EAAE;YAAA,KAGrDD,gBAAgB;cAAA/Q,QAAA,CAAAE,IAAA;cAAA;;YACZiR,aAAa,GAAG;cACpBvS,aAAa,EAAE,IAAI;cACnBC,UAAU,EAAE,GAAG;cACfI,OAAO,EAAE;gBACP,cAAc,EAAE,WAAW;gBAC3B,gBAAgB,EAAE;;aAErB;YAEDiS,MAAM,GAAG;cACPzS,IAAI,EAAEsS,gBAAgB;cACtBvS,QAAQ,EAAE2S,aAAa;cACvBC,cAAc,EAAE;aACjB;YAACpR,QAAA,CAAAE,IAAA;YAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAEad,aAAa,CAAC1F,GAAG,EAAE8B,SAAS,EAAEyD,OAAO,CAAC;UAAA;YAArDiS,MAAM,GAAAlR,QAAA,CAAAY,IAAA;UAAA;YAAA,KAGJsQ,MAAM,CAACnS,KAAK;cAAAiB,QAAA,CAAAE,IAAA;cAAA;;YACdgR,MAAM,CAACG,MAAM,GAAG,IAAI;YAAC,OAAArR,QAAA,CAAAa,MAAA,WACdqQ,MAAM;UAAA;YAAA,OAAAlR,QAAA,CAAAa,MAAA,WAGRoQ,KAAI,CAACK,WAAW,CAACJ,MAAM,CAAC;UAAA;UAAA;YAAA,OAAAlR,QAAA,CAAAgB,IAAA;;SAAArB,OAAA;;GAChC;EAED2R,WAAW,WAAAA,YAAAxH,IAAA,EAAsD;IAAA,IAA7C/M,OAAO,GAAA+M,IAAA,CAAbrL,IAAI;MAAWD,QAAQ,GAAAsL,IAAA,CAARtL,QAAQ;MAAA+S,mBAAA,GAAAzH,IAAA,CAAEsH,cAAc;MAAdA,cAAc,GAAAG,mBAAA,cAAG,KAAK,GAAAA,mBAAA;IAC3D,IAAAC,qBAAA,GAA6ChT,QAAQ,CAACS,OAAO,CAArD,cAAc;MAAEC,WAAW,GAAAsS,qBAAA,cAAG,EAAE,GAAAA,qBAAA;;;;IAIxC,IAAI,CAACtS,WAAW,CAAC/C,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC+C,WAAW,CAAC/C,QAAQ,CAAC,MAAM,CAAC,EAAE;MAClE,MAAM,IAAI2C,KAAK,CAAC,qCAAqC,CAAC;;IAGxD,IAAIqC,CAAC,GAAG,IAAI,CAACsQ,SAAS,CAAC;MAAE1U,OAAO,EAAPA,OAAO;MAAEmC,WAAW,EAAXA,WAAW;MAAEkS,cAAc,EAAdA;KAAgB,CAAC;IAEhE,IAAIjQ,CAAC,CAACwP,IAAI,EAAE,CAAC7L,QAAQ,EAAE,CAAC1J,MAAM,KAAK,CAAC,EAAE;MACpC,MAAM,IAAI0D,KAAK,CAAC,kCAAkC,CAAC;;IAGrDqC,CAAC,GAAGU,iBAAiB,CAACV,CAAC,CAAC;IACxBA,CAAC,GAAGgP,uBAAuB,CAAChP,CAAC,CAAC;IAC9BA,CAAC,GAAGyP,KAAK,CAACzP,CAAC,CAAC;IAEZ,OAAOA,CAAC;GACT;EAEDsQ,SAAS,WAAAA,UAAA1H,KAAA,EAAmD;IAAA,IAAhDhN,OAAO,GAAAgN,KAAA,CAAPhN,OAAO;MAAEmC,WAAW,GAAA6K,KAAA,CAAX7K,WAAW;MAAAwS,oBAAA,GAAA3H,KAAA,CAAEqH,cAAc;MAAdA,cAAc,GAAAM,oBAAA,cAAG,KAAK,GAAAA,oBAAA;IACtD,IAAIN,cAAc,EAAE;MAClB,OAAOzT,OAAO,CAACgU,IAAI,CAAC5U,OAAO,CAAC;;IAG9B,IAAMO,QAAQ,GAAGF,WAAW,CAAC8B,WAAW,CAAC;IACzC,IAAI0S,cAAc,GAAGpU,KAAK,CAACqU,MAAM,CAAC9U,OAAO,EAAEO,QAAQ,CAAC;IACpD,IAAI6D,CAAC,GAAGxD,OAAO,CAACgU,IAAI,CAACC,cAAc,CAAC;;IAEpC,IAAME,mBAAmB,GAAGnU,OAAO,CAACC,OAAO,GACvC,+BAA+B,GAC/B,iCAAiC;IACrC,IAAMmU,eAAe,GACnB5Q,CAAC,CAAC2Q,mBAAmB,CAAC,CAACnQ,IAAI,CAAC,SAAS,CAAC,IACtCR,CAAC,CAAC,eAAe,CAAC,CAACQ,IAAI,CAAC,SAAS,CAAC;IACpC,IAAMqQ,cAAc,GAAG5U,WAAW,CAAC2U,eAAe,CAAC;;;IAGnD,IAAIA,eAAe,IAAIC,cAAc,KAAK1U,QAAQ,EAAE;MAClDsU,cAAc,GAAGpU,KAAK,CAACqU,MAAM,CAAC9U,OAAO,EAAEiV,cAAc,CAAC;MACtD7Q,CAAC,GAAGxD,OAAO,CAACgU,IAAI,CAACC,cAAc,CAAC;;IAGlC,OAAOzQ,CAAC;;AAEZ,CAAC;;AC5Fc,SAAU8Q,KAAKA;EAAA,IAACC,KAAK,GAAAjV,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EAAA,IAAEkV,GAAG,GAAAlV,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EAAA,oBAAAwC,mBAAA,CAAAC,IAAA,UAAAC;IAAA,OAAAF,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,MACxCgS,KAAK,IAAIC,GAAG;YAAAnS,QAAA,CAAAE,IAAA;YAAA;;UAAAF,QAAA,CAAAE,IAAA;UACjB,OAAOgS,KAAK,IAAI,CAAC;QAAC;UAAAlS,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA;UAAA,OAAAF,QAAA,CAAAgB,IAAA;;OAAArB,OAAA;;AAAA;;ACFtB;AACA,AAAe,SAASyS,WAAWA,CAAAtI,IAAA,EAAe;EAAA,IAAZpD,QAAQ,GAAAoD,IAAA,CAARpD,QAAQ;;EAE5C,OAAO,CAAC,CAACA,QAAQ;AACnB;;ACJA,IAAM2L,KAAK,GAAG,SAARA,KAAKA,CAAIC,SAAS,EAAEC,OAAO;EAAA,OAC/BA,OAAO,CAACvW,MAAM,CAAC,UAACC,GAAG,EAAEuW,MAAM,EAAK;IAC9BvW,GAAG,CAACuW,MAAM,CAAC,GAAGF,SAAS;IACvB,OAAOrW,GAAG;GACX,EAAE,EAAE,CAAC;AAAA;AAER,AAAe,SAASwW,qBAAqBA,CAACH,SAAS,EAAE;EACvD,OAAOA,SAAS,CAACI,gBAAgB,GAC7BL,KAAK,CAACC,SAAS,GAAGA,SAAS,CAACE,MAAM,EAAA9V,MAAA,CAAAiK,kBAAA,CAAK2L,SAAS,CAACI,gBAAgB,EAAC,CAAC,GACnEL,KAAK,CAACC,SAAS,EAAE,CAACA,SAAS,CAACE,MAAM,CAAC,CAAC;AAC1C;;ACRO,IAAMG,aAAa,GAAG,EAAE;AAE/B,AAAe,SAASC,YAAYA,CAACN,SAAS,EAAE;EAC9C,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAACE,MAAM,EAAE;IACnC,OAAO;MACLzT,KAAK,EAAE,IAAI;MACXgC,OAAO,EAAE;KACV;;EAGH8R,cAAA,CAAcF,aAAa,EAAEF,qBAAqB,CAACH,SAAS,CAAC,CAAC;EAE9D,OAAOK,aAAa;AACtB;;ACfO,IAAMG,gBAAgB,GAAG;EAC9BN,MAAM,EAAE,cAAc;EACtBzV,OAAO,EAAE;;;;IAIPkS,SAAS,EAAE,CAAC,wBAAwB,CAAC;;IAGrC2B,KAAK,EAAE,EAAE;;IAGTmC,UAAU,EAAE;MACVC,QAAQ,EAAE;;GAEb;EAEDC,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,mBAAmB;GAChC;EAEDpD,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,kBAAkB;;AAElC,CAAC;;AC5BM,IAAMkE,cAAc,GAAG;EAC5BX,MAAM,EAAE,WAAW;EACnBzV,OAAO,EAAE;;IAEPkS,SAAS,EAAE,CAAC,qBAAqB,EAAE,cAAc,EAAE,iBAAiB,CAAC;;IAGrE2B,KAAK,EAAE,CAAC,KAAK,EAAE,uBAAuB,CAAC;;;;;;;IAQvCmC,UAAU,EAAE;;MAEVK,EAAE,EAAE,IAAI;;MAGRJ,QAAQ,EAAE,SAAAA,SAACvR,KAAK,EAAEN,CAAC,EAAK;QACtB,IAAMkS,SAAS,GAAGlS,CAAC,CAACvD,OAAO,GAAGuD,CAAC,CAACM,KAAK,CAACnI,IAAI,EAAE,CAAC,GAAGmI,KAAK,CAACqD,QAAQ,EAAE;QAChE,IACEuO,SAAS,CAACjY,MAAM,KAAK,CAAC,IACtBiY,SAAS,CAACpV,GAAG,CAAC,CAAC,CAAC,KAAKf,SAAS,IAC9BmW,SAAS,CAACpV,GAAG,CAAC,CAAC,CAAC,CAACgG,OAAO,CAAC5I,WAAW,EAAE,KAAK,KAAK,EAChD;UACA,OAAO,QAAQ;;QAGjB,OAAO,IAAI;;;GAGhB;EAEDwQ,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,uBAAuB,EAAE,qBAAqB,EAAE,IAAI;GACjE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,aAAa,EAAE,sBAAsB;GAClD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,sBAAsB;GACnC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,kCAAkC,EAAE,UAAU,CAAC,EAChD,wBAAwB;;AAG9B,CAAC;;ACrDM,IAAMsE,kBAAkB,GAAG;EAChCf,MAAM,EAAE,eAAe;EACvBzV,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,CAAC;IAE/BuE,cAAc,EAAE,KAAK;;IAGrBT,UAAU,EAAE;MACV,cAAc,EAAE,SAAAU,WAAAhS,KAAK,EAAI;QACvB,IAAMiI,OAAO,GAAGjI,KAAK,CAAC0D,OAAO,CAAC,UAAU,CAAC;;QAEzC,IAAIuE,OAAO,CAAC5E,QAAQ,CAAC,KAAK,CAAC,CAAC1J,MAAM,KAAK,CAAC,EAAE;UACxCsO,OAAO,CAACgK,OAAO,CAACjS,KAAK,CAAC;;OAEzB;MACD,kBAAkB,EAAE,YAAY;MAChC,UAAU,EAAE;KACb;;IAGDmP,KAAK,EAAE,CACL,iBAAiB,EACjB,oCAAoC,EACpC,MAAM,EACN,SAAS;GAEZ;EAEDqC,MAAM,EAAE,wBAAwB;EAEhCpH,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,UAAU;GACvB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,sBAAsB;;AAEtC,CAAC;;ACtCM,IAAM0E,gBAAgB,GAAG;EAC9BnB,MAAM,EAAE,aAAa;EAErBzV,OAAO,EAAE;IACPgW,UAAU,EAAE;;;;;MAKV,uBAAuB,EAAE,SAAAa,kBAACnS,KAAK,EAAEN,CAAC,EAAK;QACrC,IAAM0S,MAAM,GAAGpS,KAAK,CAAC5H,IAAI,CAAC,QAAQ,CAAC;QACnC,IAAMia,eAAe,GAAG3S,CAAC,CAAC,iCAAiC,CAAC;QAC5D2S,eAAe,CAACrJ,MAAM,CAACoJ,MAAM,CAAC;QAC9BpS,KAAK,CAACgD,WAAW,CAACqP,eAAe,CAAC;OACnC;;;MAIDrF,CAAC,EAAE;KACJ;IAEDQ,SAAS,EAAE,CAAC,uBAAuB,CAAC;IAEpCuE,cAAc,EAAE,KAAK;IAErB5C,KAAK,EAAE,CAAC,qBAAqB,EAAE,QAAQ,EAAE,sBAAsB;GAChE;EAEDqC,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kCAAkC;GAC/C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,4CAA4C,EAAE,cAAc,CAAC;;AAE9E,CAAC;;ACnCM,IAAM8E,gBAAgB,GAAG;EAC9BvB,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT,4BAA4B,EAC5B,eAAe,EACf,yBAAyB,EACzB,aAAa,EACb,sBAAsB;GAEzB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAChC,WAAW,EACX,SAAS,EACT,CAAC,kBAAkB,EAAE,OAAO,CAAC;GAEhC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,EAAE,6BAA6B,EAAE,eAAe,CAAC;IAE3E8D,UAAU,EAAE;MACV,YAAY,EAAE,SAAAiB,SAAAvS,KAAK,EAAI;QACrB,IAAI8O,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAMsE,KAAK,GAAG,GAAG;QAEjBsK,GAAG,GAAGA,GAAG,CAAChX,OAAO,CAAC,UAAU,EAAE0M,KAAK,CAAC;QACpCxE,KAAK,CAACE,IAAI,CAAC,KAAK,EAAE4O,GAAG,CAAC;;KAEzB;IAEDK,KAAK,EAAE,CACL,KAAK,EACL,qBAAqB,EACrB,2BAA2B,EAC3B,kBAAkB,EAClB,mBAAmB,EACnB,QAAQ,EACR,kBAAkB,EAClB,SAAS,EACT,WAAW,EACX,eAAe,EACf,YAAY,EACZ,qBAAqB;GAExB;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,gCAAgC,EAAE,OAAO,CAAC;GAE9C;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE,IAAI;EAETY,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;ACnED;AACA;AACA,AAAO,IAAMC,oBAAoB,GAAG;EAClC5B,MAAM,EAAE,qBAAqB;EAC7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,wBAAwB;GAC3C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAAE,mBAAmB;GAClE;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,CAAC;;;IAIvC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CACL,cAAc,EACd,UAAU,EACV,0BAA0B,EAC1B,4BAA4B,EAC5B,sBAAsB,EACtB,iBAAiB,EACjB,uBAAuB,EACvB,gBAAgB;GAEnB;EAED0C,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC;GAClD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,gCAAgC,EAAE,UAAU,CAAC;GAC3D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;ACjDD;AACA;AACA;AACA,AAAO,IAAME,kBAAkB,GAAG;EAChC7B,MAAM,EAAE,mBAAmB;EAC3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT,6BAA6B,EAC7B,iCAAiC,EACjC,+BAA+B,EAC/B,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAErC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,6CAA6C,EAC7C,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC,mDAAmD,EACnD,2DAA2D;GAE9D;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,gBAAgB,EAChB,8BAA8B,EAC9B,gCAAgC,CACjC;;;IAID8D,UAAU,EAAE;MACV,gBAAgB,EAAE,YAAY;MAC9B,kBAAkB,EAAE;KACrB;;;;IAKDnC,KAAK,EAAE,CAAC,wCAAwC,EAAE,OAAO;GAC1D;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,mCAAmC,EACnC,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAClC;IACDqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CACT,gCAAgC,EAChC,yBAAyB,EACzB,iCAAiC;GAEpC;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;ACnED;AACA;AACA;AACA,AAAO,IAAMI,cAAc,GAAG;EAC5B/B,MAAM,EAAE,eAAe;EACvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT;;;GAGH;;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC;;;GAGH;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,8BAA8B,EAC9B;;KAED;;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,kBAAkB,EAAE,sBAAsB,EAAE,gBAAgB;GACrE;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;ACpDD;AACA;AACA;AACA,AAAO,IAAMK,YAAY,GAAG;EAC1BhC,MAAM,EAAE,aAAa;EACrB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT;;;GAGH;;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT;;;GAGH;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT;;KAED;;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,cAAc;GACvB;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,WAAW;GACxB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE;GACZ;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;AClDD;AACA;AACA;AACA,AAAO,IAAMM,cAAc,GAAG;EAC5BjC,MAAM,EAAE,eAAe;EACvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT;;;GAGH;;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT;;;GAGH;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE;;IAET,iBAAiB,CAClB;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,iBAAiB;GAC1B;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,UAAU,CAAC;GAChD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;ACpDD;AACA;AACA;AACA,AAAO,IAAMO,iBAAiB,GAAG;EAC/BlC,MAAM,EAAE,kBAAkB;EAE1BE,gBAAgB,EAAE,CAAC,sBAAsB,CAAC;EAE1C7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT;;;GAGH;;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,gCAAgC,EAChC,gBAAgB,EAChB,CAAC,qBAAqB,EAAE,OAAO;;;GAGlC;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,gDAAgD,EAAE,qBAAqB,CAAC,EACzE,CAAC,qBAAqB,CAAC,CACxB;IAEDuE,cAAc,EAAE,KAAK;;;IAIrBT,UAAU,EAAE;MACV4B,EAAE,EAAE,GAAG;MAEP,kCAAkC,EAAE,SAAAC,gCAAAnT,KAAK,EAAI;QAC3C,IAAIA,KAAK,CAACoT,GAAG,CAAC,KAAK,CAAC,IAAIpT,KAAK,CAACoT,GAAG,CAAC,+BAA+B,CAAC,EAAE;UAClE,OAAO,QAAQ;;QAGjB,OAAO,IAAI;OACZ;MAED,mEAAmE,EACjE;KACH;;;;IAKDjE,KAAK,EAAE,CACL,oBAAoB,EACpB,uEAAuE,EACvE,YAAY,EACZ,QAAQ,EACR,sBAAsB,EACtB,kBAAkB;GAErB;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,gBAAgB,EAAE,UAAU,CAAC;GAC3C;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,6BAA6B;GAC1C;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;AC7ED;AACA;AACA;AACA,AAAO,IAAMW,cAAc,GAAG;EAC5BtC,MAAM,EAAE,kBAAkB;EAC1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT;;;GAGH;;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,eAAe,EACf;;;GAGH;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,eAAe,EACf;;KAED;;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;GACR;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;ACpDD;AACA;AACA;AACA,AAAO,IAAMY,qBAAqB,GAAG;EACnCvC,MAAM,EAAE,sBAAsB;EAC9B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT,yBAAyB,EACzB;;;GAGH;;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,+CAA+C,EAC/C,CAAC,qBAAqB,EAAE,OAAO;;;GAGlC;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE;;IAET,mCAAmC,EACnC,mBAAmB,EACnB,kBAAkB,CACnB;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;GACR;EAEDqD,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDiF,aAAa,EAAE,IAAI;EAEnBC,OAAO,EAAE;AACX,CAAC;;AC9CM,IAAMa,iBAAiB,GAAG;EAC/BxC,MAAM,EAAE,kBAAkB;EAC1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,8CAA8C,EAAE,OAAO,CAAC,EACzD,6BAA6B,EAC7B,oCAAoC;GAEvC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,aAAa,CAAC,EAAE,qBAAqB,EAAE,aAAa,CAAC;IAElE8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,YAAY,EAAE,aAAa,EAAE,KAAK;GAC3C;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,gCAAgC,EAAE,UAAU,CAAC,EAC9C,CAAC,qCAAqC,EAAE,UAAU,CAAC,EACnD,CAAC,+CAA+C,EAAE,UAAU,CAAC,CAC9D;IACDqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;;AAExD,CAAC;;ACtCM,IAAMgG,iBAAiB,GAAG;EAC/BzC,MAAM,EAAE,cAAc;EAEtBE,gBAAgB,EAAE,CAChB,aAAa,EACb,gBAAgB,EAChB,YAAY,EACZ,aAAa,EACb,cAAc,EACd,WAAW,EACX,YAAY,EACZ,eAAe,EACf,kBAAkB,EAClB,cAAc,EACd,aAAa,EACb,gBAAgB,EAChB,kBAAkB,CACnB;EAED7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,WAAW,EAAE,aAAa;GACvC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,sBAAsB,EAAE,SAAS;GAC9C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,EAAE,eAAe,EAAE,gBAAgB,CAAC;;;IAIlE8D,UAAU,EAAE;MACV,kDAAkD,EAAE,SAAAmC,qCAAAzT,KAAK,EAAI;QAC3D,IAAM0T,SAAS,GAAG1T,KAAK,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC7G,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACvD2G,KAAK,CAACE,IAAI,CAAC,KAAK,mCAAAjF,MAAA,CAAmCyY,SAAS,CAAE,CAAC;;KAElE;;;;IAKDvE,KAAK,EAAE,CAAC,YAAY,EAAE,WAAW;GAClC;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,wBAAwB,EAAE,UAAU,CAAC;GAEzC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDiF,aAAa,EAAE;IACbjF,SAAS,EAAE;;;GAGZ;EAEDkF,OAAO,EAAE;IACPlF,SAAS,EAAE;;;;AAIf,CAAC;;ACzED;AACA;AACA;AACA,AAAO,IAAMmG,sBAAsB,GAAG;EACpC5C,MAAM,EAAE,uBAAuB;EAC/B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,uBAAuB,EAAE,kBAAkB;GACxD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,uBAAuB;GACpC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,2BAA2B,CAAC;;;IAIxC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;GACR;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,8BAA8B,EAAE,OAAO,CAAC;GACtD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDiF,aAAa,EAAE;IACbjF,SAAS,EAAE;;;GAGZ;EAEDkF,OAAO,EAAE;IACPlF,SAAS,EAAE;;;;AAIf,CAAC;;ACjDD;AACA;AACA;AACA,AAAO,IAAMoG,yBAAyB,GAAG;EACvC7C,MAAM,EAAE,0BAA0B;EAClC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,aAAa;GAC1B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,mBAAmB;GAChC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;;;IAIhC8D,UAAU,EAAE;MACV,gDAAgD,EAAE,SAAAuC,sCAAC7T,KAAK,EAAEN,CAAC,EAAK;QAC9D,IAAMoU,IAAI,GAAGjF,IAAI,CAAC5U,KAAK,CAAC+F,KAAK,CAACE,IAAI,CAAC,YAAY,CAAC,CAAC;QACjD,IAAQ4O,GAAG,GAAKgF,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAvBjF,GAAG;QACX,IAAMxK,IAAI,GAAG5E,CAAC,CAAC,SAAS,CAAC,CAACQ,IAAI,CAAC,KAAK,EAAE4O,GAAG,CAAC;QAC1C9O,KAAK,CAACgD,WAAW,CAACsB,IAAI,CAAC;;KAE1B;;;;IAKD6K,KAAK,EAAE;GACR;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,kCAAkC,EAAE,UAAU,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDiF,aAAa,EAAE;IACbjF,SAAS,EAAE;;;GAGZ;EAEDkF,OAAO,EAAE;IACPlF,SAAS,EAAE;;;;AAIf,CAAC;;ACxDM,IAAMwG,eAAe,GAAG;EAC7BjD,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC,uBAAuB,EAAE,OAAO,CAAC;GACrD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,CAAC;;;IAItB8D,UAAU,EAAE;;MAEV,4BAA4B,EAAE,SAAA2C,uBAAAjU,KAAK,EAAI;QACrC,IAAMkU,KAAK,GAAGlU,KAAK,CAACmE,IAAI,EAAE;QAC1B,IAAI+P,KAAK,CAACva,MAAM,KAAK,CAAC,IAAI,eAAe,CAACrB,IAAI,CAAC4b,KAAK,CAAC,EAAE;UACrDlU,KAAK,CAACgD,WAAW,CAACkR,KAAK,CAAC;;OAE3B;;MAEDC,MAAM,EAAE,SAAAA,OAAAnU,KAAK,EAAI;QACf,IAAMoU,IAAI,GAAG,kEAAkE;QAC/E,IAAMC,KAAK,GAAGC,kBAAkB,CAACtU,KAAK,CAACE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9D,IAAM+H,OAAO,GAAGjI,KAAK,CAAC0D,OAAO,CAAC,QAAQ,CAAC;QAEvC,IAAI0Q,IAAI,CAAC9b,IAAI,CAAC+b,KAAK,CAAC,EAAE;UACpB,IAAAE,YAAA,GAAuBF,KAAK,CAACpb,KAAK,CAACmb,IAAI,CAAC;YAAAI,aAAA,GAAA3Z,cAAA,CAAA0Z,YAAA;YAAjCzU,CAAC,GAAA0U,aAAA;YAAEd,SAAS,GAAAc,aAAA,IAAsB;UACzCxU,KAAK,CAACE,IAAI,CAAC,KAAK,mCAAAjF,MAAA,CAAmCyY,SAAS,CAAE,CAAC;UAC/D,IAAMe,QAAQ,GAAGxM,OAAO,CAAC7P,IAAI,CAAC,YAAY,CAAC;UAC3C6P,OAAO,CAACyM,KAAK,EAAE,CAAC1L,MAAM,CAAC,CAAChJ,KAAK,EAAEyU,QAAQ,CAAC,CAAC;UACzC;;;;QAIFxM,OAAO,CAAC/F,MAAM,EAAE;OACjB;;MAGDyS,MAAM,EAAE,SAAAA,OAAA3U,KAAK,EAAI;;QAEf,IAAIA,KAAK,CAAC5H,IAAI,CAAC,QAAQ,CAAC,CAACuB,MAAM,GAAG,CAAC,EAAE;QAErC,IAAM2K,IAAI,GAAGtE,KAAK,CAAC5H,IAAI,CAAC,KAAK,CAAC,CAACsD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAM+Y,QAAQ,GAAGzU,KAAK,CAAC5H,IAAI,CAAC,YAAY,CAAC;QAEzC4H,KAAK,CAAC0U,KAAK,EAAE,CAAC1L,MAAM,CAAC,CAAC1E,IAAI,EAAEmQ,QAAQ,CAAC,CAAC;OACvC;;;MAID7P,GAAG,EAAE,SAAAA,IAAA5E,KAAK,EAAI;QACZ,IAAMwE,KAAK,GAAGrL,SAAA,CAAS6G,KAAK,CAACE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;QAC/C,IAAIsE,KAAK,GAAG,GAAG,EAAExE,KAAK,CAACkC,MAAM,EAAE;;KAElC;;;;IAKDiN,KAAK,EAAE,CAAC,QAAQ,EAAE,KAAK;GACxB;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE,IAAI;EAETY,aAAa,EAAE;IACbjF,SAAS,EAAE;;;GAGZ;EAEDkF,OAAO,EAAE;IACPlF,SAAS,EAAE;;;;AAIf,CAAC;;ACxFM,IAAMoH,kBAAkB,GAAG;EAChC7D,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,wBAAwB,EAAE,IAAI,EAAE,WAAW;GACxD;EAEDgE,MAAM,EAAE,WAAW;EAEnBC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,wBAAwB,EAAE,sBAAsB,CAAC;IAE7DqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,CAAC;;;IAIrE8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,gBAAgB;;AAE5B,CAAC;;ACrCM,IAAM0F,6BAA6B,GAAG;EAC3C9D,MAAM,EAAE,wBAAwB;EAEhC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,0BAA0B;GAC7C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,6CAA6C,EAAE,SAAS,CAAC;GACvE;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,CAAC;;;IAI5B8D,UAAU,EAAE;MACV,oBAAoB,EAAE,SAAAwD,iBAAA9U,KAAK,EAAI;QAC7B,IAAIA,KAAK,CAACoT,GAAG,CAAC,kBAAkB,CAAC,CAACzZ,MAAM,GAAG,CAAC,EAAE;UAC5C,OAAO,QAAQ;;QAGjBqG,KAAK,CAACkC,MAAM,EAAE;QACd,OAAO,IAAI;OACZ;MACD,aAAa,EAAE;KAChB;;;;IAKDiN,KAAK,EAAE,CAAC,oBAAoB,EAAE,yBAAyB;;AAE3D,CAAC;;AC7CM,IAAM4F,6BAA6B,GAAG;EAC3ChE,MAAM,EAAE,wBAAwB;EAEhC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,oBAAoB;GACjC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iCAAiC;GAC9C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,oCAAoC,EAAE,OAAO,CAAC,EAC/C,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAEnD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,uBAAuB;GACpC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,iBAAiB,CAAC;IAE9BuE,cAAc,EAAE,KAAK;;;IAIrBT,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CACL,aAAa,EACb,YAAY,EACZ,cAAc,EACd,cAAc,EACd,oBAAoB,EACpB,kBAAkB;;AAGxB,CAAC;;AC/CM,IAAM6F,uBAAuB,GAAG;EACrCjE,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qBAAqB;GAClC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC,CAAC;IAE7DqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,oBAAoB;GACjC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC;;;IAIjC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,OAAO;;AAEnB,CAAC;;ACrCM,IAAM8F,oBAAoB,GAAG;EAClClE,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAAE,WAAW;GAC1D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;IAE3CqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,eAAe;GAC5B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,YAAY,CAAC;;;IAIzB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,iBAAiB;;AAE7B,CAAC;;ACrCM,IAAM+F,uBAAuB,GAAG;EACrCnE,MAAM,EAAE,kBAAkB;EAE1BE,gBAAgB,EAAE,CAAC,iBAAiB,CAAC;EAErC7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,QAAQ;GACrB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE;;IAET,CAAC,wBAAwB,EAAE,gBAAgB,EAAE,kBAAkB,CAAC;;IAEhE,CAAC,gBAAgB,EAAE,kBAAkB,CAAC;;IAEtC,uBAAuB;;IAEvB,qBAAqB,CACtB;;IAGD8D,UAAU,EAAE;MACVC,QAAQ,EAAE,SAAAA,SAAAvR,KAAK,EAAI;QACjB,IAAM4R,SAAS,GAAG5R,KAAK,CAACqD,QAAQ,EAAE;QAClC,IAAIuO,SAAS,CAACjY,MAAM,KAAK,CAAC,IAAIiY,SAAS,CAACpV,GAAG,CAAC,CAAC,CAAC,CAACgG,OAAO,KAAK,KAAK,EAAE;UAChE,OAAO,MAAM;;QAGf,OAAO,IAAI;;KAEd;;;;IAKD2M,KAAK,EAAE,CACL,QAAQ,EACR,qBAAqB;;;AAG3B,CAAC;;ACzDM,IAAMgG,kBAAkB,GAAG;EAChCpE,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB,EAAE,IAAI;GACnC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE;;IAET,CAAC,0BAA0B,EAAE,eAAe,CAAC;;IAE7C,eAAe,EACf,6BAA6B,CAC9B;;;IAID8D,UAAU,EAAE;MACV,wDAAwD,EAAE,SAAA8D,+CAAApV,KAAK,EAAI;QACjE,IAAMkU,KAAK,GAAGlU,KAAK,CAACmE,IAAI,EAAE;QAC1B,IAAI+P,KAAK,EAAE;UACT,OAAO,GAAG;;QAGZ,OAAO,IAAI;OACZ;;;MAID,qBAAqB,EAAE,SAAAmB,kBAAArV,KAAK,EAAI;QAC9B,IAAIA,KAAK,CAACoT,GAAG,CAAC,GAAG,CAAC,EAAE;UAClB,IACEpT,KAAK,CAACnI,IAAI,EAAE,CAACE,IAAI,EAAE,KACnBiI,KAAK,CACF5H,IAAI,CAAC,GAAG,CAAC,CACTP,IAAI,EAAE,CACNE,IAAI,EAAE,EACT;YACAiI,KAAK,CAACkC,MAAM,EAAE;;;OAGnB;MAED,0BAA0B,EAAE;KAC7B;;;;IAKDiN,KAAK,EAAE;;AAEX,CAAC;;AChEM,IAAMmG,kBAAkB,GAAG;EAChCvE,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qBAAqB;GAClC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,0BAA0B,CAAC;IAEvCqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,CAAC;;;IAI/B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACvCM,IAAMoG,sBAAsB,GAAG;EACpCxE,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT,CAAC,oBAAoB,EAAE,OAAO,CAAC,EAC/B,cAAc,EACd,0BAA0B;GAE7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,SAAS,CAAC,EAAE,eAAe;GAClE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;IAExDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPyW,cAAc,EAAE,KAAK;IAErBvE,SAAS,EAAE,CACT,yBAAyB,EACzB,6DAA6D,EAC7D,CAAC,aAAa,EAAE,cAAc,CAAC,CAChC;;;IAID8D,UAAU,EAAE;MACV,aAAa,EAAE,SAAAkE,UAACxV,KAAK,EAAEN,CAAC,EAAK;QAC3B,IAAM+V,OAAO,GAAG/V,CAAC,CAAC,0BAA0B,CAAC,CAACQ,IAAI,CAAC,OAAO,CAAC;QAC3DF,KAAK,CAACmE,IAAI,4DAAAlJ,MAAA,CACqCwa,OAAO,mDAA6C,CAAC;OACrG;MACD,yBAAyB,EAAE,SAAAC,qBAAC1V,KAAK,EAAEN,CAAC,EAAK;QACvC,IAAM+V,OAAO,GAAG/V,CAAC,CAAC,0BAA0B,CAAC,CAACQ,IAAI,CAAC,OAAO,CAAC;QAC3D,IAAMyV,WAAW,GAAGjW,CAAC,CAAC,8BAA8B,CAAC,CAACQ,IAAI,CAAC,OAAO,CAAC;QACnEF,KAAK,CAACmE,IAAI,0DAAAlJ,MAAA,CACmCwa,OAAO,yEAAAxa,MAAA,CACvC0a,WAAW,kBAAe,CAAC;;KAE3C;;;;IAKDxG,KAAK,EAAE;;AAEX,CAAC;;AC9DM,IAAMyG,0BAA0B,GAAG;EACxC7E,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,oBAAoB;GACvC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kCAAkC,EAAE,UAAU;GAC3D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,gCAAgC,EAAE,sBAAsB;GACrE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,EAAE,wBAAwB,CAAC;;;IAIrD8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,iBAAiB,EAAE,cAAc;;AAE7C,CAAC;;ACnCM,IAAM0G,uBAAuB,GAAG;EACrC9E,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,yBAAyB,EAAE,0BAA0B;GAClE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,qBAAqB,CAAC;;;IAIlC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACnCM,IAAM2G,wBAAwB,GAAG;EACtC/E,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE;;IAET,gBAAgB;;IAGhB,kBAAkB;;IAGlB,uBAAuB,EACvB,wBAAwB;GAE3B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC,uBAAuB;;IAGvB,QAAQ;;IAGR,SAAS,EACT,oBAAoB;GAEvB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,mBAAmB,EAAE,UAAU,CAAC,EACjC,CAAC,gBAAgB,EAAE,UAAU,CAAC,EAC9B,CAAC,mBAAmB,EAAE,OAAO,CAAC,EAC9B,CAAC,+BAA+B,EAAE,OAAO,CAAC,EAC1C,CAAC,+BAA+B,EAAE,SAAS,CAAC;GAE/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;GACZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAClC,CAAC,uBAAuB,EAAE,SAAS,CAAC;GAEvC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,wBAAwB,EACxB,eAAe;;IAGf,CAAC,oBAAoB,CAAC;;IAGtB,YAAY,CACb;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,oBAAoB,EAAE,UAAU;;AAE5C,CAAC;;ACzEM,IAAM4G,qBAAqB,GAAG;EACnChF,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,qBAAqB;GACxC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,oBAAoB,EAAE,0BAA0B;GAC7D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC;GACjC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,EAAE,kBAAkB,CAAC;;;IAI1C8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AC/BM,IAAM6G,kBAAkB,GAAG;EAChCjF,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,aAAa;GAChC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,oCAAoC;GACjD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,2BAA2B,EAAE,UAAU,CAAC,EACzC,CAAC,mBAAmB,EAAE,OAAO,CAAC;GAEjC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAClC,CAAC,gCAAgC,EAAE,OAAO,CAAC;GAE9C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,YAAY,CAAC;;;IAIzB8D,UAAU,EAAE;MACV,mBAAmB,EAAE,QAAQ;MAC7B,mCAAmC,EAAE;KACtC;;;;IAKDnC,KAAK,EAAE,CAAC,qBAAqB;;AAEjC,CAAC;;ACxCM,IAAM8G,qBAAqB,GAAG;EACnClF,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,0BAA0B;GACvC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,EAC5C,kBAAkB,CACnB;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACtCM,IAAM+G,cAAc,GAAG;EAC5BnF,MAAM,EAAE,QAAQ;EAEhB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,mBAAmB;GAChC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,gBAAgB,EAAE,UAAU,CAAC;GAEjC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAClC,CAAC,2BAA2B,EAAE,SAAS,CAAC,EACxC,CAAC,4BAA4B,EAAE,SAAS,CAAC;GAE5C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,CAAC;;;IAI/B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACtCM,IAAMgH,wBAAwB,GAAG;EACtCpF,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,6CAA6C;GAC1D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE;;IAET,cAAc,CACf;IAEDqF,QAAQ,EAAE,iBAAiB;IAC3BuD,MAAM,EAAE;GACT;EAEDvE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,8BAA8B,EAAE,MAAM,CAAC;GACrD;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,iBAAiB,CAAC;;;IAI9B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACzCM,IAAMkH,sBAAsB,GAAG;EACpCtF,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,sCAAsC,EAAE,qBAAqB;GAC1E;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,gCAAgC,EAAE,OAAO,CAAC,EAAE,SAAS;GACnE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,wCAAwC,EAAE,OAAO,CAAC;GAChE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,wBAAwB,EAAE,eAAe,CAAC;;;IAItD8D,UAAU,EAAE;MACV,mBAAmB,EAAE;KACtB;;;;IAKDnC,KAAK,EAAE,CACL,6CAA6C,EAC7C,yBAAyB;;AAG/B,CAAC;;ACpCM,IAAMmH,oBAAoB,GAAG;EAClCvF,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,WAAW,EAAE,UAAU;GACpC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC,EAAE,oBAAoB;GAC3E;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,EAAE,mCAAmC,CAAC;;;IAI5D8D,UAAU,EAAE;MACV,eAAe,EAAE;KAClB;;;;IAKDnC,KAAK,EAAE;;AAEX,CAAC;;ACjCM,IAAMoH,6BAA6B,GAAG;EAC3CxF,MAAM,EAAE,wBAAwB;EAEhC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,uCAAuC;GACpD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,MAAM;GACnB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,CAAC;;;IAItB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AC/BM,IAAMqH,kBAAkB,GAAG;EAChCzF,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,QAAQ;GACrB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,EAC5C,kBAAkB,CACnB;;;IAID8D,UAAU,EAAE;MACV,iCAAiC,EAAE,SAAAmF,4BAAAzW,KAAK,EAAI;QAC1C,IAAM0W,OAAO,GAAG1W,KAAK,CAACmE,IAAI,EAAE;QAC5BnE,KAAK,CACF0D,OAAO,CAAC,iBAAiB,CAAC,CAC1BtL,IAAI,CAAC,kBAAkB,CAAC,CACxB4K,WAAW,CAAC0T,OAAO,CAAC;OACxB;MAED,uBAAuB,EAAE;KAC1B;;;;IAKDvH,KAAK,EAAE;;AAEX,CAAC;;AChDM,IAAMwH,kCAAkC,GAAG;EAChD5F,MAAM,EAAE,6BAA6B;EAErC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,eAAe;GAClC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,wCAAwC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC,CAAC;IAC7D4I,MAAM,EAAE,6BAA6B;IACrCvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EAAE,UAAU,CAAC;;;IAI/D8D,UAAU,EAAE;MACV,iBAAiB,EAAE,SAAAsF,cAAC5W,KAAK,EAAEN,CAAC,EAAK;QAC/B,IAAMmX,OAAO,GAAG7W,KAAK,CAClB5H,IAAI,CAAC,wBAAwB,CAAC,CAC9BA,IAAI,CAAC,cAAc,CAAC,CACpBmR,KAAK,EAAE,CACPuK,IAAI,CAAC,cAAc,CAAC;QACvB,IAAI+C,OAAO,EAAE;UACX7W,KAAK,CAACiS,OAAO,CAACvS,CAAC,wCAAAzE,MAAA,CAAqC4b,OAAO,SAAK,CAAC,CAAC;;;KAGvE;;;;IAKD1H,KAAK,EAAE,CAAC,+BAA+B;;AAE3C,CAAC;;AChDM,IAAM2H,iCAAiC,GAAG;EAC/C/F,MAAM,EAAE,4BAA4B;EAEpC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,eAAe;GAClC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,wCAAwC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,0BAA0B,EAAE,gBAAgB;GACzD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,0BAA0B,EAC1B,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACtC,UAAU,CACX;;;IAID8D,UAAU,EAAE;MACV,iBAAiB,EAAE,SAAAsF,cAAC5W,KAAK,EAAEN,CAAC,EAAK;QAC/B,IAAMqX,YAAY,GAAG/W,KAAK,CAACqD,QAAQ,EAAE,CAACkG,KAAK,EAAE;QAC7C,IAAIwN,YAAY,CAACpN,QAAQ,CAAC,YAAY,CAAC,EAAE;UACvC,IAAMqN,kBAAkB,GAAGD,YAAY,CACpC3e,IAAI,CAAC,2BAA2B,CAAC,CACjCiL,QAAQ,EAAE,CACVkG,KAAK,EAAE;UACV,IAAM0N,QAAQ,GAAGD,kBAAkB,CAAClD,IAAI,CAAC,sBAAsB,CAAC;UAChE,IAAMoD,QAAQ,GAAGF,kBAAkB,CAAClD,IAAI,CAAC,sBAAsB,CAAC;UAChE,IAAIoD,QAAQ,IAAID,QAAQ,EAAE;YACxBjX,KAAK,CAACiS,OAAO,CACXvS,CAAC,+DAAAzE,MAAA,CACagc,QAAQ,uCAAAhc,MAAA,CACRic,QAAQ,+BACf,CACT,CAAC;;SAEJ,MAAM;UACL,IAAML,OAAO,GAAG7W,KAAK,CAClB5H,IAAI,CAAC,wBAAwB,CAAC,CAC9BA,IAAI,CAAC,cAAc,CAAC,CACpBmR,KAAK,EAAE,CACPuK,IAAI,CAAC,cAAc,CAAC;UACvB,IAAI+C,OAAO,EAAE;YACX7W,KAAK,CAACiS,OAAO,CAACvS,CAAC,wCAAAzE,MAAA,CAAqC4b,OAAO,SAAK,CAAC,CAAC;;;;KAIzE;;;;IAKD1H,KAAK,EAAE,CAAC,+BAA+B;;AAE3C,CAAC;;ACpEM,IAAMgI,sBAAsB,GAAG;EACpCpG,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,aAAa,EAAE,YAAY;GACxC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,0CAA0C,EAC1C,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAEnC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,gCAAgC,EAAE,OAAO,CAAC;GAE9C;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,oBAAoB,EAAE,cAAc,CAAC;;;IAIjD8D,UAAU,EAAE;MACV,YAAY,EAAE,SAAA8F,UAAApX,KAAK,EAAI;QACrB,IAAMqX,OAAO,GAAGrX,KAAK,CAAC5H,IAAI,CAAC,QAAQ,CAAC;QACpC4H,KAAK,CAACgD,WAAW,CAACqU,OAAO,CAAC;;KAE7B;;;;IAKDlI,KAAK,EAAE,CAAC,YAAY,EAAE,YAAY;;AAEtC,CAAC;;AC1CM,IAAMmI,mBAAmB,GAAG;EACjCvG,MAAM,EAAE,aAAa;EAErBE,gBAAgB,EAAE,CAAC,YAAY,CAAC;EAEhC7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,SAAS;GACtB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC;GAClD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,yBAAyB,EAAE,gBAAgB,CAAC,EAC7C,gBAAgB,CACjB;;;IAID8D,UAAU,EAAE;MACV,yBAAyB,EAAE,QAAQ;MACnC,kBAAkB,EAAE;KACrB;;;;IAKDnC,KAAK,EAAE,CAAC,gBAAgB;;AAE5B,CAAC;;AC3CM,IAAMoI,+BAA+B,GAAG;EAC7CxG,MAAM,EAAE,yBAAyB;EAEjC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,oBAAoB,EAAE,6BAA6B;GAChE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;;;IAIvB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CACL,QAAQ,EACR,kBAAkB,EAClB,gBAAgB,EAChB,kBAAkB,EAClB,aAAa,EACb,CAAC,UAAU,CAAC;;AAGlB,CAAC;;ACtCM,IAAMqI,wBAAwB,GAAG;EACtCzG,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,mBAAmB,EAAE,mBAAmB;GACrD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,yBAAyB,EAAE,cAAc;GACtD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;IACxDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,kBAAkB,EAAE,kBAAkB;GACnD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;;;IAIvB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACpCM,IAAMsI,oBAAoB,GAAG;EAClC1G,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,kBAAkB;GACrC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,cAAc,EAAE,SAAS;GACtC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,gCAAgC,EAAE,OAAO,CAAC,EAC3C,CAAC,6BAA6B,EAAE,OAAO,CAAC;GAE3C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC;GAClD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,wBAAwB,EAAE,iBAAiB,CAAC;;;IAIxD8D,UAAU,EAAE;MACV,iBAAiB,EAAE,SAAAoG,aAAC1X,KAAK,EAAEN,CAAC,EAAK;QAC/B,IAAAiY,qBAAA,GAAA9c,cAAA,CAGI4c,oBAAoB,CAACjF,cAAc,CAAChF,SAAS,CAAC,CAAC,CAAC;UAFlDE,QAAQ,GAAAiK,qBAAA;UACRzX,IAAI,GAAAyX,qBAAA;QAEN,IAAM7I,GAAG,GAAGpP,CAAC,CAACgO,QAAQ,CAAC,CAACxN,IAAI,CAACA,IAAI,CAAC;QAClC,IAAI4O,GAAG,EAAE;UACP9O,KAAK,CAACiS,OAAO,eAAAhX,MAAA,CAAc6T,GAAG,UAAM,CAAC;;;KAG1C;;;;IAKDK,KAAK,EAAE;;AAEX,CAAC;;ACjDM,IAAMyI,kCAAkC,GAAG;EAChD7G,MAAM,EAAE,6BAA6B;EAErC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,8BAA8B,EAAE,OAAO,CAAC;GACtD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;IACpDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC;;GAErC;;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,CAAC;;;IAI/B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACxCM,IAAM0I,0BAA0B,GAAG;EACxC9G,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAClC,UAAU,EACV,cAAc,EACd,QAAQ;GAEX;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,+BAA+B,EAC/B,oCAAoC;GAEvC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,sBAAsB,CACvB;IACDqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,EAAE,2BAA2B,CAAC;;;IAIxD8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,OAAO;;AAEnB,CAAC;;AC3CM,IAAM2I,qBAAqB,GAAG;EACnC/G,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qCAAqC,EAAE,oBAAoB;GACxE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,gCAAgC,EAAE,UAAU,CAAC;IACzD2B,KAAK,EAAE,CAAC,iBAAiB,EAAE,UAAU;GACtC;EAEDsC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,cAAc,EAAE,YAAY,CAAC;IACzC4I,MAAM,EAAE,qBAAqB;IAC7BvD,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,CAAC;;;IAIvC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AClCM,IAAM4I,0BAA0B,GAAG;EACxChH,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,aAAa,EAAE,gBAAgB;GAC5C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,sBAAsB,EACtB,CAAC,6BAA6B,EAAE,OAAO,CAAC;GAE3C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,MAAM,EAAE,CAAC,4BAA4B,EAAE,OAAO,CAAC;GAC5D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,EAAE,iBAAiB,CAAC;;;IAIzC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,oBAAoB;;AAE5E,CAAC;;AClCM,IAAM6I,mBAAmB,GAAG;EACjCjH,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,UAAU,EAAE,2BAA2B;GACpD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,0BAA0B,EAC1B,WAAW,EACX,6BAA6B,CAC9B;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACnCM,IAAM8I,uBAAuB,GAAG;EACrClH,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,eAAe,EAAE,YAAY;GAC1C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;;;IAIvB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,mBAAmB,EAAE,YAAY,EAAE,YAAY;;AAE3D,CAAC;;AC/BM,IAAM+I,oBAAoB,GAAG;EAClCnH,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,SAAS,EAAE,QAAQ;GAChC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,QAAQ;GACrB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;;;IAIhC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACnCM,IAAMgJ,kBAAkB,GAAG;EAChCpH,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,oBAAoB,EAAE,CAAC,uBAAuB,EAAE,OAAO,CAAC;GACrE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,8BAA8B,EAAE,OAAO,CAAC,EAAE,iBAAiB;GACzE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,8BAA8B,EAC9B,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAEnD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,oBAAoB;GACjC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mCAAmC,EAAE,yBAAyB,CAAC;;;IAI3E8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACtCM,IAAMiJ,yBAAyB,GAAG;EACvCrH,MAAM,EAAE,oBAAoB;EAE5B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,WAAW;GACxB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,UAAU,EAAE,kCAAkC;GAC3D;EAEDiE,cAAc,EAAE;IACdoB,QAAQ,EAAE,kBAAkB;IAE5BrF,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,qBAAqB,CAAC;;;IAIlC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,iBAAiB;;AAE7B,CAAC;;ACjCM,IAAMkJ,2BAA2B,GAAG;EACzCtH,MAAM,EAAE,sBAAsB;EAE9B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iCAAiC,EAAE,kBAAkB;GAClE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kBAAkB,EAAE,kCAAkC;GACnE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,6BAA6B,CAC9B;IAEDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,gCAAgC,EAAE,sBAAsB;GACrE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,oBAAoB,EACpB,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACvC,kBAAkB,CACnB;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,0BAA0B,EAAE,iBAAiB;;AAEzD,CAAC;;AC5CM,IAAMmJ,+BAA+B,GAAG;EAC7CvH,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,OAAO,EAAE,mBAAmB;GACzC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,sBAAsB,EAAE,SAAS;GAC9C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,sBAAsB,EAAE,gBAAgB,CAAC;GACvD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,EAAE,sBAAsB,CAAC;;;IAIpD8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AC/BM,IAAMoJ,kBAAkB,GAAG;EAChCxH,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qBAAqB;GAClC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,wBAAwB,EAAE,OAAO,CAAC;GAChD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,gBAAgB,CAAC;;;IAI7B8D,UAAU,EAAE;MACV,WAAW,EAAE,QAAQ;MACrB,4BAA4B,EAAE;KAC/B;;;;IAKDnC,KAAK,EAAE;;AAEX,CAAC;;AClCM,IAAMqJ,sBAAsB,GAAG;EACpCzH,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,0BAA0B,EAAE,mBAAmB;GAC5D;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,+BAA+B,EAAE,uBAAuB;GACrE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,gCAAgC,EAAE,OAAO,CAAC;GAE9C;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,uCAAuC,CAAC,EACzC,CAAC,8DAA8D,CAAC,CACjE;;;IAID8D,UAAU,EAAE;MACV,yBAAyB,EAAE,QAAQ;MACnC,yCAAyC,EAAE;KAC5C;;;;IAKDnC,KAAK,EAAE;;AAEX,CAAC;;ACxCM,IAAMsJ,0BAA0B,GAAG;EACxC1H,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,UAAU;GACvB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,kBAAkB,CAAC;IAE/BqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,wBAAwB,CAAC;;;IAIrC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AC7BM,IAAMuJ,yBAAyB,GAAG;EACvC3H,MAAM,EAAE,oBAAoB;EAE5B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,UAAU;GACvB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,cAAc;GAC3B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;IAEpDqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,EAC1C,kBAAkB,EAClB,OAAO,CACR;;;IAID8D,UAAU,EAAE;MACV,sBAAsB,EAAE,SAAAqH,mBAAA3Y,KAAK,EAAI;QAC/B,IAAM0W,OAAO,GAAG1W,KAAK,CAACmE,IAAI,EAAE;QAC5BnE,KAAK,CAAC0D,OAAO,CAAC,UAAU,CAAC,CAACV,WAAW,CAAC0T,OAAO,CAAC;OAC/C;MAED,gBAAgB,EAAE,QAAQ;MAE1B,iCAAiC,EAAE,YAAY;MAE/C,eAAe,EAAE;KAClB;;;;IAKDvH,KAAK,EAAE,CAAC,cAAc;;AAE1B,CAAC;;AChDM,IAAMyJ,wBAAwB,GAAG;EACtC7H,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,UAAU;GAC7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,yBAAyB,EAAE,aAAa;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAEjCqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC;GAClD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;;;IAIlC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACrCM,IAAM0J,6BAA6B,GAAG;EAC3C9H,MAAM,EAAE,wBAAwB;EAEhC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,eAAe;GAClC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC;GAClD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,CAAC;;;IAI5B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,QAAQ,EAAE,YAAY;;AAElC,CAAC;;ACnCM,IAAM2J,iBAAiB,GAAG;EAC/B/H,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,aAAa;GAChC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;IAEhDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,uBAAuB;GACpC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,iBAAiB,EACjB,CAAC,GAAG,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAC/C;;;IAID8D,UAAU,EAAE;MACVC,QAAQ,EAAE,SAAAA,SAAAvR,KAAK,EAAI;QACjB,IAAM4R,SAAS,GAAG5R,KAAK,CAACqD,QAAQ,EAAE;QAClC,IAAIuO,SAAS,CAACjY,MAAM,KAAK,CAAC,IAAIiY,SAAS,CAACpV,GAAG,CAAC,CAAC,CAAC,CAACgG,OAAO,KAAK,KAAK,EAAE;UAChE,OAAO,QAAQ;;QAGjB,OAAO,IAAI;;KAEd;;;;IAKD2M,KAAK,EAAE,CACL,CAAC,eAAe,EAAE,kBAAkB,EAAE,cAAc,EAAE,eAAe,CAAC;;AAG5E,CAAC;;ACnDM,IAAM4J,uBAAuB,GAAG;EACrChI,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,aAAa;GAC9D;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,yCAAyC,EACzC,8BAA8B;GAEjC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,6BAA6B,CAC9B;IAEDqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC;;;IAI1C8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACvCM,IAAM6J,mBAAmB,GAAG;EACjCjI,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,aAAa,EAAE,UAAU;GACtC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,MAAM,CAAC;IAEnBqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,aAAa,EAAE,cAAc;GAC1C;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,oBAAoB,EAAE,oBAAoB,CAAC,EAC5C,oBAAoB,CACrB;;;IAID8D,UAAU,EAAE;MACV,cAAc,EAAE,SAAA2H,YAAAjZ,KAAK,EAAI;QACvB,IAAMsE,IAAI,GAAGtE,KAAK,CAAC5H,IAAI,CAAC,KAAK,CAAC;QAC9BkM,IAAI,CAACpE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;QAC1BoE,IAAI,CAACpE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;QAC3BoE,IAAI,CAACa,QAAQ,CAAC,gBAAgB,CAAC;QAC/BnF,KAAK,CAACkC,MAAM,CAAC,eAAe,CAAC,CAAC+P,OAAO,CAAC3N,IAAI,CAAC;;KAE9C;;;;IAKD6K,KAAK,EAAE;;AAEX,CAAC;;AChDM,IAAM+J,oBAAoB,GAAG;EAClCnI,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gCAAgC,EAAE,mBAAmB;GAClE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kBAAkB,EAAE,CAAC,qBAAqB,EAAE,OAAO,CAAC;GACjE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,gBAAgB,EAAE,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACvE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,2BAA2B,EAAE,kBAAkB,CAAC;;;IAI5D8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,gBAAgB;;AAE5B,CAAC;;AC/BM,IAAMgK,iBAAiB,GAAG;EAC/BpI,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,oBAAoB,EAAE,OAAO,CAAC;GAC5C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,oCAAoC,EAAE,OAAO,CAAC,CAAC;IAC5DqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,gBAAgB,CAAC;;;IAI7B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AChCM,IAAMiK,8BAA8B,GAAG;EAC5CrI,MAAM,EAAE,yBAAyB;EAEjC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,4BAA4B,EAAE,OAAO,CAAC;GACpD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,oBAAoB,EAAE,OAAO,CAAC;GAC5C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,WAAW,EAAE,YAAY,CAAC,EAC3B,YAAY,EACZ,4BAA4B,CAC7B;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACnCM,IAAMkK,gCAAgC,GAAG;EAC9CtI,MAAM,EAAE,2BAA2B;EAEnC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,OAAO,EAAE,gBAAgB;GACtC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,WAAW;GACxB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,+BAA+B,CAAC;;;IAI5C8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,kBAAkB;;AAE9B,CAAC;;ACnCM,IAAMmK,yBAAyB,GAAG;EACvCvI,MAAM,EAAE,oBAAoB;EAE5B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,oBAAoB,EAAE,OAAO,CAAC;GACtD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,SAAS;GACtB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,2BAA2B,EAAE,OAAO,CAAC;GACnD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,kBAAkB,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC;;;IAI7D8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,wBAAwB,EAAE,sBAAsB;;AAE5D,CAAC;;ACrCM,IAAMoK,sBAAsB,GAAG;EACpCxI,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,cAAc,EAAE,iBAAiB,EAAE,kBAAkB;GAClE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,eAAe,EAAE,qBAAqB;GACnD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,gCAAgC,EAAE,KAAK,CAAC;GACtD;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,4BAA4B,CAAC;;;IAIzC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACrCM,IAAMqK,wBAAwB,GAAG;EACtCzI,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,QAAQ;GACzD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kCAAkC,EAAE,cAAc;GAC/D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,yCAAyC,EAAE,SAAS,CAAC,EACtD,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAEnD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,EAAE,gBAAgB,CAAC;;;IAI9C8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AClCM,IAAMsK,0BAA0B,GAAG;EACxC1I,MAAM,EAAE,oBAAoB;EAE5B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,UAAU,EAAE,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC3D;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,QAAQ,EACR,2GAA2G,EAC3G,gBAAgB;GAEnB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,aAAa,CAAC;;;IAI1B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,UAAU,EAAE,YAAY;;AAEpC,CAAC;;ACnCM,IAAMuK,wBAAwB,GAAG;EACtC3I,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qCAAqC;GAClD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,2BAA2B;GACxC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,4BAA4B,EAAE,OAAO,CAAC;GACpD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,EAAE,iBAAiB,CAAC;;;IAI/C8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CACL,gBAAgB,EAChB,yBAAyB,EACzB,yBAAyB;;AAG/B,CAAC;;ACnCM,IAAMwK,sBAAsB,GAAG;EACpC5I,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,8BAA8B,EAAE,oBAAoB;GACjE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,4CAA4C,EAC5C,oBAAoB;GAEvB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,gCAAgC,EAAE,OAAO,CAAC,EAC3C,CAAC,wDAAwD,EAAE,UAAU,CAAC,EACtE,4BAA4B,CAC7B;IAEDqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,2BAA2B,EAAE,kBAAkB,CAAC;;;IAI5D8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACxCM,IAAMyK,mBAAmB,GAAG;EACjC7I,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,WAAW,CAAC;IAExBqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,aAAa,CAAC;;;IAItD8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACjCM,IAAM0K,uBAAuB,GAAG;EACrC9I,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB,EAAE,IAAI;GACnC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,sBAAsB,EACtB,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC,4BAA4B;GAE/B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,2BAA2B,EAC3B,CAAC,gCAAgC,EAAE,UAAU,CAAC,CAC/C;IAEDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,wBAAwB,EACxB,CAAC,eAAe,EAAE,QAAQ,CAAC,EAC3B,QAAQ,CACT;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,eAAe;;AAE3B,CAAC;;AClDM,IAAM2K,mCAAmC,GAAG;EACjD/I,MAAM,EAAE,8BAA8B;EAEtCE,gBAAgB,EAAE,CAAC,gBAAgB,CAAC;EAEpC7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,kBAAkB;GACrC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,mBAAmB,EAAE,wBAAwB;GAC1D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,kCAAkC;GAC/C;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPyW,cAAc,EAAE,KAAK;IAErBvE,SAAS,EAAE,CAAC,mBAAmB,EAAE,8BAA8B,CAAC;;;IAIhE8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,kBAAkB,EAAE,qBAAqB;;AAErD,CAAC;;ACvCM,IAAM4K,4BAA4B,GAAG;EAC1ChJ,MAAM,EAAE,uBAAuB;EAE/B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,2BAA2B,EAAE,UAAU;GACpD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAAE,sBAAsB;GACrE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,wBAAwB,EAAE,OAAO,CAAC,EACnC,CAAC,2BAA2B,EAAE,OAAO,CAAC;GAEzC;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;;;IAIlD8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,sBAAsB;;AAElC,CAAC;;ACxCM,IAAM6K,gCAAgC,GAAG;EAC9CjJ,MAAM,EAAE,4BAA4B;EAEpC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qBAAqB,EAAE,aAAa;GACjD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,2BAA2B,EAAE,sBAAsB;GAChE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAAE,YAAY,CAAC;IAE3EqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,2BAA2B,EAAE,gBAAgB;GAC1D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;;;IAIxD8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACrCM,IAAM8K,mBAAmB,GAAG;EACjClJ,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,gBAAgB,EAChB,cAAc,EACd,CAAC,8BAA8B,EAAE,OAAO,CAAC;GAE5C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,mBAAmB,EAAE,OAAO,CAAC;GAEjC;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,4BAA4B,EAC5B,CAAC,uBAAuB,EAAE,cAAc,CAAC,CAC1C;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,cAAc,EAAE,aAAa,EAAE,UAAU,EAAE,WAAW;;AAElE,CAAC;;AC/CM,IAAM+K,qBAAqB,GAAG;EACnCnJ,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,UAAU;GAC7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,OAAO;GACpB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,kBAAkB,EAAE,iBAAiB,CAAC;GACpD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,UAAU;GACvB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,wBAAwB,EAAE,KAAK,CAAC;GAC9C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,CAAC;;;IAItB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW;;AAEhD,CAAC;;ACnCM,IAAMgL,qBAAqB,GAAG;EACnCpJ,MAAM,EAAE,eAAe;EAEvBE,gBAAgB,EAAE,CAChB,gBAAgB,EAChB,WAAW,EACX,WAAW,EACX,iBAAiB,EACjB,WAAW,CACZ;EAED7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI,EAAE,kBAAkB;GACrC;EAEDgE,MAAM,EAAE;;IAENhE,SAAS,EAAE,CAAC,+CAA+C,EAAE,SAAS;GACvE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,MAAM,EACN,gBAAgB,CACjB;IAEDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,EAAE,aAAa,CAAC;;;IAI3C8D,UAAU,EAAE;MACV,gBAAgB,EAAE,QAAQ;MAC1B,eAAe,EAAE,YAAY;MAC7B,gBAAgB,EAAE,QAAQ;MAC1B,eAAe,EAAE,YAAY;MAC7B,iBAAiB,EAAE,QAAQ;MAC3B,gBAAgB,EAAE;KACnB;;;;IAKDnC,KAAK,EAAE,CACL,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,EACjB,cAAc;;AAGpB,CAAC;;AC9DM,IAAMiL,mBAAmB,GAAG;EACjCrJ,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAChC,6BAA6B;GAEhC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,mBAAmB,EAAE,OAAO,CAAC;GAC3C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC,EAAE,WAAW;GAClE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,wBAAwB,EAAE,kBAAkB,CAAC;;;IAIzD8D,UAAU,EAAE;MACV,cAAc,EAAE,SAAA+I,WAAAra,KAAK,EAAI;QACvB,IAAM8O,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;QAC7BF,KAAK,CAAC4F,MAAM,EAAE,CAAC5C,WAAW,uBAAA/H,MAAA,CAAsB6T,GAAG,kBAAc,CAAC;OACnE;MACD,UAAU,EAAE;KACb;;;;IAKDK,KAAK,EAAE,CAAC,QAAQ;;AAEpB,CAAC;;AC5CM,IAAMmL,oBAAoB,GAAG;EAClCvJ,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,MAAM,EAAE,IAAI;GACzB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,eAAe;GAC5B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,WAAW,CAAC;IAExBqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,MAAM;GACnB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,OAAO,CAAC;;;IAIpB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CACL,mBAAmB,EACnB,YAAY,EACZ,8BAA8B,EAC9B,cAAc;;AAGpB,CAAC;;AC1CM,IAAMoL,yBAAyB,GAAG;EACvCxJ,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,yBAAyB,EAAE,OAAO,CAAC;GACjD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,8BAA8B,EAAE,OAAO,CAAC,CAAC;IACtD4I,MAAM,EAAE,oBAAoB;IAC5BvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,oBAAoB,EAAE,wBAAwB;GAC3D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,gCAAgC,EAChC,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CACjD;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACxCM,IAAMqL,uBAAuB,GAAG;EACrCzJ,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,wBAAwB;GACrC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,+DAA+D,CAChE;IAED8D,UAAU,EAAE;MACVC,QAAQ,EAAE,SAAAA,SAAAvR,KAAK,EAAI;QACjB,IAAM4R,SAAS,GAAG5R,KAAK,CAACqD,QAAQ,EAAE;QAClC,IAAIuO,SAAS,CAACjY,MAAM,KAAK,CAAC,IAAIiY,SAAS,CAACpV,GAAG,CAAC,CAAC,CAAC,CAACgG,OAAO,KAAK,KAAK,EAAE;UAChE,OAAO,QAAQ;;QAEjB,OAAO,IAAI;;;;AAInB,CAAC;;AClCM,IAAMiY,0BAA0B,GAAG;EACxC1J,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,aAAa;GAC1B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,gBAAgB;;AAEhC,CAAC;;AC1BM,IAAMkN,yBAAyB,GAAG;EACvC3J,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,gBAAgB;GACjE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kBAAkB;GAC/B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAC/B,CAAC,gCAAgC,EAAE,SAAS,CAAC;GAEhD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAClC,CAAC,2BAA2B,EAAE,SAAS,CAAC,EACxC,CAAC,wBAAwB,EAAE,SAAS,CAAC,EACrC,CAAC,4BAA4B,EAAE,SAAS,CAAC,EACzC,CAAC,sBAAsB,EAAE,KAAK,CAAC;GAElC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CACE,yBAAyB,EACzB,mGAAmG,CACpG,CACF;;;IAID8D,UAAU,EAAE;MACVqJ,UAAU,EAAE;KACb;;;;IAKDxL,KAAK,EAAE,CAAC,gBAAgB;;AAE5B,CAAC;;ACtDM,IAAMyL,qBAAqB,GAAG;EACnC7J,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,sBAAsB,EACtB,gDAAgD;GAEnD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;;;IAInD8D,UAAU,EAAE;MACV1M,GAAG,EAAE,SAAAA,IAAA5E,KAAK,EAAI;QACZ,IAAM8O,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,eAAe,CAAC;QACvC,IAAI4O,GAAG,KAAK,EAAE,EAAE;UACd9O,KAAK,CAACE,IAAI,CAAC,KAAK,EAAE4O,GAAG,CAAC;;;KAG3B;;;;IAKDK,KAAK,EAAE;;AAEX,CAAC;;AC7CM,IAAM0L,0BAA0B,GAAG;EACxC9J,MAAM,EAAE,oBAAoB;EAE5B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,mBAAmB;GAChC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,0BAA0B;GACvC;EAEDiE,cAAc,EAAE;;IAEdjE,SAAS,EAAE,CAAC,sDAAsD;GACnE;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,CAAC;;;IAI3B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,iBAAiB;;AAE7B,CAAC;;AC5BM,IAAM2L,kBAAkB,GAAG;EAChC/J,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE;;;GAGZ;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,yBAAyB,EAAE,UAAU,CAAC,EACvC,CAAC,6CAA6C,EAAE,UAAU,CAAC;GAE9D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CACT,CAAC,0BAA0B,EAAE,OAAO,CAAC,EACrC,wBAAwB;GAE3B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC;;;IAIhC8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AC3CM,IAAM4L,qBAAqB,GAAG;EACnChK,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CACT,qCAAqC,EACrC,qCAAqC;GAExC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,mDAAmD;GAChE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,kEAAkE,EAClE,+DAA+D;GAElE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,CAAC,oCAAoC,CAAC;;IACtC,CACE,sFAAsF;;IACtF,6DAA6D;KAC9D;;IACD,CAAC,6DAA6D,CAAC;;IAC/D,CAAC,oCAAoC,CAAC;;IACtC,kCAAkC,CACnC;;;IAID8D,UAAU,EAAE;MACV,iBAAiB,EAAE,SAAA0J,WAAAhb,KAAK,EAAI;;QAE1B,IAAMsE,IAAI,GAAGtE,KAAK,CAAC5H,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAM6iB,KAAK,GAAGjb,KAAK,CAACkb,GAAG,CAAC,kBAAkB,CAAC;QAC3C,IAAI5W,IAAI,CAAC3K,MAAM,KAAK,CAAC,IAAIshB,KAAK,EAAE;UAC9B3W,IAAI,CAACpE,IAAI,CAAC,KAAK,EAAE+a,KAAK,CAAChiB,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAACnB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;UACnE,OAAOwM,IAAI;;QAEb,OAAOtE,KAAK;;KAEf;;;;IAKDmP,KAAK,EAAE,CACL,OAAO,EACP,6BAA6B,EAC7B,uDAAuD;;AAG7D,CAAC;;AC7DM,IAAMgM,gBAAgB,GAAG;EAC9BpK,MAAM,EAAE,UAAU;EAElB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,kBAAkB;GAC/B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,sBAAsB;GACnC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,CAAC;IAE5BuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CACL,oBAAoB,EACpB,8BAA8B,EAC9B,SAAS,EACT,oBAAoB;;AAG1B,CAAC;;ACrCM,IAAMiM,qBAAqB,GAAG;EACnCrK,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,6BAA6B;GAC1C;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,QAAQ,CAAC;IACrB4I,MAAM,EAAE,mBAAmB;IAC3BvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,2CAA2C,CAAC;IAExDuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC9BM,IAAMkM,iBAAiB,GAAG;EAC/BtK,MAAM,EAAE,WAAW;EAEnB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,iBAAiB,EAAE,UAAU,CAAC;GAC5C;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,CAAC;IAE3BuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC5BM,IAAMmM,oBAAoB,GAAG;EAClCvK,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,SAAS,EAAE,kBAAkB;GAC1C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,sBAAsB,EAAE,OAAO,CAAC;GAC9C;EAEDqE,GAAG,EAAE,IAAI;EAETa,OAAO,EAAE;IACPlF,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,MAAM,CAAC;IAEnBuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,WAAW,EAAE,qBAAqB,EAAE,MAAM,EAAE,cAAc;;AAEtE,CAAC;;AClCM,IAAMoM,qBAAqB,GAAG;EACnCxK,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,SAAS,CAAC;IACtB4I,MAAM,EAAE,YAAY;IACpBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,CAAC;IAE3BuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,iBAAiB;;AAE3D,CAAC;;AChCM,IAAMqM,sBAAsB,GAAG;EACpCzK,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,OAAO;GACpB;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,gBAAgB,CAAC;IAC7B4I,MAAM,EAAE,YAAY;IACpBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,CAAC;IAE5BuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE;MACVmK,KAAK,EAAE,SAAAA,MAAAzb,KAAK,EAAI;QACdA,KAAK,CAACE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;;KAE9B;IAEDiP,KAAK,EAAE;;AAEX,CAAC;;AChCM,IAAMuM,4BAA4B,GAAG;EAC1C3K,MAAM,EAAE,wBAAwB;EAEhC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,4BAA4B;GACzC;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,oCAAoC,EAAE,OAAO,CAAC;GAC5D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,mCAAmC;GAChD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,0CAA0C,CAAC;IAEvDuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,iBAAiB;;AAE7B,CAAC;;AC9BM,IAAMwM,mBAAmB,GAAG;EACjC5K,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,OAAO;GACpB;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,4BAA4B,CAAC;IACzC4I,MAAM,EAAE,YAAY;IACpBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,YAAY,CAAC;IAEzBuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC5BM,IAAMyM,kBAAkB,GAAG;EAChC7K,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,MAAM;GACnB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CACE,0BAA0B,EAC1B,OAAO,EACP,UAAAqO,GAAG,EAAI;MACL,IAAMC,IAAI,GAAGjN,IAAI,CAAC5U,KAAK,CAAC4hB,GAAG,CAAC;MAC5B,OAAOC,IAAI,CAACC,IAAI,CAACC,YAAY;KAC9B,CACF;GAEJ;EAEDnK,GAAG,EAAE;IACHrE,SAAS,EAAE;;;GAGZ;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CACE,0BAA0B,EAC1B,OAAO,EACP,UAAAqO,GAAG,EAAI;MACL,IAAMC,IAAI,GAAGjN,IAAI,CAAC5U,KAAK,CAAC4hB,GAAG,CAAC;MAC5B,OAAOC,IAAI,CAACC,IAAI,CAACE,KAAK,CAACC,aAAa;KACrC,CACF;GAEJ;EAED5gB,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,CAAC;;;IAItB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACvDM,IAAMgN,mBAAmB,GAAG;EACjCpL,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,aAAa;GAC1B;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE,IAAI;EAEpBI,GAAG,EAAE,IAAI;EAETa,OAAO,EAAE;IACPlF,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,YAAY,CAAC;IAEzB8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,UAAU,EAAE,OAAO;;AAE/B,CAAC;;AC5BM,IAAMiN,mBAAmB,GAAG;EACjCrL,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,OAAO;GACpB;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,OAAO,CAAC;IACpB4I,MAAM,EAAE,aAAa;IACrBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,CAAC;IAE5BuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC5BM,IAAMkN,oBAAoB,GAAG;EAClCtL,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,YAAY;GACzB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,6BAA6B;GAC1C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,yBAAyB,CAAC;IACtC4I,MAAM,EAAE,aAAa;IACrBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;IAEhCuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AClCM,IAAMmN,sBAAsB,GAAG;EACpCvL,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,YAAY;GACzB;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,uCAAuC,CAAC;IACpDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,OAAO,CAAC;IAEpB8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,kBAAkB;;AAE9B,CAAC;;AC7BM,IAAMoN,uBAAuB,GAAG;EACrCxL,MAAM,EAAE,mBAAmB;EAE3BE,gBAAgB,EAAE,CAChB,oBAAoB,EACpB,0BAA0B,EAC1B,oBAAoB,CACrB;EAED7G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,cAAc;GAC3B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,SAAS;GACtB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,oCAAoC,EAAE,OAAO,CAAC;GAC5D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;IAEvBuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,cAAc;;AAE1B,CAAC;;ACtCM,IAAMqN,wBAAwB,GAAG;EACtCzL,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iCAAiC,EAAE,oBAAoB;GACpE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,aAAa,CAAC;IAC1B4I,MAAM,EAAE,aAAa;IACrBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;IAEvBuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,eAAe;;AAEtD,CAAC;;AChCM,IAAMsN,0BAA0B,GAAG;EACxC1L,MAAM,EAAE,qBAAqB;EAE7B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,kCAAkC,EAAE,OAAO,CAAC;GAC1D;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;IAEvBuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC5BM,IAAMuN,qBAAqB,GAAG;EACnC3L,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,kBAAkB,EAAE,iBAAiB;GAClD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,oBAAoB,EAAE,aAAa;GAChD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,0CAA0C,EAC1C,0EAA0E,CAC3E;IACDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,yBAAyB,EACzB,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAC1C;IAEDuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CACL,yBAAyB,EACzB,8BAA8B,EAC9B,sCAAsC,EACtC,gCAAgC;;AAGtC,CAAC;;AC1CM,IAAMwN,uBAAuB,GAAG;EACrC5L,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,kCAAkC;GAC/C;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,qBAAqB,CAAC;IAElC8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC1BM,IAAMyN,qBAAqB,GAAG;EACnC7L,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,oBAAoB;GACjC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,SAAS;GACtB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,OAAO,CAAC;IACpB4I,MAAM,EAAE,oBAAoB;IAC5BvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,CAAC;IAE/B8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC9BM,IAAM0N,oBAAoB,GAAG;EAClC9L,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,mBAAmB;GAChC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,6DAA6D,CAAC;IAE1E8D,UAAU,EAAE;MACV,gBAAgB,EAAE,SAAAwL,aAAA9c,KAAK,EAAI;QACzB,IAAM+c,SAAS,GAAG/c,KAAK,CAACmE,IAAI,EAAE;QAC9BnE,KAAK,CAACgD,WAAW,CAAC+Z,SAAS,CAAC;;KAE/B;IAED5N,KAAK,EAAE,CAAC,YAAY;;AAExB,CAAC;;ACjCM,IAAM6N,qBAAqB,GAAG;EACnCjM,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,wBAAwB;GACrC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,2BAA2B,EAAE,UAAU,CAAC;GACtD;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,gBAAgB,CAAC;IAE7B8D,UAAU,EAAE;MACV,2BAA2B,EAAE,SAAA2L,uBAAAjd,KAAK,EAAI;QACpC,IAAM8O,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;QAC7BF,KAAK,CAACE,IAAI,CAAC,KAAK,EAAE4O,GAAG,CAAChX,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;KAErE;IAEDqX,KAAK,EAAE,CAAC,iBAAiB,EAAE,kBAAkB;;AAEjD,CAAC;;ACjCM,IAAM+N,kBAAkB,GAAG;EAChCnM,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,YAAY;GACzB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC,EAAE,WAAW;GAClE;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,oBAAoB,EAAE,UAAU,CAAC;GAErC;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;IAEhC8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC/BM,IAAMgO,wBAAwB,GAAG;EACtCpM,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,qCAAqC,EAAE,qBAAqB;GACzE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,qBAAqB,EAAE,OAAO,CAAC,EAChC,+BAA+B;GAElC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,gCAAgC,EAAE,UAAU,CAAC;GAEjD;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,uCAAuC,EACvC,yBAAyB,CAC1B;IAED8D,UAAU,EAAE;MACV,cAAc,EAAE,SAAA8L,YAAApd,KAAK,EAAI;QACvB,IAAM8O,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;QAC7BF,KAAK,CAACE,IAAI,CAAC,KAAK,EAAE4O,GAAG,CAAChX,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;KAErE;IAEDqX,KAAK,EAAE,CAAC,+BAA+B;;AAE3C,CAAC;;AC1CM,IAAMkO,oBAAoB,GAAG;EAClCtM,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,wBAAwB,EAAE,IAAI;GAC3C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iBAAiB,EAAE,iBAAiB;GACjD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,MAAM,CAAC;IACnB4I,MAAM,EAAE,aAAa;IACrBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,cAAc,EAAE,UAAU,CAAC;IAEvC8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,cAAc;;AAE1B,CAAC;;AC9BM,IAAMmO,uBAAuB,GAAG;EACrCvM,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,IAAI;GACrD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,yBAAyB,EAAE,uBAAuB;GAC/D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,8BAA8B,EAAE,SAAS,CAAC,EAC3C,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAC5C;IACDqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,kCAAkC,EAAE,OAAO,CAAC,EAC7C,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAErC;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,gBAAgB,EAAE,UAAU,CAAC;IAEzCuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,eAAe;;AAE3B,CAAC;;ACrCM,IAAMoO,mBAAmB,GAAG;EACjCxM,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,mBAAmB,CAAC;IAChC4I,MAAM,EAAE,WAAW;IACnBvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,YAAY,CAAC;IAEzBuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,mBAAmB;;AAE/B,CAAC;;AC5BM,IAAMqO,sBAAsB,GAAG;EACpCzM,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,YAAY,EAAE,yBAAyB;GACpD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,UAAU;GACvB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;IAEtD4I,MAAM,EAAE,mBAAmB;IAE3BvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,qBAAqB,EAAE,aAAa,CAAC;IAEjD8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AChCM,IAAMsO,uBAAuB,GAAG;EACrC1M,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,iBAAiB,EAAE,UAAU,CAAC;GAC5C;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;IAEhCuE,cAAc,EAAE,KAAK;IAErBT,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,8BAA8B;;AAE1C,CAAC;;AC5BM,IAAMuO,gBAAgB,GAAG;EAC9B3M,MAAM,EAAE,UAAU;EAElB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,oCAAoC,EAAE,eAAe;GAClE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC,sBAAsB;GAEzB;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,qCAAqC,EAAE,OAAO,CAAC,EAChD,CAAC,MAAM,EAAE,UAAU,CAAC;GAEvB;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,gCAAgC,EAAE,aAAa;GAC5D;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT,kDAAkD,EAClD,wBAAwB,CACzB;IAED8D,UAAU,EAAE;MACV,oBAAoB,EAAE,SAAAqM,gBAAA3d,KAAK,EAAI;QAC7B,IAAM4d,YAAY,GAAG5d,KAAK,CAACE,IAAI,CAAC,eAAe,CAAC;QAChD,IAAM4O,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;QAC7B,IAAMjI,GAAG,GAAG+B,GAAG,CAAC2C,OAAO,CAACmS,GAAG,EAAE8O,YAAY,CAAC;QAC1C5d,KAAK,CAACE,IAAI,CAAC,KAAK,EAAEjI,GAAG,CAAC;;KAEzB;IAEDkX,KAAK,EAAE,CAAC,gBAAgB,EAAE,MAAM,EAAE,eAAe,EAAE,qBAAqB;;AAE5E,CAAC;;AChDM,IAAM0O,sBAAsB,GAAG;EACpC9M,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,iCAAiC,EAAE,OAAO,CAAC;GACzD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,kBAAkB,CAAC;IAE/B8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE;;AAEX,CAAC;;AC5BM,IAAM2O,uBAAuB,GAAG;EACrC/M,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,qBAAqB;GAClC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,aAAa,EAAE,UAAU,CAAC;GACxC;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC,EAAE,eAAe;GACnE;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,eAAe,CAAC;IAE5B8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,YAAY;;AAExB,CAAC;;AC9BM,IAAM4O,qBAAqB,GAAG;EACnChN,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,mBAAmB;GAChC;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,eAAe;GAC5B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,wCAAwC,EAAE,OAAO,CAAC;GAChE;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,gBAAgB;GAC7B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;IAEhC8D,UAAU,EAAE,EAAE;IAEdnC,KAAK,EAAE,CAAC,YAAY;;AAExB,CAAC;;AC9BM,IAAM6O,uBAAuB,GAAG;EACrCjN,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,YAAY,EAAE,gBAAgB;GAC3C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,uBAAuB;GACpC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,SAAS,CAAC;;IAEtB4I,MAAM,EAAE,sBAAsB;IAC9BvD,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;;;IAIvB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;AClCM,IAAM8O,qBAAqB,GAAG;EACnClN,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,OAAO;GACxD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC,+BAA+B;GAElC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,iCAAiC,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC;GACzE;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CACT,CAAC,6BAA6B,EAAE,OAAO,CAAC,EACxC,0BAA0B;GAE7B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CACT,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAClC,CAAC,kCAAkC,EAAE,KAAK,CAAC;GAE9C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,2BAA2B,EAAE,sBAAsB;GAChE;EAED0Q,MAAM,EAAE;IACNzX,KAAK,EAAE;MACL+G,SAAS,EAAE,CAAC,oBAAoB,EAAE,QAAQ;;;AAGhD,CAAC;;ACzCM,IAAM2Q,mBAAmB,GAAG;EACjCpN,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,eAAe;GAC5B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CACT,uEAAuE;GAE1E;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,gBAAgB,CAAC;;;IAI7B8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACzBM,IAAMiP,qBAAqB,GAAG;EACnCrN,MAAM,EAAE,gBAAgB;EAExB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,SAAS;GACtB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,kBAAkB;GAC/B;EAEDiE,cAAc,EAAE,IAAI;EAEpBiB,OAAO,EAAE;IACPlF,SAAS,EAAE,CAAC,UAAU;GACvB;EAEDgF,cAAc,EAAE,IAAI;EAEpBlX,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,UAAU,CAAC;;;IAIvB8D,UAAU,EAAE;MACV,SAAS,EAAE,IAAI;MACf,kBAAkB,EAAE,GAAG;MACvB+M,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;KACV;;;;IAKDnP,KAAK,EAAE,CAAC,eAAe,EAAE,oBAAoB;;AAEjD,CAAC;;ACpCM,IAAMoP,uBAAuB,GAAG;EACrCxN,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,MAAM,CAAC;IACnBqF,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,2BAA2B,CAAC;IACxC2B,KAAK,EAAE,CACL,MAAM,EACN,QAAQ,EACR,sCAAsC,EACtC,SAAS,EACT,0BAA0B;;AAGhC,CAAC;;AC9BM,IAAMqP,kCAAkC,GAAG;EAChDzN,MAAM,EAAE,6BAA6B;EAErC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAED0Q,MAAM,EAAE;IACNO,QAAQ,EAAE;MACRjR,SAAS,EAAE,CAAC,YAAY,CAAC;MACzB8D,UAAU,EAAE;;GAEf;EAEDG,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,SAAS,CAAC;IACtB4I,MAAM,EAAE,sBAAsB;IAC9BvD,QAAQ,EAAE;GACX;EAEDL,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,iCAAiC,CAAC;IAC9CuE,cAAc,EAAE,KAAK;IAErB5C,KAAK,EAAE,CACL,SAAS,EACT,IAAI,EACJ,SAAS,EACT,WAAW,EACX,kBAAkB,EAClB,kDAAkD;;AAGxD,CAAC;;ACrCM,IAAMuP,kBAAkB,GAAG;EAChC3N,MAAM,EAAE,aAAa;EAErB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,4BAA4B,EAAE,OAAO,CAAC;GACpD;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,qBAAqB,EAAE,OAAO,CAAC;GAC7C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;;;IAIzB8D,UAAU,EAAE;MACV4B,EAAE,EAAE,SAAAA,GAAAlT,KAAK,EAAI;;;QAGXA,KAAK,CAACE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;;;QAGtB,OAAO,IAAI;OACZ;MACDyR,EAAE,EAAE,SAAAA,GAAA3R,KAAK,EAAI;;;QAGXA,KAAK,CAACE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;;;;QAItBF,KAAK,CAAC2e,KAAK,CAAC,SAAS,CAAC;OACvB;MACDC,EAAE,EAAE,SAAAA,GAAA5e,KAAK,EAAI;;;QAGXA,KAAK,CAACE,IAAI,CAAC,OAAO,EAAE,qBAAqB,CAAC;;;;AAIlD,CAAC;;AC7CM,IAAM2e,oBAAoB,GAAG;EAClC9N,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,WAAW,EAAE,4BAA4B;GACtD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,OAAO,EAAE,+BAA+B,CAAC;IACrDqF,QAAQ,EAAE,kBAAkB;IAC5BuD,MAAM,EAAE;GACT;EAED5D,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC;;;IAI3C8D,UAAU,EAAE;MACVwN,EAAE,EAAE,KAAK;MACTC,EAAE,EAAE;KACL;;;;IAKD5P,KAAK,EAAE;;AAEX,CAAC;;ACpCD;AACA;AACA,AAAO,IAAM6P,wBAAwB,GAAG;EACtCjO,MAAM,EAAE,mBAAmB;EAE3B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,8BAA8B;GAC3C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,6BAA6B;GAC1C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CACT,CAAC,yBAAyB,EAAE,UAAU,CAAC,EACvC,CAAC,4BAA4B,EAAE,UAAU,CAAC;GAE7C;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC;GAClD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,mBAAmB,CAAC;;;IAIhC8D,UAAU,EAAE;MACVzO,CAAC,EAAE,SAAAA,EAAA7C,KAAK,EAAI;QACV,IAAI,CAACA,KAAK,CAAC2J,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,IAAI;QAC9C,IAAIsV,CAAC,GAAG,EAAE;QACV,IAAIhS,CAAC,GAAG,CAAC;QACT,KAAK,IAAIiS,CAAC,GAAGlf,KAAK,CAACnI,IAAI,EAAE,EAAEoV,CAAC,GAAGiS,CAAC,CAACvlB,MAAM,EAAEsT,CAAC,IAAI,CAAC,EAAE;UAC/C,IAAMkS,CAAC,GAAGD,CAAC,CAACE,UAAU,CAACnS,CAAC,CAAC;UACzBkS,CAAC,KAAK,GAAG,GACJF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,GAAG,GACRF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,GAAG,GACRF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,GAAG,GACRF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,EAAE,GACPF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,EAAE,GACPF,CAAC,IAAI,IAAI,GACVE,CAAC,GAAG,EAAE,KAAKF,CAAC,IAAII,MAAM,CAACC,YAAY,CAACH,CAAC,GAAG,CAAC,CAAC,CAAC;;QAGjDnf,KAAK,CAACmE,IAAI,CAAC8a,CAAC,CAAC;QACbjf,KAAK,CAAC0F,WAAW,CAAC,YAAY,CAAC;QAC/B1F,KAAK,CAACmF,QAAQ,CAAC,cAAc,CAAC;QAC9B,OAAO,IAAI;OACZ;MACDjC,GAAG,EAAE,SAAAA,IAAAlD,KAAK,EAAI;QACZ,IAAI,CAACA,KAAK,CAAC2J,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,IAAI;QAC9C,IAAIsV,CAAC,GAAG,EAAE;QACV,IAAIhS,CAAC,GAAG,CAAC;QACT,KAAK,IAAIiS,CAAC,GAAGlf,KAAK,CAACnI,IAAI,EAAE,EAAEoV,CAAC,GAAGiS,CAAC,CAACvlB,MAAM,EAAEsT,CAAC,IAAI,CAAC,EAAE;UAC/C,IAAMkS,CAAC,GAAGD,CAAC,CAACE,UAAU,CAACnS,CAAC,CAAC;UACzBkS,CAAC,KAAK,GAAG,GACJF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,GAAG,GACRF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,GAAG,GACRF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,GAAG,GACRF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,EAAE,GACPF,CAAC,IAAI,GAAG,GACTE,CAAC,KAAK,EAAE,GACPF,CAAC,IAAI,IAAI,GACVE,CAAC,GAAG,EAAE,KAAKF,CAAC,IAAII,MAAM,CAACC,YAAY,CAACH,CAAC,GAAG,CAAC,CAAC,CAAC;;QAGjDnf,KAAK,CAACmE,IAAI,CAAC8a,CAAC,CAAC;QACbjf,KAAK,CAAC0F,WAAW,CAAC,YAAY,CAAC;QAC/B1F,KAAK,CAACmF,QAAQ,CAAC,cAAc,CAAC;QAC9B,OAAO,IAAI;;KAEd;;;;IAKDgK,KAAK,EAAE;;AAEX,CAAC;;AC7FM,IAAMoQ,oBAAoB,GAAG;EAClCxO,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,WAAW;GACxB;EAEDgE,MAAM,EAAE,IAAI;EAEZC,cAAc,EAAE,IAAI;EAEpBI,GAAG,EAAE,IAAI;EAETW,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,2BAA2B,EAAE,SAAS,CAAC;GACrD;EAEDlS,OAAO,EAAE;;IAEPkS,SAAS,EAAE,CAAC,CAAC,gBAAgB,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;;;IAIxE8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CAAC,YAAY,EAAE,UAAU;;AAEpC,CAAC;;AC9BM,IAAMqQ,uBAAuB,GAAG;EACrCzO,MAAM,EAAE,kBAAkB;EAE1B3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,sCAAsC;GACnD;;;;EAKDiE,cAAc,EAAE;IACdjE,SAAS,EAAE;;;GAGZ;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,gCAAgC;GAC7C;;;;EAKDgF,cAAc,EAAE;IACdhF,SAAS,EAAE;;;GAGZ;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CACT;;;IAGE,gDAAgD,EAChD,kBAAkB,CACnB,CACF;;;IAID8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;ACpDM,IAAMsQ,uBAAuB,GAAG;EACrC1O,MAAM,EAAE,iBAAiB;;;;;;;EAQzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,OAAO;GACpB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,oCAAoC;GACjD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,cAAc,EAAE,UAAU,CAAC;GACzC;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,4BAA4B;GACzC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,6BAA6B,CAAC;;;IAI1C8D,UAAU,EAAE;MACV4B,EAAE,EAAE,SAAAA,GAAAlT,KAAK,EAAI;;;;QAIXA,KAAK,CAAC0f,MAAM,CAAC,SAAS,CAAC;;KAE1B;;;;IAKDvQ,KAAK,EAAE;;IAEL,0BAA0B,EAC1B,iBAAiB;;;IAIjB,cAAc;;IAGd,UAAU,EAEV,OAAO,EACP,UAAU;;AAGhB,CAAC;;AC9DM,IAAMwQ,mBAAmB,GAAG;EACjC5O,MAAM,EAAE,cAAc;EAEtB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,gBAAgB;GACjE;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,+CAA+C;GAC5D;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,+BAA+B,EAAE,SAAS,CAAC;GACzD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,6BAA6B,CAAC;;;IAI1C8D,UAAU,EAAE;;;;MAIV,aAAa,EAAE,SAAAsO,WAAA5f,KAAK,EAAI;QACtB,IAAI,CAACA,KAAK,CAAC0D,OAAO,CAAC,GAAG,CAAC,CAAC/J,MAAM,EAAE;UAC9B,IAAMiJ,WAAW,GAAG5C,KAAK,CAACvB,IAAI,CAAC,GAAG,CAAC;UACnC,IAAImE,WAAW,EAAE;YACf5C,KAAK,CAACkC,MAAM,EAAE;YACdU,WAAW,CAACqP,OAAO,CAACjS,KAAK,CAAC;;;;KAIjC;;;;IAKDmP,KAAK,EAAE,CACL,iBAAiB,EACjB,yBAAyB,EACzB,OAAO,EACP,uBAAuB;;AAG7B,CAAC;;ACrDM,IAAM0Q,iBAAiB,GAAG;EAC/B9O,MAAM,EAAE,iBAAiB;EAEzB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,8BAA8B;GAC3C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,sBAAsB,CAAC;IACnCqF,QAAQ,EAAE;GACX;EAEDhB,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,iBAAiB;GAC9B;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE;;IAET,CAAC,uBAAuB,EAAE,OAAO,CAAC;;;IAGlC,CAAC,2BAA2B,EAAE,SAAS,CAAC;;;IAGxC,0BAA0B;GAE7B;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,iBAAiB,CAAC;IAC9B2B,KAAK,EAAE,CACL,cAAc,EACd,iBAAiB,EACjB,OAAO,EACP,WAAW,EACX,sBAAsB,EACtB,kBAAkB,EAClB,YAAY,EACZ,cAAc;;AAGpB,CAAC;;AC9CM,IAAM2Q,qBAAqB,GAAG;EACnC/O,MAAM,EAAE,eAAe;EAEvB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,qCAAqC,EAAE,OAAO,CAAC;GAC7D;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,0BAA0B;GACvC;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,WAAW,CAAC;;;IAIxB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE,CACL,sBAAsB,EACtB,OAAO,EACP,wCAAwC;;AAG9C,CAAC;;ACvCM,IAAM4Q,kCAAkC,GAAG;EAChDhP,MAAM,EAAE,6BAA6B;EAErC3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,wBAAwB;GACrC;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,gCAAgC,EAAE,OAAO,CAAC;GACxD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,CAAC,6BAA6B,EAAE,OAAO,CAAC;GACrD;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,sBAAsB,CAAC;IAEnC2B,KAAK,EAAE,CAAC,SAAS;;AAErB,CAAC;;AC5BM,IAAM6Q,iBAAiB,GAAG;EAC/BjP,MAAM,EAAE,YAAY;EAEpB3G,KAAK,EAAE;IACLoD,SAAS,EAAE,CAAC,IAAI;GACjB;EAEDgE,MAAM,EAAE;IACNhE,SAAS,EAAE,CAAC,aAAa,EAAE,gBAAgB;GAC5C;EAEDiE,cAAc,EAAE;IACdjE,SAAS,EAAE,CAAC,CAAC,sBAAsB,EAAE,UAAU,CAAC;GACjD;EAEDqE,GAAG,EAAE;IACHrE,SAAS,EAAE,CAAC,OAAO;GACpB;EAEDgF,cAAc,EAAE;IACdhF,SAAS,EAAE,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC;GAC/C;EAEDlS,OAAO,EAAE;IACPkS,SAAS,EAAE,CAAC,QAAQ,CAAC;;;IAIrB8D,UAAU,EAAE,EAAE;;;;IAKdnC,KAAK,EAAE;;AAEX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCD,iBAAe8Q,YAAA,CAAYC,gBAAgB,CAAC,CAAC3lB,MAAM,CAAC,UAACC,GAAG,EAAE0J,GAAG,EAAK;EAChE,IAAM2M,SAAS,GAAGqP,gBAAgB,CAAChc,GAAG,CAAC;EACvC,OAAAvF,eAAA,CAAAA,eAAA,KACKnE,GAAG,GACHwW,qBAAqB,CAACH,SAAS,CAAC;AAEvC,CAAC,EAAE,EAAE,CAAC;;ACNN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAe,SAASsP,YAAYA,CAACloB,GAAG,EAAE;EACxC,IAAMmoB,iBAAiB,GAAGH,YAAA,CAAY/O,aAAa,CAAC;EACpD,IAAMmP,cAAc,GAAGJ,YAAA,CAAYK,UAAU,CAAC;EAE9C,IAAMpc,GAAG,GAAGkc,iBAAiB,CAACnlB,MAAM,CAAColB,cAAc,CAAC,CAACjoB,IAAI,CAAC,UAAA2Y,MAAM,EAAI;IAClE,IAAMwP,WAAW,GAAGtoB,GAAG,CAACyC,QAAQ,CAACqW,MAAM,CAAC;IACxC,IAAMF,SAAS,GAAGK,aAAa,CAACH,MAAM,CAAC,IAAIuP,UAAU,CAACvP,MAAM,CAAC;IAE7D,IAAI,CAACwP,WAAW,EAAE,OAAO,KAAK;;;IAG9B,IAAI,CAAC1P,SAAS,CAAC2P,aAAa,EAAE,OAAO,IAAI;;;IAGzC,OAAO3P,SAAS,CAAC2P,aAAa,CAACC,IAAI,CAAC,UAAArmB,IAAI,EAAI;MAC1C,IAAMsmB,GAAG,GAAG,IAAIjoB,MAAM,CAAC2B,IAAI,CAAC;MAC5B,OAAOsmB,GAAG,CAACpoB,IAAI,CAACL,GAAG,CAAC;KACrB,CAAC;GACH,CAAC;EAEF,OAAOqoB,UAAU,CAACpc,GAAG,CAAC,IAAIgN,aAAa,CAAChN,GAAG,CAAC;AAC9C;;AC/BA;AACA,AAAO,IAAMyc,eAAe,GAAG,wCAAwC;;AAEvE;AACA,AAAO,IAAMC,YAAY,GAAG,IAAInoB,MAAM,CAAC,aAAa,EAAE,GAAG,CAAC;AAC1D;AAkBA;AACA,AAAO,IAAMooB,cAAc,GAAG,WAAW;AACzC,AAAO,IAAMC,eAAe,GAAG,WAAW;AAC1C,AAAO,IAAMC,oBAAoB,GAAG,4BAA4B;AAChE,AAAO,IAAMC,sBAAsB,GAAG,oBAAoB;AAC1D,AAAO,IAAMC,qBAAqB,GAAG,QAAQ;AAC7C,AAAO,IAAMC,eAAe,GAAG,6BAA6B;AAC5D,IAAMC,SAAS,GAAG,CAChB,UAAU,EACV,UAAU,EACV,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,SAAS,EACT,QAAQ,CACT;AACD,IAAMC,YAAY,GAAGD,SAAS,CAACjmB,IAAI,CAAC,GAAG,CAAC;AACxC,AAAO,IAAMmmB,eAAe,GAAG,IAAI5oB,MAAM,eAAAwC,MAAA,CACzBmmB,YAAY,eAC1B,GACF,CAAC;AACD,IAAME,MAAM,GAAG,CACb,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,CACN;AACD,IAAMC,SAAS,GAAGD,MAAM,CAACpmB,IAAI,CAAC,GAAG,CAAC;AAClC,IAAMsmB,UAAU,GAAG,qCAAqC;AACxD,IAAMC,UAAU,GAAG,wCAAwC;AAC3D,IAAMC,UAAU,GAAG,cAAc;AACjC,AAAO,IAAMC,iBAAiB,GAAG,IAAIlpB,MAAM,KAAAwC,MAAA,CACrCumB,UAAU,SAAAvmB,MAAA,CAAMwmB,UAAU,SAAAxmB,MAAA,CAAMymB,UAAU,sBAAAzmB,MAAA,CAAmBsmB,SAAS,QAC1E,IACF,CAAC;;AAED;AACA;AACA,AAAO,IAAMK,mBAAmB,GAAG,WAAW;;AAE9C;AACA;AACA;AACA,AAAO,IAAMC,kBAAkB,GAAG,gBAAgB;AAElD,AAAO,IAAMC,iBAAiB,GAAG,IAAIrpB,MAAM,CAAC,2BAA2B,EAAE,GAAG,CAAC;;ACzE7E;AACA;AACA,AAAe,SAASspB,WAAWA,CAACvQ,MAAM,EAAE;EAC1C,OAAO5Z,eAAe,CAAC4Z,MAAM,CAAC1Z,OAAO,CAAC6oB,eAAe,EAAE,IAAI,CAAC,CAAC5oB,IAAI,EAAE,CAAC;AACtE;;ACLe,SAASoX,OAAKA,CAAC6S,YAAY,EAAE;EAC1CA,YAAY,GAAGA,YAAY,CAACjqB,IAAI,EAAE;EAClC,IAAIkqB,QAAQ,CAACC,QAAQ,CAACF,YAAY,CAAC,EAAE;IACnC,OAAOA,YAAY;;EAGrB,OAAO,IAAI;AACb;;ACJA;AACA;AACA,AAAe,SAASG,QAAQA,CAACtQ,GAAG,EAAAxJ,IAAA,EAAkB;EAAA,IAAd3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;IAAEgT,OAAO,GAAArK,IAAA,CAAPqK,OAAO;;EAEhD,IAAIb,GAAG,CAAClY,MAAM,GAAG,IAAI,IAAIkY,GAAG,CAAClY,MAAM,GAAG,CAAC,EAAE,OAAO,IAAI;;;EAGpD,IAAI+Y,OAAO,IAAIrX,cAAc,CAACqX,OAAO,EAAE,EAAE,CAAC,KAAKrX,cAAc,CAACwW,GAAG,EAAE,EAAE,CAAC,EACpE,OAAO,IAAI;EAEb,IAAMuQ,OAAO,GAAGxV,SAAS,CAACiF,GAAG,EAAEnS,CAAC,CAAC;;;;EAIjC,IAAIkhB,YAAY,CAACtoB,IAAI,CAAC8pB,OAAO,CAAC,EAAE,OAAO,IAAI;EAE3C,OAAOxqB,eAAe,CAACwqB,OAAO,CAACrqB,IAAI,EAAE,CAAC;AACxC;;ACJO,SAASsqB,eAAeA,CAACC,UAAU,EAAE;EAC1C,OAAO,CAACA,UAAU,CAACrpB,KAAK,CAAC0oB,iBAAiB,CAAC,IAAI,EAAE,EAC9CzmB,IAAI,CAAC,GAAG,CAAC,CACTpD,OAAO,CAACmpB,qBAAqB,EAAE,GAAG,CAAC,CACnCnpB,OAAO,CAACkpB,sBAAsB,EAAE,UAAU,CAAC,CAC3ClpB,OAAO,CAACipB,oBAAoB,EAAE,IAAI,CAAC,CACnChpB,IAAI,EAAE;AACX;AAEA,AAAO,SAASwqB,UAAUA,CAACD,UAAU,EAAEzP,QAAQ,EAAEuD,MAAM,EAAE;EACvD,IAAIwL,mBAAmB,CAACtpB,IAAI,CAACgqB,UAAU,CAAC,EAAE;IACxC,OAAOE,MAAM,CAAC,IAAIC,IAAI,CAACH,UAAU,CAAC,CAAC;;EAGrC,IAAIjB,eAAe,CAAC/oB,IAAI,CAACgqB,UAAU,CAAC,EAAE;IACpC,IAAMI,SAAS,GAAGrB,eAAe,CAAC9oB,IAAI,CAAC+pB,UAAU,CAAC;IAClD,OAAOE,MAAM,EAAE,CAACG,QAAQ,CAACD,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;;EAGtD,IAAIxB,eAAe,CAAC5oB,IAAI,CAACgqB,UAAU,CAAC,EAAE;IACpC,OAAOE,MAAM,EAAE;;EAGjB,OAAO3P,QAAQ,GACX2P,MAAM,CAACI,EAAE,CAACN,UAAU,EAAElM,MAAM,IAAIyM,WAAW,CAACP,UAAU,CAAC,EAAEzP,QAAQ,CAAC,GAClE2P,MAAM,CAACF,UAAU,EAAElM,MAAM,IAAIyM,WAAW,CAACP,UAAU,CAAC,CAAC;AAC3D;;AAEA;AACA;AACA,AAAe,SAASQ,kBAAkBA,CACxCR,UAAU,EAEV;EAAA,IAAAja,IAAA,GAAA7M,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MADuB,EAAE;IAAvBqX,QAAQ,GAAAxK,IAAA,CAARwK,QAAQ;IAAEuD,MAAM,GAAA/N,IAAA,CAAN+N,MAAM;;EAGlB,IAAIyK,cAAc,CAACvoB,IAAI,CAACgqB,UAAU,CAAC,EAAE;IACnC,OAAO,IAAIG,IAAI,CAACtpB,SAAA,CAASmpB,UAAU,EAAE,EAAE,CAAC,CAAC,CAACS,WAAW,EAAE;;EAEzD,IAAIjC,eAAe,CAACxoB,IAAI,CAACgqB,UAAU,CAAC,EAAE;IACpC,OAAO,IAAIG,IAAI,CAACtpB,SAAA,CAASmpB,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,CAACS,WAAW,EAAE;;EAGhE,IAAIC,IAAI,GAAGT,UAAU,CAACD,UAAU,EAAEzP,QAAQ,EAAEuD,MAAM,CAAC;EAEnD,IAAI,CAAC4M,IAAI,CAACC,OAAO,EAAE,EAAE;IACnBX,UAAU,GAAGD,eAAe,CAACC,UAAU,CAAC;IACxCU,IAAI,GAAGT,UAAU,CAACD,UAAU,EAAEzP,QAAQ,EAAEuD,MAAM,CAAC;;EAGjD,OAAO4M,IAAI,CAACC,OAAO,EAAE,GAAGD,IAAI,CAACD,WAAW,EAAE,GAAG,IAAI;AACnD;;ACvDA;AACA,AAAe,SAASG,gBAAgBA,CACtCpe,OAAO,EAAAuD,IAAA,EAEP;EAAA,IADE3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;IAAAyjB,qBAAA,GAAA9a,IAAA,CAAE+a,kBAAkB;IAAlBA,AAAyBC,UAAA,GAAAhb,IAAA,CAAE+B,KAAK;IAALA,KAAK,GAAAiZ,UAAA,cAAG,EAAE,GAAAA,UAAA;IAAAC,QAAA,GAAAjb,IAAA,CAAEpQ,GAAG;IAAHA,GAAG,GAAAqrB,QAAA,cAAG,EAAE,GAAAA,QAAA;IAAAC,mBAAA,GAAAlb,IAAA,CAAE0J,cAAc;IAAdA,cAAc,GAAAwR,mBAAA,cAAG,IAAI,GAAAA,mBAAA;;;EAI3E/Y,eAAe,CAAC1F,OAAO,EAAEpF,CAAC,CAAC;;;;;EAK3B,IAAIqS,cAAc,EAAErN,WAAW,CAACI,OAAO,EAAEpF,CAAC,CAAC;;;EAG3C8L,iBAAiB,CAAC1G,OAAO,EAAEpF,CAAC,EAAEzH,GAAG,CAAC;;;;;EAKlC4M,UAAU,CAACC,OAAO,EAAEpF,CAAC,EAAEzH,GAAG,CAAC;;;;EAI3BmN,aAAa,CAACN,OAAO,EAAEpF,CAAC,CAAC;;;;;EAKzB2F,UAAU,CAACP,OAAO,EAAEpF,CAAC,CAAC;;;EAGtByK,YAAY,CAACrF,OAAO,EAAEpF,CAAC,EAAE0K,KAAK,CAAC;;;;;;EAM/B,IAAI2H,cAAc,EAAE7H,SAAS,CAACpF,OAAO,EAAEpF,CAAC,AAAoB,CAAC;;;EAG7DmG,WAAW,CAACf,OAAO,EAAEpF,CAAC,CAAC;;;EAGvBiG,eAAe,CAACb,OAAO,EAAEpF,CAAC,CAAC;EAE3B,OAAOoF,OAAO;AAChB;;ACtDe,SAAS0e,UAAUA,CAACpZ,KAAK,EAAA/B,IAAA,EAAc;EAAA,IAAVpQ,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;IAAEyH,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;;;EAGhD,IAAImiB,kBAAkB,CAACvpB,IAAI,CAAC8R,KAAK,CAAC,EAAE;IAClCA,KAAK,GAAGqZ,iBAAiB,CAACrZ,KAAK,EAAEnS,GAAG,CAAC;;;;;EAKvC,IAAImS,KAAK,CAACzQ,MAAM,GAAG,GAAG,EAAE;;IAEtB,IAAMgY,EAAE,GAAGjS,CAAC,CAAC,IAAI,CAAC;IAClB,IAAIiS,EAAE,CAAChY,MAAM,KAAK,CAAC,EAAE;MACnByQ,KAAK,GAAGuH,EAAE,CAAC9Z,IAAI,EAAE;;;;;EAKrB,OAAOD,eAAe,CAACgV,SAAS,CAACxC,KAAK,EAAE1K,CAAC,CAAC,CAAC3H,IAAI,EAAE,CAAC;AACpD;;ACpBA,SAAS2rB,sBAAsBA,CAACC,UAAU,EAAE9rB,IAAI,EAAE;;;;EAIhD,IAAI8rB,UAAU,CAAChqB,MAAM,IAAI,CAAC,EAAE;;;;IAI1B,IAAMiqB,UAAU,GAAGD,UAAU,CAACppB,MAAM,CAAC,UAACC,GAAG,EAAEqpB,SAAS,EAAK;MACvDrpB,GAAG,CAACqpB,SAAS,CAAC,GAAGrpB,GAAG,CAACqpB,SAAS,CAAC,GAAGrpB,GAAG,CAACqpB,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC;MACxD,OAAOrpB,GAAG;KACX,EAAE,EAAE,CAAC;IAEN,IAAAspB,qBAAA,GAA6B9f,gBAAA,CAAgB4f,UAAU,CAAC,CAACrpB,MAAM,CAC7D,UAACC,GAAG,EAAE0J,GAAG,EAAK;QACZ,IAAI1J,GAAG,CAAC,CAAC,CAAC,GAAGopB,UAAU,CAAC1f,GAAG,CAAC,EAAE;UAC5B,OAAO,CAACA,GAAG,EAAE0f,UAAU,CAAC1f,GAAG,CAAC,CAAC;;QAG/B,OAAO1J,GAAG;OACX,EACD,CAAC,CAAC,EAAE,CAAC,CACP,CAAC;MAAAupB,sBAAA,GAAAlpB,cAAA,CAAAipB,qBAAA;MATME,OAAO,GAAAD,sBAAA;MAAEE,SAAS,GAAAF,sBAAA;;;;;;IAezB,IAAIE,SAAS,IAAI,CAAC,IAAID,OAAO,CAACrqB,MAAM,IAAI,CAAC,EAAE;MACzCgqB,UAAU,GAAG9rB,IAAI,CAACwB,KAAK,CAAC2qB,OAAO,CAAC;;IAGlC,IAAME,SAAS,GAAG,CAACP,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAACjoB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,IAAMyoB,UAAU,GAAGD,SAAS,CAAC3pB,MAAM,CACjC,UAACC,GAAG,EAAEkW,GAAG;MAAA,OAAMlW,GAAG,CAACb,MAAM,GAAG+W,GAAG,CAAC/W,MAAM,GAAGa,GAAG,GAAGkW,GAAG;KAAC,EACnD,EACF,CAAC;IAED,IAAIyT,UAAU,CAACxqB,MAAM,GAAG,EAAE,EAAE;MAC1B,OAAOwqB,UAAU;;IAGnB,OAAOtsB,IAAI;;EAGb,OAAO,IAAI;AACb;AAEA,SAASusB,oBAAoBA,CAACT,UAAU,EAAE1rB,GAAG,EAAE;;;;;;;EAO7C,IAAA+M,UAAA,GAAiBhL,GAAG,CAACC,KAAK,CAAChC,GAAG,CAAC;IAAvBkC,IAAI,GAAA6K,UAAA,CAAJ7K,IAAI;EACZ,IAAMkqB,WAAW,GAAGlqB,IAAI,CAACrC,OAAO,CAACgqB,iBAAiB,EAAE,EAAE,CAAC;EAEvD,IAAMwC,SAAS,GAAGX,UAAU,CAAC,CAAC,CAAC,CAAC/pB,WAAW,EAAE,CAAC9B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EAC9D,IAAMysB,cAAc,GAAGC,KAAK,CAACC,WAAW,CAACH,SAAS,EAAED,WAAW,CAAC;EAEhE,IAAIE,cAAc,GAAG,GAAG,IAAID,SAAS,CAAC3qB,MAAM,GAAG,CAAC,EAAE;IAChD,OAAOgqB,UAAU,CAACjoB,KAAK,CAAC,CAAC,CAAC,CAACR,IAAI,CAAC,EAAE,CAAC;;EAGrC,IAAMwpB,OAAO,GAAGf,UAAU,CACvBjoB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACZ9B,WAAW,EAAE,CACb9B,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EACnB,IAAM6sB,YAAY,GAAGH,KAAK,CAACC,WAAW,CAACC,OAAO,EAAEL,WAAW,CAAC;EAE5D,IAAIM,YAAY,GAAG,GAAG,IAAID,OAAO,CAAC/qB,MAAM,IAAI,CAAC,EAAE;IAC7C,OAAOgqB,UAAU,CAACjoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACR,IAAI,CAAC,EAAE,CAAC;;EAGzC,OAAO,IAAI;AACb;;AAEA;AACA;AACA,AAAe,SAASuoB,iBAAiBA,CAACrZ,KAAK,EAAY;EAAA,IAAVnS,GAAG,GAAAuD,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;;;EAGvD,IAAMmoB,UAAU,GAAGvZ,KAAK,CAAC/Q,KAAK,CAACwoB,kBAAkB,CAAC;EAClD,IAAI8B,UAAU,CAAChqB,MAAM,KAAK,CAAC,EAAE;IAC3B,OAAOyQ,KAAK;;EAGd,IAAIwa,QAAQ,GAAGlB,sBAAsB,CAACC,UAAU,EAAEvZ,KAAK,CAAC;EACxD,IAAIwa,QAAQ,EAAE,OAAOA,QAAQ;EAE7BA,QAAQ,GAAGR,oBAAoB,CAACT,UAAU,EAAE1rB,GAAG,CAAC;EAChD,IAAI2sB,QAAQ,EAAE,OAAOA,QAAQ;;;;EAI7B,OAAOxa,KAAK;AACd;;AC/FA,IAAMya,QAAQ,GAAG;EACfrT,MAAM,EAAEuQ,WAAW;EACnBvP,cAAc,EAAEsS,OAAU;EAC1BjT,GAAG,EAAEsQ,QAAQ;EACb1Q,cAAc,EAAEqR,kBAAkB;EAClCxnB,OAAO,EAAEypB,gBAAY;EACrB3a,KAAK,EAAEoZ;AACT,CAAC;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAe,SAASwB,eAAeA,CAACtlB,CAAC,EAAEulB,IAAI,EAAE;EAC/C,IAAIA,IAAI,CAACpjB,uBAAuB,EAAE;IAChCnC,CAAC,GAAGmC,uBAAuB,CAACnC,CAAC,CAAC;;EAGhCA,CAAC,GAAGiE,mBAAmB,CAACjE,CAAC,CAAC;EAC1BA,CAAC,GAAGyI,YAAY,CAACzI,CAAC,EAAEulB,IAAI,CAACrd,WAAW,CAAC;EACrC,IAAMsd,aAAa,GAAG1b,gBAAgB,CAAC9J,CAAC,CAAC;EAEzC,OAAOwlB,aAAa;AACtB;;;;;;;ACzBA,AAQA,IAAMC,uBAAuB,GAAG;EAC9BC,WAAW,EAAE;IACXvjB,uBAAuB,EAAE,IAAI;IAC7B+F,WAAW,EAAE,IAAI;IACjBwb,kBAAkB,EAAE;GACrB;;;;;;;;;;;;;;;;;;;;EAqBDiC,OAAO,WAAAA,QAAAhd,IAAA,EAA0B4c,IAAI,EAAE;IAAA,IAA7BvlB,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEyE,IAAI,GAAAkE,IAAA,CAAJlE,IAAI;MAAEiG,KAAK,GAAA/B,IAAA,CAAL+B,KAAK;MAAEnS,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;IAC3BgtB,IAAI,GAAAtmB,eAAA,CAAAA,eAAA,KAAQ,IAAI,CAACymB,WAAW,GAAKH,IAAI,CAAE;IAEvCvlB,CAAC,GAAGA,CAAC,IAAIxD,OAAO,CAACgU,IAAI,CAAC/L,IAAI,CAAC;;;;IAI3B,IAAIpE,IAAI,GAAG,IAAI,CAACulB,cAAc,CAAC5lB,CAAC,EAAE0K,KAAK,EAAEnS,GAAG,EAAEgtB,IAAI,CAAC;IAEnD,IAAInX,gBAAgB,CAAC/N,IAAI,CAAC,EAAE;MAC1B,OAAO,IAAI,CAACwlB,kBAAkB,CAACxlB,IAAI,EAAEL,CAAC,CAAC;;;;;;IAKzC,IAAAyM,SAAA,GAAAC,4BAAA,CACkBpI,gBAAA,CAAgBihB,IAAI,CAAC,CAACjZ,MAAM,CAAC,UAAAwZ,CAAC;QAAA,OAAIP,IAAI,CAACO,CAAC,CAAC,KAAK,IAAI;QAAC;MAAAnZ,KAAA;IAAA;MAArE,KAAAF,SAAA,CAAAa,CAAA,MAAAX,KAAA,GAAAF,SAAA,CAAAc,CAAA,IAAAC,IAAA,GAAuE;QAAA,IAA5DhJ,GAAG,GAAAmI,KAAA,CAAApM,KAAA;QACZglB,IAAI,CAAC/gB,GAAG,CAAC,GAAG,KAAK;QACjBxE,CAAC,GAAGxD,OAAO,CAACgU,IAAI,CAAC/L,IAAI,CAAC;QAEtBpE,IAAI,GAAG,IAAI,CAACulB,cAAc,CAAC5lB,CAAC,EAAE0K,KAAK,EAAEnS,GAAG,EAAEgtB,IAAI,CAAC;QAE/C,IAAInX,gBAAgB,CAAC/N,IAAI,CAAC,EAAE;UAC1B;;;aAEHjD,GAAA;MAAAqP,SAAA,CAAAzE,CAAA,CAAA5K,GAAA;;MAAAqP,SAAA,CAAAgB,CAAA;;IAED,OAAO,IAAI,CAACoY,kBAAkB,CAACxlB,IAAI,EAAEL,CAAC,CAAC;GACxC;;EAGD4lB,cAAc,WAAAA,eAAC5lB,CAAC,EAAE0K,KAAK,EAAEnS,GAAG,EAAEgtB,IAAI,EAAE;IAClC,OAAOF,gBAAY,CAACC,eAAe,CAACtlB,CAAC,EAAEulB,IAAI,CAAC,EAAE;MAC5CvlB,CAAC,EAADA,CAAC;MACD0jB,kBAAkB,EAAE6B,IAAI,CAAC7B,kBAAkB;MAC3ChZ,KAAK,EAALA,KAAK;MACLnS,GAAG,EAAHA;KACD,CAAC;GACH;;;;EAKDstB,kBAAkB,WAAAA,mBAACxlB,IAAI,EAAEL,CAAC,EAAE;IAC1B,IAAI,CAACK,IAAI,EAAE;MACT,OAAO,IAAI;;IAGb,OAAOnI,eAAe,CAAC8H,CAAC,CAACyE,IAAI,CAACpE,IAAI,CAAC,CAAC;;AAExC,CAAC;;ACpFD;AACA;AACA;;AAEA;AACA;AACA;AACA,AAAO,IAAM0lB,sBAAsB,GAAG,CACpC,iBAAiB,EACjB,UAAU,EACV,SAAS,EACT,UAAU,EACV,OAAO,CACR;;AAED;AACA;AACA,AAAO,IAAMC,oBAAoB,GAAG,CAAC,UAAU,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAO,IAAMC,sBAAsB,GAAG,CACpC,sBAAsB,EACtB,kBAAkB,EAClB,kBAAkB,EAClB,YAAY,EACZ,mBAAmB,EACnB,cAAc,CACf;AAED,AAAO,IAAMC,oBAAoB,GAAG,CAClC,YAAY,EACZ,cAAc,EACd,cAAc,EACd,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,eAAe,EACf,eAAe,EACf,iBAAiB,EACjB,UAAU,EACV,YAAY,EACZ,IAAI,EACJ,iBAAiB,EACjB,OAAO,CACR;;ACzCD,IAAMC,qBAAqB,GAAG;EAC5BR,OAAO,WAAAA,QAAAhd,IAAA,EAAwB;IAAA,IAArB3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEzH,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;MAAE6tB,SAAS,GAAAzd,IAAA,CAATyd,SAAS;;;IAGzB,IAAI1b,KAAK;IAETA,KAAK,GAAGwB,eAAe,CAAClM,CAAC,EAAE+lB,sBAAsB,EAAEK,SAAS,CAAC;IAC7D,IAAI1b,KAAK,EAAE,OAAOoZ,UAAU,CAACpZ,KAAK,EAAE;MAAEnS,GAAG,EAAHA,GAAG;MAAEyH,CAAC,EAADA;KAAG,CAAC;;;;IAI/C0K,KAAK,GAAGmD,oBAAoB,CAAC7N,CAAC,EAAEimB,sBAAsB,CAAC;IACvD,IAAIvb,KAAK,EAAE,OAAOoZ,UAAU,CAACpZ,KAAK,EAAE;MAAEnS,GAAG,EAAHA,GAAG;MAAEyH,CAAC,EAADA;KAAG,CAAC;;;IAG/C0K,KAAK,GAAGwB,eAAe,CAAClM,CAAC,EAAEgmB,oBAAoB,EAAEI,SAAS,CAAC;IAC3D,IAAI1b,KAAK,EAAE,OAAOoZ,UAAU,CAACpZ,KAAK,EAAE;MAAEnS,GAAG,EAAHA,GAAG;MAAEyH,CAAC,EAADA;KAAG,CAAC;;;IAG/C0K,KAAK,GAAGmD,oBAAoB,CAAC7N,CAAC,EAAEkmB,oBAAoB,CAAC;IACrD,IAAIxb,KAAK,EAAE,OAAOoZ,UAAU,CAACpZ,KAAK,EAAE;MAAEnS,GAAG,EAAHA,GAAG;MAAEyH,CAAC,EAADA;KAAG,CAAC;;;IAG/C,OAAO,EAAE;;AAEb,CAAC;;ACnCD;AACA;AACA;AACA;AACA;AACA;AACA,AAAO,IAAMqmB,gBAAgB,GAAG,CAC9B,KAAK,EACL,OAAO,EACP,WAAW,EACX,eAAe,EACf,YAAY,EACZ,WAAW,EACX,SAAS,CACV;AAED,AAAO,IAAMC,iBAAiB,GAAG,GAAG;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AAAO,IAAMC,gBAAgB,GAAG,CAC9B,sBAAsB,EACtB,mBAAmB,EACnB,oBAAoB,EACpB,mBAAmB,EACnB,oBAAoB,EACpB,qBAAqB,EACrB,aAAa,EACb,iBAAiB,EACjB,oBAAoB,EACpB,qBAAqB,EACrB,eAAe,EACf,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,cAAc,EACd,yBAAyB,EACzB,qBAAqB,EACrB,qBAAqB,EACrB,SAAS,EACT,SAAS,EACT,gBAAgB,EAChB,gBAAgB,EAChB,SAAS,CACV;;AAED;AACA;AACA,IAAMC,QAAQ,GAAG,aAAa;AAC9B,AAAO,IAAMC,mBAAmB,GAAG,CACjC,CAAC,SAAS,EAAED,QAAQ,CAAC,EACrB,CAAC,SAAS,EAAEA,QAAQ,CAAC,CACtB;;;;;ACzDD,AAUA,IAAME,sBAAsB,GAAG;EAC7Bf,OAAO,WAAAA,QAAAhd,IAAA,EAAmB;IAAA,IAAhB3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEomB,SAAS,GAAAzd,IAAA,CAATyd,SAAS;IACpB,IAAItU,MAAM;;;;IAIVA,MAAM,GAAG5F,eAAe,CAAClM,CAAC,EAAEqmB,gBAAgB,EAAED,SAAS,CAAC;IACxD,IAAItU,MAAM,IAAIA,MAAM,CAAC7X,MAAM,GAAGqsB,iBAAiB,EAAE;MAC/C,OAAOjE,WAAW,CAACvQ,MAAM,CAAC;;;;IAI5BA,MAAM,GAAGjE,oBAAoB,CAAC7N,CAAC,EAAEumB,gBAAgB,EAAE,CAAC,CAAC;IACrD,IAAIzU,MAAM,IAAIA,MAAM,CAAC7X,MAAM,GAAGqsB,iBAAiB,EAAE;MAC/C,OAAOjE,WAAW,CAACvQ,MAAM,CAAC;;;;;;IAK5B,IAAArF,SAAA,GAAAC,4BAAA,CACgC+Z,mBAAmB;MAAA9Z,KAAA;IAAA;MAAnD,KAAAF,SAAA,CAAAa,CAAA,MAAAX,KAAA,GAAAF,SAAA,CAAAc,CAAA,IAAAC,IAAA,GAAqD;QAAA,IAAAmZ,WAAA,GAAAxrB,cAAA,CAAAwR,KAAA,CAAApM,KAAA;UAAzCyN,QAAQ,GAAA2Y,WAAA;UAAEC,KAAK,GAAAD,WAAA;QACzB,IAAMtmB,IAAI,GAAGL,CAAC,CAACgO,QAAQ,CAAC;QACxB,IAAI3N,IAAI,CAACpG,MAAM,KAAK,CAAC,EAAE;UACrB,IAAM9B,IAAI,GAAGkI,IAAI,CAAClI,IAAI,EAAE;UACxB,IAAIyuB,KAAK,CAAChuB,IAAI,CAACT,IAAI,CAAC,EAAE;YACpB,OAAOkqB,WAAW,CAAClqB,IAAI,CAAC;;;;aAG7BiF,GAAA;MAAAqP,SAAA,CAAAzE,CAAA,CAAA5K,GAAA;;MAAAqP,SAAA,CAAAgB,CAAA;;IAED,OAAO,IAAI;;AAEf,CAAC;;AC1CD;AACA;AACA;AACA;AACA,AAAO,IAAMoZ,wBAAwB,GAAG,CACtC,wBAAwB,EACxB,aAAa,EACb,SAAS,EACT,gBAAgB,EAChB,WAAW,EACX,cAAc,EACd,UAAU,EACV,UAAU,EACV,SAAS,EACT,eAAe,EACf,UAAU,EACV,cAAc,EACd,qBAAqB,EACrB,cAAc,EACd,SAAS,EACT,MAAM,CACP;;AAED;AACA;AACA;AACA,AAAO,IAAMC,wBAAwB,GAAG,CACtC,4BAA4B,EAC5B,oBAAoB,EACpB,0BAA0B,EAC1B,kBAAkB,EAClB,oBAAoB,EACpB,kBAAkB,EAClB,iBAAiB,EACjB,aAAa,EACb,eAAe,EACf,qBAAqB,EACrB,mBAAmB,EACnB,cAAc,EACd,aAAa,EACb,YAAY,EACZ,kBAAkB,EAClB,WAAW,EACX,UAAU,CACX;;AAED;AACA;AACA;AACA,IAAMC,eAAe,GAAG,mDAAmD;AAC3E,AAAO,IAAMC,sBAAsB,GAAG,CACpC,IAAIjuB,MAAM,CAAC,4BAA4B,EAAE,GAAG,CAAC,EAC7C,IAAIA,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,EAC9C,IAAIA,MAAM,eAAAwC,MAAA,CAAewrB,eAAe,kBAAe,GAAG,CAAC,CAC5D;;AC5CD,IAAME,6BAA6B,GAAG;EACpCtB,OAAO,WAAAA,QAAAhd,IAAA,EAAwB;IAAA,IAArB3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEzH,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;MAAE6tB,SAAS,GAAAzd,IAAA,CAATyd,SAAS;IACzB,IAAIc,aAAa;;;;IAIjBA,aAAa,GAAGhb,eAAe,CAC7BlM,CAAC,EACD6mB,wBAAwB,EACxBT,SAAS,EACT,KACF,CAAC;IACD,IAAIc,aAAa,EAAE,OAAO9D,kBAAkB,CAAC8D,aAAa,CAAC;;;;IAI3DA,aAAa,GAAGrZ,oBAAoB,CAAC7N,CAAC,EAAE8mB,wBAAwB,CAAC;IACjE,IAAII,aAAa,EAAE,OAAO9D,kBAAkB,CAAC8D,aAAa,CAAC;;;IAG3DA,aAAa,GAAG5uB,cAAc,CAACC,GAAG,EAAEyuB,sBAAsB,CAAC;IAC3D,IAAIE,aAAa,EAAE,OAAO9D,kBAAkB,CAAC8D,aAAa,CAAC;IAE3D,OAAO,IAAI;;AAEf,CAAC;;ACnCD;AACA;AACA;AACA;AACA,IAAMC,mBAAmB,GAAG;EAC1BxB,OAAO,WAAAA,UAAG;IACR,OAAO,IAAI;;AAEf,CAAC;;ACRD;AACA;AACA;AACA,AAAO,IAAMyB,wBAAwB,GAAG,CACtC,UAAU,EACV,eAAe,EACf,WAAW,CACZ;AAED,AAAO,IAAMC,wBAAwB,GAAG,CAAC,qBAAqB,CAAC;AAE/D,AAAO,IAAMC,6BAA6B,GAAG,CAC3C,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,OAAO,EACP,UAAU,CACX;AACD,AAAO,IAAMC,gCAAgC,GAAG,IAAIxuB,MAAM,CACxDuuB,6BAA6B,CAAC9rB,IAAI,CAAC,GAAG,CAAC,EACvC,GACF,CAAC;AAED,AAAO,IAAMgsB,6BAA6B,GAAG,CAC3C,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,UAAU,EACV,UAAU,EACV,MAAM,EACN,IAAI,EACJ,YAAY,EACZ,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,SAAS,EACT,SAAS,EACT,QAAQ,EACR,OAAO,EACP,UAAU,EACV,SAAS,EACT,OAAO,EACP,OAAO,EACP,KAAK,EACL,aAAa,CACd;AACD,AAAO,IAAMC,gCAAgC,GAAG,IAAI1uB,MAAM,CACxDyuB,6BAA6B,CAAChsB,IAAI,CAAC,GAAG,CAAC,EACvC,GACF,CAAC;AAED,AAAO,IAAMksB,MAAM,GAAG,gBAAgB;AACtC,AAAO,IAAMC,MAAM,GAAG,kBAAkB;;AC/CxC,SAASC,MAAMA,CAACtnB,KAAK,EAAE;EACrB,UAAA/E,MAAA,CAAU+E,KAAK,CAACE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAAjF,MAAA,CAAI+E,KAAK,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AAC/D;;AAEA;AACA,AAAO,SAASqnB,aAAaA,CAACtvB,GAAG,EAAE;EACjCA,GAAG,GAAGA,GAAG,CAACF,IAAI,EAAE;EAChB,IAAI0O,KAAK,GAAG,CAAC;EAEb,IAAIwgB,gCAAgC,CAAC3uB,IAAI,CAACL,GAAG,CAAC,EAAE;IAC9CwO,KAAK,IAAI,EAAE;;EAGb,IAAI0gB,gCAAgC,CAAC7uB,IAAI,CAACL,GAAG,CAAC,EAAE;IAC9CwO,KAAK,IAAI,EAAE;;;;;EAKb,IAAI2gB,MAAM,CAAC9uB,IAAI,CAACL,GAAG,CAAC,EAAE;IACpBwO,KAAK,IAAI,EAAE;;EAGb,IAAI4gB,MAAM,CAAC/uB,IAAI,CAACL,GAAG,CAAC,EAAE;IACpBwO,KAAK,IAAI,EAAE;;;;;EAKb,OAAOA,KAAK;AACd;;AAEA;AACA,AAAO,SAAS+gB,SAASA,CAACljB,IAAI,EAAE;EAC9B,IAAIA,IAAI,CAACpE,IAAI,CAAC,KAAK,CAAC,EAAE;IACpB,OAAO,CAAC;;EAGV,OAAO,CAAC;AACV;;AAEA;AACA;AACA,AAAO,SAASunB,cAAcA,CAACnjB,IAAI,EAAE;EACnC,IAAImC,KAAK,GAAG,CAAC;EACb,IAAMihB,UAAU,GAAGpjB,IAAI,CAACZ,OAAO,CAAC,QAAQ,CAAC,CAAC6F,KAAK,EAAE;EAEjD,IAAIme,UAAU,CAAC/tB,MAAM,KAAK,CAAC,EAAE;IAC3B8M,KAAK,IAAI,EAAE;;EAGb,IAAMwB,OAAO,GAAG3D,IAAI,CAACsB,MAAM,EAAE;EAC7B,IAAI+hB,QAAQ;EACZ,IAAI1f,OAAO,CAACtO,MAAM,KAAK,CAAC,EAAE;IACxBguB,QAAQ,GAAG1f,OAAO,CAACrC,MAAM,EAAE;;EAG7B,CAACqC,OAAO,EAAE0f,QAAQ,CAAC,CAACvf,OAAO,CAAC,UAAApI,KAAK,EAAI;IACnC,IAAImG,cAAc,CAAC7N,IAAI,CAACgvB,MAAM,CAACtnB,KAAK,CAAC,CAAC,EAAE;MACtCyG,KAAK,IAAI,EAAE;;GAEd,CAAC;EAEF,OAAOA,KAAK;AACd;;AAEA;AACA;AACA,AAAO,SAASmhB,cAAcA,CAACtjB,IAAI,EAAE;EACnC,IAAImC,KAAK,GAAG,CAAC;EACb,IAAMqC,QAAQ,GAAGxE,IAAI,CAAC7F,IAAI,EAAE;EAC5B,IAAMkE,OAAO,GAAGmG,QAAQ,CAACtM,GAAG,CAAC,CAAC,CAAC;EAE/B,IAAImG,OAAO,IAAIA,OAAO,CAACH,OAAO,CAAC5I,WAAW,EAAE,KAAK,YAAY,EAAE;IAC7D6M,KAAK,IAAI,EAAE;;EAGb,IAAIN,cAAc,CAAC7N,IAAI,CAACgvB,MAAM,CAACxe,QAAQ,CAAC,CAAC,EAAE;IACzCrC,KAAK,IAAI,EAAE;;EAGb,OAAOA,KAAK;AACd;AAEA,AAAO,SAASohB,iBAAiBA,CAACvjB,IAAI,EAAE;EACtC,IAAImC,KAAK,GAAG,CAAC;EAEb,IAAMjC,KAAK,GAAGmC,WAAA,CAAWrC,IAAI,CAACpE,IAAI,CAAC,OAAO,CAAC,CAAC;EAC5C,IAAMqE,MAAM,GAAGoC,WAAA,CAAWrC,IAAI,CAACpE,IAAI,CAAC,QAAQ,CAAC,CAAC;EAC9C,IAAM4O,GAAG,GAAGxK,IAAI,CAACpE,IAAI,CAAC,KAAK,CAAC;;;EAG5B,IAAIsE,KAAK,IAAIA,KAAK,IAAI,EAAE,EAAE;IACxBiC,KAAK,IAAI,EAAE;;;;EAIb,IAAIlC,MAAM,IAAIA,MAAM,IAAI,EAAE,EAAE;IAC1BkC,KAAK,IAAI,EAAE;;EAGb,IAAIjC,KAAK,IAAID,MAAM,IAAI,CAACuK,GAAG,CAACpU,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAC9C,IAAMotB,IAAI,GAAGtjB,KAAK,GAAGD,MAAM;IAC3B,IAAIujB,IAAI,GAAG,IAAI,EAAE;;MAEfrhB,KAAK,IAAI,GAAG;KACb,MAAM;MACLA,KAAK,IAAIS,IAAI,CAAC6gB,KAAK,CAACD,IAAI,GAAG,IAAI,CAAC;;;EAIpC,OAAOrhB,KAAK;AACd;AAEA,AAAO,SAASuhB,eAAeA,CAACC,KAAK,EAAEzuB,KAAK,EAAE;EAC5C,OAAOyuB,KAAK,CAACtuB,MAAM,GAAG,CAAC,GAAGH,KAAK;AACjC;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM0uB,4BAA4B,GAAG;EACnC7C,OAAO,WAAAA,QAAAhd,IAAA,EAAkC;IAAA,IAA/B3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEpE,OAAO,GAAA+M,IAAA,CAAP/M,OAAO;MAAEwqB,SAAS,GAAAzd,IAAA,CAATyd,SAAS;MAAE3hB,IAAI,GAAAkE,IAAA,CAAJlE,IAAI;IACnC,IAAIgkB,QAAQ;IACZ,IAAI,CAACzoB,CAAC,CAACvD,OAAO,IAAIuD,CAAC,CAAC,MAAM,CAAC,CAAC/F,MAAM,KAAK,CAAC,EAAE;MACxC+F,CAAC,CAAC,GAAG,CAAC,CACH6J,KAAK,EAAE,CACP0I,OAAO,CAAC9N,IAAI,CAAC;;;;;;;IAOlB,IAAMikB,QAAQ,GAAGxc,eAAe,CAC9BlM,CAAC,EACDonB,wBAAwB,EACxBhB,SAAS,EACT,KACF,CAAC;IAED,IAAIsC,QAAQ,EAAE;MACZD,QAAQ,GAAGrD,OAAU,CAACsD,QAAQ,CAAC;MAE/B,IAAID,QAAQ,EAAE,OAAOA,QAAQ;;;;;;IAM/B,IAAMpd,QAAQ,GAAGrL,CAAC,CAACpE,OAAO,CAAC;IAC3B,IAAM+sB,IAAI,GAAG3oB,CAAC,CAAC,KAAK,EAAEqL,QAAQ,CAAC,CAAC2B,OAAO,EAAE;IACzC,IAAM4b,SAAS,GAAG,EAAE;IAEpBD,IAAI,CAACjgB,OAAO,CAAC,UAACxD,GAAG,EAAEpL,KAAK,EAAK;MAC3B,IAAM8K,IAAI,GAAG5E,CAAC,CAACkF,GAAG,CAAC;MACnB,IAAMkK,GAAG,GAAGxK,IAAI,CAACpE,IAAI,CAAC,KAAK,CAAC;MAE5B,IAAI,CAAC4O,GAAG,EAAE;MAEV,IAAIrI,KAAK,GAAG8gB,aAAa,CAACzY,GAAG,CAAC;MAC9BrI,KAAK,IAAI+gB,SAAS,CAACljB,IAAI,CAAC;MACxBmC,KAAK,IAAIghB,cAAc,CAACnjB,IAAI,CAAC;MAC7BmC,KAAK,IAAImhB,cAAc,CAACtjB,IAAI,CAAC;MAC7BmC,KAAK,IAAIohB,iBAAiB,CAACvjB,IAAI,CAAC;MAChCmC,KAAK,IAAIuhB,eAAe,CAACK,IAAI,EAAE7uB,KAAK,CAAC;MAErC8uB,SAAS,CAACxZ,GAAG,CAAC,GAAGrI,KAAK;KACvB,CAAC;IAEF,IAAAqd,qBAAA,GAA2B9f,gBAAA,CAAgBskB,SAAS,CAAC,CAAC/tB,MAAM,CAC1D,UAACC,GAAG,EAAE0J,GAAG;QAAA,OAAMokB,SAAS,CAACpkB,GAAG,CAAC,GAAG1J,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC0J,GAAG,EAAEokB,SAAS,CAACpkB,GAAG,CAAC,CAAC,GAAG1J,GAAG;OAAC,EACrE,CAAC,IAAI,EAAE,CAAC,CACV,CAAC;MAAAupB,sBAAA,GAAAlpB,cAAA,CAAAipB,qBAAA;MAHMyE,MAAM,GAAAxE,sBAAA;MAAEpb,QAAQ,GAAAob,sBAAA;IAKvB,IAAIpb,QAAQ,GAAG,CAAC,EAAE;MAChBwf,QAAQ,GAAGrD,OAAU,CAACyD,MAAM,CAAC;MAE7B,IAAIJ,QAAQ,EAAE,OAAOA,QAAQ;;;;;;IAK/B,IAAAhc,SAAA,GAAAC,4BAAA,CACuB2a,wBAAwB;MAAA1a,KAAA;IAAA;MAA/C,KAAAF,SAAA,CAAAa,CAAA,MAAAX,KAAA,GAAAF,SAAA,CAAAc,CAAA,IAAAC,IAAA,GAAiD;QAAA,IAAtCQ,QAAQ,GAAArB,KAAA,CAAApM,KAAA;QACjB,IAAMD,KAAK,GAAGN,CAAC,CAACgO,QAAQ,CAAC,CAACnE,KAAK,EAAE;QACjC,IAAMuF,GAAG,GAAG9O,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;QAC7B,IAAI4O,GAAG,EAAE;UACPqZ,QAAQ,GAAGrD,OAAU,CAAChW,GAAG,CAAC;UAC1B,IAAIqZ,QAAQ,EAAE,OAAOA,QAAQ;;QAG/B,IAAMvpB,IAAI,GAAGoB,KAAK,CAACE,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAItB,IAAI,EAAE;UACRupB,QAAQ,GAAGrD,OAAU,CAAClmB,IAAI,CAAC;UAC3B,IAAIupB,QAAQ,EAAE,OAAOA,QAAQ;;QAG/B,IAAMloB,KAAK,GAAGD,KAAK,CAACE,IAAI,CAAC,OAAO,CAAC;QACjC,IAAID,KAAK,EAAE;UACTkoB,QAAQ,GAAGrD,OAAU,CAAC7kB,KAAK,CAAC;UAC5B,IAAIkoB,QAAQ,EAAE,OAAOA,QAAQ;;;aAEhCrrB,GAAA;MAAAqP,SAAA,CAAAzE,CAAA,CAAA5K,GAAA;;MAAAqP,SAAA,CAAAgB,CAAA;;IAED,OAAO,IAAI;;AAEf,CAAC;;AC7Gc,SAASqb,eAAeA,CAAC/hB,KAAK,EAAEgiB,UAAU,EAAE7pB,IAAI,EAAE;;;;;;EAM/D,IAAI6H,KAAK,GAAG,CAAC,EAAE;IACb,IAAMiiB,UAAU,GAAG,IAAIC,OAAO,CAACC,eAAe,CAC5C,IAAI,EACJH,UAAU,EACV7pB,IACF,CAAC,CAACiqB,KAAK,EAAE;;;;;;;IAOT,IAAMC,WAAW,GAAG,GAAG,GAAGJ,UAAU;IACpC,IAAMK,YAAY,GAAG,EAAE,GAAG,IAAID,WAAW,GAAG,GAAG,CAAC,CAAC;IACjD,OAAOriB,KAAK,GAAGsiB,YAAY;;EAG7B,OAAO,CAAC;AACV;;ACxBe,SAASC,aAAaA,CAACtd,QAAQ,EAAExS,OAAO,EAAE;;;;;EAKvD,IAAIuN,KAAK,GAAG,CAAC;EAEb,IAAI7N,WAAW,CAACN,IAAI,CAACoT,QAAQ,CAAC3T,IAAI,EAAE,CAAC,EAAE;IACrC,IAAMkxB,aAAa,GAAG9vB,SAAA,CAASuS,QAAQ,EAAE,EAAE,CAAC;;;;IAI5C,IAAIud,aAAa,GAAG,CAAC,EAAE;MACrBxiB,KAAK,GAAG,CAAC,EAAE;KACZ,MAAM;MACLA,KAAK,GAAGS,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG6hB,aAAa,CAAC;;;;;;IAMzC,IAAI/vB,OAAO,IAAIA,OAAO,IAAI+vB,aAAa,EAAE;MACvCxiB,KAAK,IAAI,EAAE;;;EAIf,OAAOA,KAAK;AACd;;AC7Be,SAASyiB,eAAeA,CAAChwB,OAAO,EAAEiwB,IAAI,EAAE;;;;EAIrD,IAAIjwB,OAAO,IAAI,CAACiwB,IAAI,EAAE;IACpB,OAAO,EAAE;;EAGX,OAAO,CAAC;AACV;;ACTO,IAAMC,QAAQ,GAAG,IAAI;;AAE5B;AACA;AACA,AAAO,IAAMC,qBAAqB,GAAG,CACnC,OAAO,EACP,SAAS,EACT,SAAS,EACT,SAAS,EACT,QAAQ,EACR,OAAO,EACP,OAAO,EACP,OAAO,EACP,KAAK,EACL,OAAO,EACP,MAAM,EACN,QAAQ,EACR,KAAK,EACL,iBAAiB,CAClB;AACD,AAAO,IAAMC,wBAAwB,GAAG,IAAI7wB,MAAM,CAChD4wB,qBAAqB,CAACnuB,IAAI,CAAC,GAAG,CAAC,EAC/B,GACF,CAAC;;AAED;AACA;AACA;AACA,AAAO,IAAMquB,iBAAiB,GAAG,IAAI9wB,MAAM,CACzC,4CAA4C,EAC5C,GACF,CAAC;;AAED;AACA;AACA,AAAO,IAAM+wB,gBAAgB,GAAG,IAAI/wB,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;;AAEnE;AACA;AACA,AAAO,IAAMgxB,iBAAiB,GAAG,IAAIhxB,MAAM,CAAC,yBAAyB,EAAE,GAAG,CAAC;;ACrC5D,SAASixB,oBAAoBA,CAAC9qB,IAAI,EAAE;;EAEjD,IAAI0qB,wBAAwB,CAAChxB,IAAI,CAACsG,IAAI,CAAC,EAAE;IACvC,OAAO,CAAC,EAAE;;EAGZ,OAAO,CAAC;AACV;;ACDA,SAAS+qB,OAAOA,CAACC,KAAK,EAAE;EACtB,UAAA3uB,MAAA,CAAU2uB,KAAK,CAAC1pB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAAjF,MAAA,CAAI2uB,KAAK,CAAC1pB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AAC/D;AAEA,AAAe,SAASunB,gBAAcA,CAACmC,KAAK,EAAE;;;;EAI5C,IAAI3hB,OAAO,GAAG2hB,KAAK,CAAChkB,MAAM,EAAE;EAC5B,IAAIikB,aAAa,GAAG,KAAK;EACzB,IAAIC,aAAa,GAAG,KAAK;EACzB,IAAIrjB,KAAK,GAAG,CAAC;EAEbsjB,WAAA,CAAWvZ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACpI,OAAO,CAAC,YAAM;IACpC,IAAIH,OAAO,CAACtO,MAAM,KAAK,CAAC,EAAE;MACxB;;IAGF,IAAMqwB,UAAU,GAAGL,OAAO,CAAC1hB,OAAO,AAAK,CAAC;;;;IAIxC,IAAI,CAAC4hB,aAAa,IAAIvoB,OAAO,CAAChJ,IAAI,CAAC0xB,UAAU,CAAC,EAAE;MAC9CH,aAAa,GAAG,IAAI;MACpBpjB,KAAK,IAAI,EAAE;;;;;;IAMb,IACE,CAACqjB,aAAa,IACd1oB,iBAAiB,CAAC9I,IAAI,CAAC0xB,UAAU,CAAC,IAClCV,wBAAwB,CAAChxB,IAAI,CAAC0xB,UAAU,CAAC,EACzC;MACA,IAAI,CAAC9oB,iBAAiB,CAAC5I,IAAI,CAAC0xB,UAAU,CAAC,EAAE;QACvCF,aAAa,GAAG,IAAI;QACpBrjB,KAAK,IAAI,EAAE;;;IAIfwB,OAAO,GAAGA,OAAO,CAACrC,MAAM,EAAE;GAC3B,CAAC;EAEF,OAAOa,KAAK;AACd;;ACnDe,SAASwjB,aAAaA,CAACC,QAAQ,EAAE;;;EAG9C,IAAIT,iBAAiB,CAACnxB,IAAI,CAAC4xB,QAAQ,CAAC,EAAE;IACpC,OAAO,CAAC,GAAG;;EAGb,OAAO,CAAC;AACV;;ACNe,SAASC,WAAWA,CACjCvrB,IAAI,EACJ6pB,UAAU,EACV9d,OAAO,EACP5Q,SAAS,EACT2R,QAAQ,EACR0e,YAAY,EACZ;;EAEA,IAAIA,YAAY,CAAChyB,IAAI,CAAC,UAAAH,GAAG;IAAA,OAAI2G,IAAI,KAAK3G,GAAG;IAAC,KAAKwD,SAAS,EAAE;IACxD,OAAO,KAAK;;;;;EAKd,IAAI,CAACmD,IAAI,IAAIA,IAAI,KAAK6pB,UAAU,IAAI7pB,IAAI,KAAK+L,OAAO,EAAE;IACpD,OAAO,KAAK;;EAGd,IAAQ1F,QAAQ,GAAKlL,SAAS,CAAtBkL,QAAQ;EAChB,IAAAD,UAAA,GAA+BhL,GAAG,CAACC,KAAK,CAAC2E,IAAI,CAAC;IAA5ByrB,QAAQ,GAAArlB,UAAA,CAAlBC,QAAQ;;;EAGhB,IAAIolB,QAAQ,KAAKplB,QAAQ,EAAE;IACzB,OAAO,KAAK;;;;;EAKd,IAAMqlB,QAAQ,GAAG1rB,IAAI,CAAC9G,OAAO,CAAC6S,OAAO,EAAE,EAAE,CAAC;EAC1C,IAAI,CAACye,QAAQ,CAAC9wB,IAAI,CAACgyB,QAAQ,CAAC,EAAE;IAC5B,OAAO,KAAK;;;;;EAKd,IAAIhB,wBAAwB,CAAChxB,IAAI,CAACoT,QAAQ,CAAC,EAAE;IAC3C,OAAO,KAAK;;;;EAId,IAAIA,QAAQ,CAAC/R,MAAM,GAAG,EAAE,EAAE;IACxB,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb;;AClDe,SAAS4wB,YAAYA,CAAC3rB,IAAI,EAAE4rB,SAAS,EAAE;;;;;EAKpD,IAAI,CAACA,SAAS,CAAClyB,IAAI,CAACsG,IAAI,CAAC,EAAE;IACzB,OAAO,CAAC,EAAE;;EAGZ,OAAO,CAAC;AACV;;ACRe,SAAS6rB,iBAAiBA,CAACP,QAAQ,EAAE;;EAElD,IAAIX,iBAAiB,CAACjxB,IAAI,CAAC4xB,QAAQ,CAAC,EAAE;IACpC,OAAO,EAAE;;EAGX,OAAO,CAAC;AACV;;ACPe,SAASQ,aAAaA,CAACR,QAAQ,EAAE;;EAE9C,IAAIV,gBAAgB,CAAClxB,IAAI,CAAC4xB,QAAQ,CAAC,EAAE;;;;;IAKnC,IAAIX,iBAAiB,CAACjxB,IAAI,CAAC4xB,QAAQ,CAAC,EAAE;MACpC,OAAO,CAAC,EAAE;;;EAId,OAAO,CAAC;AACV;;ACGO,SAASS,aAAaA,CAAChgB,OAAO,EAAE;EACrC,OAAO,IAAIlS,MAAM,KAAAwC,MAAA,CAAK0P,OAAO,GAAI,GAAG,CAAC;AACvC;AAEA,SAASgf,SAAOA,CAACC,KAAK,EAAEle,QAAQ,EAAE;EAChC,UAAAzQ,MAAA,CAAUyQ,QAAQ,IAAIke,KAAK,CAAC/xB,IAAI,EAAE,OAAAoD,MAAA,CAAI2uB,KAAK,CAAC1pB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAAjF,MAAA,CAAI2uB,KAAK,CAAC1pB,IAAI,CAC3E,IACF,CAAC,IAAI,EAAE;AACT;AAEA,AAAe,SAAS0qB,UAAUA,CAAAviB,IAAA,EAO/B;EAAA,IANDwiB,KAAK,GAAAxiB,IAAA,CAALwiB,KAAK;IACLpC,UAAU,GAAApgB,IAAA,CAAVogB,UAAU;IACV9d,OAAO,GAAAtC,IAAA,CAAPsC,OAAO;IACP5Q,SAAS,GAAAsO,IAAA,CAATtO,SAAS;IACT2F,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;IAAAorB,iBAAA,GAAAziB,IAAA,CACD+hB,YAAY;IAAZA,YAAY,GAAAU,iBAAA,cAAG,EAAE,GAAAA,iBAAA;EAEjB/wB,SAAS,GAAGA,SAAS,IAAIC,GAAG,CAACC,KAAK,CAACwuB,UAAU,CAAC;EAC9C,IAAM+B,SAAS,GAAGG,aAAa,CAAChgB,OAAO,CAAC;EACxC,IAAMwe,IAAI,GAAGpb,WAAW,CAACrO,CAAC,CAAC;;;;;;;;;EAS3B,IAAMqrB,WAAW,GAAGF,KAAK,CAACtwB,MAAM,CAAC,UAACywB,aAAa,EAAEC,IAAI,EAAK;;;;IAIxD,IAAMpnB,KAAK,GAAGC,QAAQ,CAACmnB,IAAI,CAAC;;;IAG5B,IAAI,CAACpnB,KAAK,CAACjF,IAAI,EAAE,OAAOosB,aAAa;IAErC,IAAMpsB,IAAI,GAAGxF,YAAY,CAACyK,KAAK,CAACjF,IAAI,CAAC;IACrC,IAAMgrB,KAAK,GAAGlqB,CAAC,CAACurB,IAAI,CAAC;IACrB,IAAMvf,QAAQ,GAAGke,KAAK,CAAC/xB,IAAI,EAAE;IAE7B,IACE,CAACsyB,WAAW,CAACvrB,IAAI,EAAE6pB,UAAU,EAAE9d,OAAO,EAAE5Q,SAAS,EAAE2R,QAAQ,EAAE0e,YAAY,CAAC,EAC1E;MACA,OAAOY,aAAa;;;;IAItB,IAAI,CAACA,aAAa,CAACpsB,IAAI,CAAC,EAAE;MACxBosB,aAAa,CAACpsB,IAAI,CAAC,GAAG;QACpB6H,KAAK,EAAE,CAAC;QACRiF,QAAQ,EAARA,QAAQ;QACR9M,IAAI,EAAJA;OACD;KACF,MAAM;MACLosB,aAAa,CAACpsB,IAAI,CAAC,CAAC8M,QAAQ,MAAAzQ,MAAA,CAC1B+vB,aAAa,CAACpsB,IAAI,CAAC,CAAC8M,QAAQ,OAAAzQ,MAAA,CAC1ByQ,QAAQ,CAAE;;IAGhB,IAAMwf,YAAY,GAAGF,aAAa,CAACpsB,IAAI,CAAC;IACxC,IAAMsrB,QAAQ,GAAGP,SAAO,CAACC,KAAK,EAAEle,QAAQ,CAAC;IACzC,IAAMxS,OAAO,GAAGH,cAAc,CAAC6F,IAAI,CAAC;IAEpC,IAAI6H,KAAK,GAAG8jB,YAAY,CAAC3rB,IAAI,EAAE4rB,SAAS,CAAC;IACzC/jB,KAAK,IAAIgkB,iBAAiB,CAACP,QAAQ,CAAC;IACpCzjB,KAAK,IAAIikB,aAAa,CAACR,QAAQ,CAAC;IAChCzjB,KAAK,IAAIwjB,aAAa,CAACC,QAAQ,CAAC;IAChCzjB,KAAK,IAAIghB,gBAAc,CAACmC,KAAK,CAAC;IAC9BnjB,KAAK,IAAIijB,oBAAoB,CAAC9qB,IAAI,CAAC;IACnC6H,KAAK,IAAIyiB,eAAe,CAAChwB,OAAO,EAAEiwB,IAAI,CAAC;IACvC1iB,KAAK,IAAIuiB,aAAa,CAACtd,QAAQ,EAAExS,OAAO,CAAC;IACzCuN,KAAK,IAAI+hB,eAAe,CAAC/hB,KAAK,EAAEgiB,UAAU,EAAE7pB,IAAI,CAAC;IAEjDssB,YAAY,CAACzkB,KAAK,GAAGA,KAAK;IAE1B,OAAOukB,aAAa;GACrB,EAAE,EAAE,CAAC;EAEN,OAAOhnB,gBAAA,CAAgB+mB,WAAW,CAAC,CAACpxB,MAAM,KAAK,CAAC,GAAG,IAAI,GAAGoxB,WAAW;AACvE;;AC9FA;AACA;AACA,IAAMI,2BAA2B,GAAG;EAClC9F,OAAO,WAAAA,QAAAhd,IAAA,EAA2C;IAAA,IAAxC3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEzH,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;MAAE8B,SAAS,GAAAsO,IAAA,CAATtO,SAAS;MAAA+wB,iBAAA,GAAAziB,IAAA,CAAE+hB,YAAY;MAAZA,YAAY,GAAAU,iBAAA,cAAG,EAAE,GAAAA,iBAAA;IAC5C/wB,SAAS,GAAGA,SAAS,IAAIC,GAAG,CAACC,KAAK,CAAChC,GAAG,CAAC;IAEvC,IAAMwwB,UAAU,GAAGrvB,YAAY,CAACnB,GAAG,CAAC;IACpC,IAAM0S,OAAO,GAAG9Q,cAAc,CAAC5B,GAAG,EAAE8B,SAAS,CAAC;IAE9C,IAAM8wB,KAAK,GAAGnrB,CAAC,CAAC,SAAS,CAAC,CAACgN,OAAO,EAAE;IAEpC,IAAM0e,WAAW,GAAGR,UAAU,CAAC;MAC7BC,KAAK,EAALA,KAAK;MACLpC,UAAU,EAAVA,UAAU;MACV9d,OAAO,EAAPA,OAAO;MACP5Q,SAAS,EAATA,SAAS;MACT2F,CAAC,EAADA,CAAC;MACD0qB,YAAY,EAAZA;KACD,CAAC;;;IAGF,IAAI,CAACgB,WAAW,EAAE,OAAO,IAAI;;;;IAI7B,IAAMC,OAAO,GAAGrnB,gBAAA,CAAgBonB,WAAW,CAAC,CAAC7wB,MAAM,CACjD,UAACC,GAAG,EAAEywB,IAAI,EAAK;MACb,IAAMK,UAAU,GAAGF,WAAW,CAACH,IAAI,CAAC;MACpC,OAAOK,UAAU,CAAC7kB,KAAK,GAAGjM,GAAG,CAACiM,KAAK,GAAG6kB,UAAU,GAAG9wB,GAAG;KACvD,EACD;MAAEiM,KAAK,EAAE,CAAC;KACZ,CAAC;;;;IAID,IAAI4kB,OAAO,CAAC5kB,KAAK,IAAI,EAAE,EAAE;MACvB,OAAO4kB,OAAO,CAACzsB,IAAI;;IAGrB,OAAO,IAAI;;AAEf,CAAC;;AC9CM,IAAM2sB,wBAAwB,GAAG,CAAC,QAAQ,CAAC;;ACKlD,SAASC,WAAWA,CAACvzB,GAAG,EAAE;EACxB,IAAM8B,SAAS,GAAGC,GAAG,CAACC,KAAK,CAAChC,GAAG,CAAC;EAChC,IAAQgN,QAAQ,GAAKlL,SAAS,CAAtBkL,QAAQ;EAChB,OAAOA,QAAQ;AACjB;AAEA,SAASwK,MAAMA,CAACxX,GAAG,EAAE;EACnB,OAAO;IACLA,GAAG,EAAHA,GAAG;IACH8Y,MAAM,EAAEya,WAAW,CAACvzB,GAAG;GACxB;AACH;AAEA,IAAMwzB,mBAAmB,GAAG;EAC1BpG,OAAO,WAAAA,QAAAhd,IAAA,EAAwB;IAAA,IAArB3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEzH,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;MAAE6tB,SAAS,GAAAzd,IAAA,CAATyd,SAAS;IACzB,IAAM4F,UAAU,GAAGhsB,CAAC,CAAC,qBAAqB,CAAC;IAC3C,IAAIgsB,UAAU,CAAC/xB,MAAM,KAAK,CAAC,EAAE;MAC3B,IAAMiF,IAAI,GAAG8sB,UAAU,CAACxrB,IAAI,CAAC,MAAM,CAAC;MACpC,IAAItB,IAAI,EAAE;QACR,OAAO6Q,MAAM,CAAC7Q,IAAI,CAAC;;;IAIvB,IAAM+sB,OAAO,GAAG/f,eAAe,CAAClM,CAAC,EAAE6rB,wBAAwB,EAAEzF,SAAS,CAAC;IACvE,IAAI6F,OAAO,EAAE;MACX,OAAOlc,MAAM,CAACkc,OAAO,CAAC;;IAGxB,OAAOlc,MAAM,CAACxX,GAAG,CAAC;;AAEtB,CAAC;;ACnCM,IAAM2zB,sBAAsB,GAAG,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;;ACMxE,SAASzc,OAAKA,CAAC7T,OAAO,EAAEoE,CAAC,EAAmB;EAAA,IAAjBmsB,SAAS,GAAArwB,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;EAC/CF,OAAO,GAAGA,OAAO,CAACxD,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE;EACjD,OAAO+zB,SAAS,CAACxwB,OAAO,EAAEuwB,SAAS,EAAE;IAAEE,OAAO,EAAE;GAAY,CAAC;AAC/D;AAEA,IAAMC,uBAAuB,GAAG;EAC9B3G,OAAO,WAAAA,QAAAhd,IAAA,EAA4B;IAAA,IAAzB3I,CAAC,GAAA2I,IAAA,CAAD3I,CAAC;MAAEpE,OAAO,GAAA+M,IAAA,CAAP/M,OAAO;MAAEwqB,SAAS,GAAAzd,IAAA,CAATyd,SAAS;IAC7B,IAAMpT,OAAO,GAAG9G,eAAe,CAAClM,CAAC,EAAEksB,sBAAsB,EAAE9F,SAAS,CAAC;IACrE,IAAIpT,OAAO,EAAE;MACX,OAAOvD,OAAK,CAACvC,SAAS,CAAC8F,OAAO,EAAEhT,CAAC,CAAC,CAAC;;;IAGrC,IAAMmsB,SAAS,GAAG,GAAG;IACrB,IAAMI,YAAY,GAAG3wB,OAAO,CAACI,KAAK,CAAC,CAAC,EAAEmwB,SAAS,GAAG,CAAC,CAAC;IACpD,OAAO1c,OAAK,CAACzP,CAAC,CAACusB,YAAY,CAAC,CAACp0B,IAAI,EAAE,EAAE6H,CAAC,EAAEmsB,SAAS,CAAC;;AAEtD,CAAC;;AClBD,IAAMK,YAAY,GAAG,SAAfA,YAAYA,CAAG5wB,OAAO,EAAI;EAC9B,IAAMoE,CAAC,GAAGxD,OAAO,CAACgU,IAAI,CAAC5U,OAAO,CAAC;EAC/B,IAAMyP,QAAQ,GAAGrL,CAAC,CAAC,KAAK,CAAC,CAAC6J,KAAK,EAAE;EACjC,IAAM1R,IAAI,GAAGD,eAAe,CAACmT,QAAQ,CAAClT,IAAI,EAAE,CAAC;EAC7C,OAAOA,IAAI,CAACwB,KAAK,CAAC,IAAI,CAAC,CAACM,MAAM;AAChC,CAAC;AAED,IAAMwyB,eAAe,GAAG,SAAlBA,eAAeA,CAAG7wB,OAAO,EAAI;EACjCA,OAAO,GAAGA,OAAO,CAACxD,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;EAC1CwD,OAAO,GAAGA,OAAO,CAACxD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EACtCwD,OAAO,GAAGA,OAAO,CAACvD,IAAI,EAAE;EACxB,OAAOuD,OAAO,CAACjC,KAAK,CAAC,GAAG,CAAC,CAACM,MAAM;AAClC,CAAC;AAED,IAAMyyB,yBAAyB,GAAG;EAChC/G,OAAO,WAAAA,QAAAhd,IAAA,EAAc;IAAA,IAAX/M,OAAO,GAAA+M,IAAA,CAAP/M,OAAO;IACf,IAAI+wB,KAAK,GAAGH,YAAY,CAAC5wB,OAAO,CAAC;IACjC,IAAI+wB,KAAK,KAAK,CAAC,EAAEA,KAAK,GAAGF,eAAe,CAAC7wB,OAAO,CAAC;IACjD,OAAO+wB,KAAK;;AAEhB,CAAC;;;;ACxBD,AAcA,IAAMC,gBAAgB,GAAG;;EAEvBvb,MAAM,EAAE,GAAG;EACX3G,KAAK,EAAEyb,qBAAqB,CAACR,OAAO;EACpC5T,cAAc,EAAEkV,6BAA6B,CAACtB,OAAO;EACrD7T,MAAM,EAAE4U,sBAAsB,CAACf,OAAO;EACtC/pB,OAAO,EAAE6pB,uBAAuB,CAACE,OAAO,CAACkH,IAAI,CAACpH,uBAAuB,CAAC;EACtE3S,cAAc,EAAE0V,4BAA4B,CAAC7C,OAAO;EACpDxT,GAAG,EAAEgV,mBAAmB,CAACxB,OAAO;EAChC5S,aAAa,EAAE0Y,2BAA2B,CAAC9F,OAAO;EAClDmH,cAAc,EAAEf,mBAAmB,CAACpG,OAAO;EAC3C3S,OAAO,EAAEsZ,uBAAuB,CAAC3G,OAAO;EACxCoH,UAAU,EAAEL,yBAAyB,CAAC/G,OAAO;EAC7CqH,SAAS,EAAE,SAAAA,UAAArkB,IAAA;IAAA,IAAG+B,KAAK,GAAA/B,IAAA,CAAL+B,KAAK;IAAA,OAAOuiB,eAAe,CAACC,YAAY,CAACxiB,KAAK,CAAC;;EAE7Dib,OAAO,WAAAA,QAAC5oB,OAAO,EAAE;IACf,IAAQ0H,IAAI,GAAQ1H,OAAO,CAAnB0H,IAAI;MAAEzE,CAAC,GAAKjD,OAAO,CAAbiD,CAAC;IAEf,IAAIyE,IAAI,IAAI,CAACzE,CAAC,EAAE;MACd,IAAMmtB,MAAM,GAAG3wB,OAAO,CAACgU,IAAI,CAAC/L,IAAI,CAAC;MACjC1H,OAAO,CAACiD,CAAC,GAAGmtB,MAAM;;IAGpB,IAAMziB,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC3N,OAAO,CAAC;IACjC,IAAMgV,cAAc,GAAG,IAAI,CAACA,cAAc,CAAChV,OAAO,CAAC;IACnD,IAAM+U,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC/U,OAAO,CAAC;IACnC,IAAMnB,OAAO,GAAG,IAAI,CAACA,OAAO,CAAAqD,eAAA,CAAAA,eAAA,KAAMlC,OAAO;MAAE2N,KAAK,EAALA;MAAO,CAAC;IACnD,IAAMoI,cAAc,GAAG,IAAI,CAACA,cAAc,CAAA7T,eAAA,CAAAA,eAAA,KAAMlC,OAAO;MAAEnB,OAAO,EAAPA;MAAS,CAAC;IACnE,IAAMuW,GAAG,GAAG,IAAI,CAACA,GAAG,CAAAlT,eAAA,CAAAA,eAAA,KAAMlC,OAAO;MAAEnB,OAAO,EAAPA;MAAS,CAAC;IAC7C,IAAMmX,aAAa,GAAG,IAAI,CAACA,aAAa,CAAChW,OAAO,CAAC;IACjD,IAAMiW,OAAO,GAAG,IAAI,CAACA,OAAO,CAAA/T,eAAA,CAAAA,eAAA,KAAMlC,OAAO;MAAEnB,OAAO,EAAPA;MAAS,CAAC;IACrD,IAAMmxB,UAAU,GAAG,IAAI,CAACA,UAAU,CAAA9tB,eAAA,CAAAA,eAAA,KAAMlC,OAAO;MAAEnB,OAAO,EAAPA;MAAS,CAAC;IAC3D,IAAMoxB,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC;MAAEtiB,KAAK,EAALA;KAAO,CAAC;IAC3C,IAAA0iB,oBAAA,GAAwB,IAAI,CAACN,cAAc,CAAC/vB,OAAO,CAAC;MAA5CxE,GAAG,GAAA60B,oBAAA,CAAH70B,GAAG;MAAE8Y,MAAM,GAAA+b,oBAAA,CAAN/b,MAAM;IAEnB,OAAO;MACL3G,KAAK,EAALA,KAAK;MACLoH,MAAM,EAANA,MAAM;MACNC,cAAc,EAAEA,cAAc,IAAI,IAAI;MACtCI,GAAG,EAAHA,GAAG;MACHW,cAAc,EAAdA,cAAc;MACdlX,OAAO,EAAPA,OAAO;MACPmX,aAAa,EAAbA,aAAa;MACbxa,GAAG,EAAHA,GAAG;MACH8Y,MAAM,EAANA,MAAM;MACN2B,OAAO,EAAPA,OAAO;MACP+Z,UAAU,EAAVA,UAAU;MACVC,SAAS,EAATA;KACD;;AAEL,CAAC;;;;;AC5DD;AACA,AAAO,SAASK,gBAAgBA,CAAChiB,QAAQ,EAAErL,CAAC,EAAA2I,IAAA,EAAa;EAAA,IAAT8G,KAAK,GAAA9G,IAAA,CAAL8G,KAAK;EACnD,IAAI,CAACA,KAAK,EAAE,OAAOpE,QAAQ;EAE3BrL,CAAC,CAACyP,KAAK,CAACjU,IAAI,CAAC,GAAG,CAAC,EAAE6P,QAAQ,CAAC,CAAC7I,MAAM,EAAE;EAErC,OAAO6I,QAAQ;AACjB;;AAEA;AACA,AAAO,SAASiiB,iBAAiBA,CAACjiB,QAAQ,EAAErL,CAAC,EAAA4I,KAAA,EAAkB;EAAA,IAAdgJ,UAAU,GAAAhJ,KAAA,CAAVgJ,UAAU;EACzD,IAAI,CAACA,UAAU,EAAE,OAAOvG,QAAQ;EAEhC/G,gBAAA,CAAgBsN,UAAU,CAAC,CAAClJ,OAAO,CAAC,UAAAlE,GAAG,EAAI;IACzC,IAAM+oB,QAAQ,GAAGvtB,CAAC,CAACwE,GAAG,EAAE6G,QAAQ,CAAC;IACjC,IAAM9K,KAAK,GAAGqR,UAAU,CAACpN,GAAG,CAAC;;;IAG7B,IAAI,OAAOjE,KAAK,KAAK,QAAQ,EAAE;MAC7BgtB,QAAQ,CAACptB,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;QAC7BuD,aAAa,CAAC5D,CAAC,CAACK,IAAI,CAAC,EAAEL,CAAC,EAAE4R,UAAU,CAACpN,GAAG,CAAC,CAAC;OAC3C,CAAC;KACH,MAAM,IAAI,OAAOjE,KAAK,KAAK,UAAU,EAAE;;MAEtCgtB,QAAQ,CAACptB,IAAI,CAAC,UAACrG,KAAK,EAAEuG,IAAI,EAAK;QAC7B,IAAM0P,MAAM,GAAGxP,KAAK,CAACP,CAAC,CAACK,IAAI,CAAC,EAAEL,CAAC,CAAC;;QAEhC,IAAI,OAAO+P,MAAM,KAAK,QAAQ,EAAE;UAC9BnM,aAAa,CAAC5D,CAAC,CAACK,IAAI,CAAC,EAAEL,CAAC,EAAE+P,MAAM,CAAC;;OAEpC,CAAC;;GAEL,CAAC;EAEF,OAAO1E,QAAQ;AACjB;AAEA,SAASmiB,oBAAoBA,CAACxtB,CAAC,EAAE8N,SAAS,EAAE2f,WAAW,EAAEC,aAAa,EAAE;EACtE,OAAO5f,SAAS,CAACpV,IAAI,CAAC,UAAAsV,QAAQ,EAAI;IAChC,IAAI2f,cAAA,CAAc3f,QAAQ,CAAC,EAAE;MAC3B,IAAIyf,WAAW,EAAE;QACf,OAAOzf,QAAQ,CAACnT,MAAM,CAAC,UAACC,GAAG,EAAEwS,CAAC;UAAA,OAAKxS,GAAG,IAAIkF,CAAC,CAACsN,CAAC,CAAC,CAACrT,MAAM,GAAG,CAAC;WAAE,IAAI,CAAC;;MAGlE,IAAA2zB,SAAA,GAAAzyB,cAAA,CAAkB6S,QAAQ;QAAnBV,CAAC,GAAAsgB,SAAA;QAAEptB,IAAI,GAAAotB,SAAA;MACd,OACE,CAACF,aAAa,IAAK,CAACA,aAAa,IAAI1tB,CAAC,CAACsN,CAAC,CAAC,CAACrT,MAAM,KAAK,CAAE,KACvD+F,CAAC,CAACsN,CAAC,CAAC,CAAC9M,IAAI,CAACA,IAAI,CAAC,IACfR,CAAC,CAACsN,CAAC,CAAC,CACD9M,IAAI,CAACA,IAAI,CAAC,CACVnI,IAAI,EAAE,KAAK,EAAE;;IAIpB,OACE,CAACq1B,aAAa,IAAK,CAACA,aAAa,IAAI1tB,CAAC,CAACgO,QAAQ,CAAC,CAAC/T,MAAM,KAAK,CAAE,KAC9D+F,CAAC,CAACgO,QAAQ,CAAC,CACR7V,IAAI,EAAE,CACNE,IAAI,EAAE,KAAK,EAAE;GAEnB,CAAC;AACJ;AAEA,AAAO,SAASw1B,MAAMA,CAACtI,IAAI,EAAE;EAC3B,IAAQvlB,CAAC,GAAgDulB,IAAI,CAArDvlB,CAAC;IAAE6M,IAAI,GAA0C0Y,IAAI,CAAlD1Y,IAAI;IAAEihB,cAAc,GAA0BvI,IAAI,CAA5CuI,cAAc;IAAAC,iBAAA,GAA0BxI,IAAI,CAA5BkI,WAAW;IAAXA,WAAW,GAAAM,iBAAA,cAAG,KAAK,GAAAA,iBAAA;;EAEpD,IAAI,CAACD,cAAc,EAAE,OAAO,IAAI;;;;EAIhC,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE,OAAOA,cAAc;EAE7D,IAAQhgB,SAAS,GAA2CggB,cAAc,CAAlEhgB,SAAS;IAAAkgB,qBAAA,GAA2CF,cAAc,CAAvDzb,cAAc;IAAdA,cAAc,GAAA2b,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAEN,aAAa,GAAKI,cAAc,CAAhCJ,aAAa;EAEvD,IAAMO,qBAAqB,GAAGphB,IAAI,KAAK,gBAAgB,IAAI6gB,aAAa;EAExE,IAAMQ,gBAAgB,GAAGV,oBAAoB,CAC3CxtB,CAAC,EACD8N,SAAS,EACT2f,WAAW,EACXQ,qBACF,CAAC;EAED,IAAI,CAACC,gBAAgB,EAAE,OAAO,IAAI;EAElC,SAASC,iBAAiBA,CAAC7tB,KAAK,EAAE;IAChCwL,iBAAiB,CAACxL,KAAK,EAAEN,CAAC,EAAEulB,IAAI,CAAChtB,GAAG,IAAI,EAAE,CAAC;IAC3C80B,gBAAgB,CAAC/sB,KAAK,EAAEN,CAAC,EAAE8tB,cAAc,CAAC;IAC1CR,iBAAiB,CAAChtB,KAAK,EAAEN,CAAC,EAAE8tB,cAAc,CAAC;IAC3C,OAAOxtB,KAAK;;EAGd,SAAS8tB,UAAUA,GAAG;;;IAGpB,IAAI/iB,QAAQ;;;;;;IAMZ,IAAIsiB,cAAA,CAAcO,gBAAgB,CAAC,EAAE;MACnC7iB,QAAQ,GAAGrL,CAAC,CAACkuB,gBAAgB,CAAC1yB,IAAI,CAAC,GAAG,CAAC,CAAC;MACxC,IAAM6yB,QAAQ,GAAGruB,CAAC,CAAC,aAAa,CAAC;MACjCqL,QAAQ,CAAClL,IAAI,CAAC,UAACC,CAAC,EAAEuC,OAAO,EAAK;QAC5B0rB,QAAQ,CAAC/kB,MAAM,CAAC3G,OAAO,CAAC;OACzB,CAAC;MAEF0I,QAAQ,GAAGgjB,QAAQ;KACpB,MAAM;MACLhjB,QAAQ,GAAGrL,CAAC,CAACkuB,gBAAgB,CAAC;;;;IAIhC7iB,QAAQ,CAAC1M,IAAI,CAACqB,CAAC,CAAC,aAAa,CAAC,CAAC;IAC/BqL,QAAQ,GAAGA,QAAQ,CAACnF,MAAM,EAAE;IAC5BmF,QAAQ,GAAG8iB,iBAAiB,CAAC9iB,QAAQ,CAAC;;;;;;;IAOtC,IAAIqiB,aAAa,EAAE;MACjB,OACEriB,QAAQ,CACL1H,QAAQ,EAAE,CACVqJ,OAAO;;OAEPV,MAAM,CACL,UAAAgiB,EAAE;QAAA,OACAtuB,CAAC,CAACsuB,EAAE,CAAC,CACFn2B,IAAI,EAAE,CACNE,IAAI,EAAE,KAAK,EAAE;OACpB,CAAC,CACAkM,GAAG,CAAC,UAAA+pB,EAAE;QAAA,OAAItuB,CAAC,CAACyE,IAAI,CAACzE,CAAC,CAACsuB,EAAE,CAAC,CAAC;QAAC;;IAI/B,OAAOtuB,CAAC,CAACyE,IAAI,CAAC4G,QAAQ,CAAC;;EAGzB,IAAIoiB,WAAW,EAAE;IACf,OAAOW,UAAU,CAACF,AAAgB,CAAC;;EAGrC,IAAIK,MAAM;EACV,IAAIxe,MAAM;;;EAGV,IAAI4d,cAAA,CAAcO,gBAAgB,CAAC,EAAE;IACnC,IAAAM,iBAAA,GAAArzB,cAAA,CAAoC+yB,gBAAgB;MAA7ClgB,QAAQ,GAAAwgB,iBAAA;MAAEhuB,IAAI,GAAAguB,iBAAA;MAAEC,SAAS,GAAAD,iBAAA;IAChCD,MAAM,GAAGvuB,CAAC,CAACgO,QAAQ,CAAC;IACpBugB,MAAM,GAAGJ,iBAAiB,CAACI,MAAM,CAAC;IAClCxe,MAAM,GAAGwe,MAAM,CAAChqB,GAAG,CAAC,UAACnE,CAAC,EAAEkuB,EAAE,EAAK;MAC7B,IAAMI,IAAI,GAAG1uB,CAAC,CAACsuB,EAAE,CAAC,CACf9tB,IAAI,CAACA,IAAI,CAAC,CACVnI,IAAI,EAAE;MACT,OAAOo2B,SAAS,GAAGA,SAAS,CAACC,IAAI,CAAC,GAAGA,IAAI;KAC1C,CAAC;GACH,MAAM;IACLH,MAAM,GAAGvuB,CAAC,CAACkuB,gBAAgB,CAAC;IAC5BK,MAAM,GAAGJ,iBAAiB,CAACI,MAAM,CAAC;IAClCxe,MAAM,GAAGwe,MAAM,CAAChqB,GAAG,CAAC,UAACnE,CAAC,EAAEkuB,EAAE;MAAA,OACxBtuB,CAAC,CAACsuB,EAAE,CAAC,CACFn2B,IAAI,EAAE,CACNE,IAAI,EAAE;KACX,CAAC;;EAGH0X,MAAM,GACJ4d,cAAA,CAAc5d,MAAM,CAAC/C,OAAO,EAAE,CAAC,IAAI0gB,aAAa,GAC5C3d,MAAM,CAAC/C,OAAO,EAAE,GAChB+C,MAAM,CAAC,CAAC,CAAC;;;EAGf,IAAIsC,cAAc,IAAI8S,QAAQ,CAACtY,IAAI,CAAC,EAAE;IACpC,OAAOsY,QAAQ,CAACtY,IAAI,CAAC,CAACkD,MAAM,EAAA9Q,eAAA,CAAAA,eAAA,KAAOsmB,IAAI,GAAKuI,cAAc,CAAE,CAAC;;EAG/D,OAAO/d,MAAM;AACf;AAEA,AAAO,SAAS4e,mBAAmBA,CAACnQ,MAAM,EAAE+G,IAAI,EAAE;EAChD,IAAMqJ,OAAO,GAAG,EAAE;EAClBtqB,gBAAA,CAAgBka,MAAM,CAAC,CAAC9V,OAAO,CAAC,UAAAmmB,CAAC,EAAI;IACnC,IAAI,CAACD,OAAO,CAACC,CAAC,CAAC,EAAE;MACfD,OAAO,CAACC,CAAC,CAAC,GAAGhB,MAAM,CAAA5uB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;QAAE1Y,IAAI,EAAEgiB,CAAC;QAAEf,cAAc,EAAEtP,MAAM,CAACqQ,CAAC;QAAG,CAAC;;GAEvE,CAAC;EACF,OAAOD,OAAO;AAChB;AAEA,SAASE,aAAaA,CAACvJ,IAAI,EAAE;EAC3B,IAAQ1Y,IAAI,GAAiC0Y,IAAI,CAAzC1Y,IAAI;IAAEsE,SAAS,GAAsBoU,IAAI,CAAnCpU,SAAS;IAAA4d,cAAA,GAAsBxJ,IAAI,CAAxByJ,QAAQ;IAARA,QAAQ,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA;EAExC,IAAMhf,MAAM,GAAG8d,MAAM,CAAA5uB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;IAAEuI,cAAc,EAAE3c,SAAS,CAACtE,IAAI;IAAG,CAAC;;;EAGnE,IAAIkD,MAAM,EAAE;IACV,OAAOA,MAAM;;;;;EAKf,IAAIif,QAAQ,EAAE,OAAOpC,gBAAgB,CAAC/f,IAAI,CAAC,CAAC0Y,IAAI,CAAC;EAEjD,OAAO,IAAI;AACb;AAEA,IAAM0J,aAAa,GAAG;EACpBtJ,OAAO,WAAAA,UAAqC;IAAA,IAApCxU,SAAS,GAAArV,SAAA,CAAA7B,MAAA,QAAA6B,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG8wB,gBAAgB;IAAA,IAAErH,IAAI,GAAAzpB,SAAA,CAAA7B,MAAA,OAAA6B,SAAA,MAAAC,SAAA;IACxC,IAAAmzB,KAAA,GAAwC3J,IAAI;MAApC4J,WAAW,GAAAD,KAAA,CAAXC,WAAW;MAAEC,cAAc,GAAAF,KAAA,CAAdE,cAAc;;IAEnC,IAAIje,SAAS,CAACE,MAAM,KAAK,GAAG,EAAE,OAAOF,SAAS,CAACwU,OAAO,CAACJ,IAAI,CAAC;IAE5DA,IAAI,GAAAtmB,eAAA,CAAAA,eAAA,KACCsmB,IAAI;MACPpU,SAAS,EAATA;MACD;IAED,IAAIge,WAAW,EAAE;MACf,IAAMvzB,QAAO,GAAGkzB,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KACxBsmB,IAAI;QACP1Y,IAAI,EAAE,SAAS;QACf4gB,WAAW,EAAE,IAAI;QACjB/iB,KAAK,EAAE0kB;QACR,CAAC;MACF,OAAO;QACLxzB,OAAO,EAAPA;OACD;;IAEH,IAAIyzB,eAAe,GAAG,EAAE;IACxB,IAAIle,SAAS,CAACqN,MAAM,EAAE;MACpB6Q,eAAe,GAAGV,mBAAmB,CAACxd,SAAS,CAACqN,MAAM,EAAE+G,IAAI,CAAC;;IAE/D,IAAM7a,KAAK,GAAGokB,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE;MAAS,CAAC;IACvD,IAAMkF,cAAc,GAAG+c,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE;MAAkB,CAAC;IACzE,IAAMiF,MAAM,GAAGgd,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE;MAAU,CAAC;IACzD,IAAMkG,aAAa,GAAG+b,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE;MAAiB,CAAC;IACvE,IAAIjR,OAAO,GAAGkzB,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KACtBsmB,IAAI;MACP1Y,IAAI,EAAE,SAAS;MACf4gB,WAAW,EAAE,IAAI;MACjB/iB,KAAK,EAALA;MACD,CAAC;IACF9O,OAAO,GAAG+xB,cAAA,CAAc/xB,OAAO,CAAC,GAAGA,OAAO,CAACJ,IAAI,CAAC,EAAE,CAAC,GAAGI,OAAO;IAE7D,IAAMkX,cAAc,GAAGgc,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAC/BsmB,IAAI;MACP1Y,IAAI,EAAE,gBAAgB;MACtBjR,OAAO,EAAPA;MACD,CAAC;IACF,IAAMoX,OAAO,GAAG8b,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE,SAAS;MAAEjR,OAAO,EAAPA;MAAS,CAAC;IAEpE,IAAMuW,GAAG,GAAG2c,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE,KAAK;MAAEjR,OAAO,EAAPA,OAAO;MAAEoX,OAAO,EAAPA;MAAS,CAAC;IACrE,IAAM+Z,UAAU,GAAG+B,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE,YAAY;MAAEjR,OAAO,EAAPA;MAAS,CAAC;IAC1E,IAAMoxB,SAAS,GAAG8B,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAAMsmB,IAAI;MAAE1Y,IAAI,EAAE,WAAW;MAAEnC,KAAK,EAALA;MAAO,CAAC;IACtE,IAAA4kB,KAAA,GAAwBR,aAAa,CAAA7vB,eAAA,CAAAA,eAAA,KAChCsmB,IAAI;QACP1Y,IAAI,EAAE;QACP,CAAC,IAAI;QAAEtU,GAAG,EAAE,IAAI;QAAE8Y,MAAM,EAAE;OAAM;MAHzB9Y,GAAG,GAAA+2B,KAAA,CAAH/2B,GAAG;MAAE8Y,MAAM,GAAAie,KAAA,CAANje,MAAM;IAKnB,OAAApS,eAAA;MACEyL,KAAK,EAALA,KAAK;MACL9O,OAAO,EAAPA,OAAO;MACPkW,MAAM,EAANA,MAAM;MACNC,cAAc,EAAdA,cAAc;MACde,cAAc,EAAdA,cAAc;MACdX,GAAG,EAAHA,GAAG;MACHY,aAAa,EAAbA,aAAa;MACbxa,GAAG,EAAHA,GAAG;MACH8Y,MAAM,EAANA,MAAM;MACN2B,OAAO,EAAPA,OAAO;MACP+Z,UAAU,EAAVA,UAAU;MACVC,SAAS,EAATA;OACGqC,eAAe;;AAGxB,CAAC;;;;;AC3RD,SAK8BE,eAAeA,CAAArxB,EAAA;EAAA,QAAAsxB,gBAAA,GAAAA,gBAAA,IAAAnxB,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAA9B,SAAAC,QAAAmK,IAAA;IAAA,IAAAoK,aAAA,EAAAtO,IAAA,EAAAzE,CAAA,EAAAomB,SAAA,EAAArW,MAAA,EAAA0f,SAAA,EAAA/kB,KAAA,EAAAnS,GAAA,EAAAm3B,KAAA,EAAAhF,YAAA,EAAAiF,aAAA,EAAAC,cAAA,EAAA7C,UAAA;IAAA,OAAAzuB,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACbgU,aAAa,GAAApK,IAAA,CAAboK,aAAa,EACbtO,IAAI,GAAAkE,IAAA,CAAJlE,IAAI,EACJzE,CAAC,GAAA2I,IAAA,CAAD3I,CAAC,EACDomB,SAAS,GAAAzd,IAAA,CAATyd,SAAS,EACTrW,MAAM,GAAApH,IAAA,CAANoH,MAAM,EACN0f,SAAS,GAAA9mB,IAAA,CAAT8mB,SAAS,EACT/kB,KAAK,GAAA/B,IAAA,CAAL+B,KAAK,EACLnS,GAAG,GAAAoQ,IAAA,CAAHpQ,GAAG;;UAGCm3B,KAAK,GAAG,CAAC;UACPhF,YAAY,GAAG,CAAChxB,YAAY,CAACnB,GAAG,CAAC,CAAC;;QAExC;UAAA,MACOwa,aAAa,IAAI2c,KAAK,GAAG,EAAE;YAAA7wB,QAAA,CAAAE,IAAA;YAAA;;UAChC2wB,KAAK,IAAI,CAAC;;UACV7wB,QAAA,CAAAE,IAAA;UAAA,OACU2Q,QAAQ,CAACC,MAAM,CAACoD,aAAa,CAAC;QAAA;UAAxC/S,CAAC,GAAAnB,QAAA,CAAAY,IAAA;UACDgF,IAAI,GAAGzE,CAAC,CAACyE,IAAI,EAAE;UAETkrB,aAAa,GAAG;YACpBp3B,GAAG,EAAEwa,aAAa;YAClBtO,IAAI,EAAJA,IAAI;YACJzE,CAAC,EAADA,CAAC;YACDomB,SAAS,EAATA,SAAS;YACTgJ,cAAc,EAAE1kB,KAAK;YACrBggB,YAAY,EAAZA;WACD;UAEKkF,cAAc,GAAGX,aAAa,CAACtJ,OAAO,CAAC8J,SAAS,EAAEE,aAAa,CAAC;UAEtEjF,YAAY,CAACpvB,IAAI,CAACyX,aAAa,CAAC;UAChChD,MAAM,GAAA9Q,eAAA,CAAAA,eAAA,KACD8Q,MAAM;YACTnU,OAAO,KAAAL,MAAA,CAAKwU,MAAM,CAACnU,OAAO,mBAAAL,MAAA,CAAgBm0B,KAAK,WAAAn0B,MAAA,CAC7Cq0B,cAAc,CAACh0B,OAAO;YAEzB;;;UAGDmX,aAAa,GAAG6c,cAAc,CAAC7c,aAAa;UAAClU,QAAA,CAAAE,IAAA;UAAA;QAAA;UAGzCguB,UAAU,GAAGH,gBAAgB,CAACG,UAAU,CAAC;YAC7CnxB,OAAO,UAAAL,MAAA,CAAUwU,MAAM,CAACnU,OAAO;WAChC,CAAC;UAAA,OAAAiD,QAAA,CAAAa,MAAA,WAAAT,eAAA,CAAAA,eAAA,KAEG8Q,MAAM;YACT8f,WAAW,EAAEH,KAAK;YAClBI,cAAc,EAAEJ,KAAK;YACrB3C,UAAU,EAAVA;;QAAU;QAAA;UAAA,OAAAluB,QAAA,CAAAgB,IAAA;;OAAArB,OAAA;GAEb,IAAAsB,KAAA,OAAAhE,SAAA;AAAA;;;;;AC1DD,AAWA,IAAMi0B,MAAM,GAAG;EACPx1B,KAAK,WAAAA,MAAChC,GAAG,EAA0B;IAAA,IAAAsX,UAAA,GAAA/T,SAAA;IAAA,OAAAuC,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,UAAAC;MAAA,IAAAmK,IAAA,EAAAlE,IAAA,EAAA8gB,IAAA,EAAAyK,mBAAA,EAAAC,aAAA,EAAAlB,cAAA,EAAAC,QAAA,EAAAkB,iBAAA,EAAAnyB,WAAA,EAAAoyB,aAAA,EAAAryB,OAAA,EAAA0gB,MAAA,EAAA4R,eAAA,EAAA/1B,SAAA,EAAA2F,CAAA,EAAAyvB,SAAA,EAAArJ,SAAA,EAAAiK,aAAA,EAAAtgB,MAAA,EAAAugB,OAAA,EAAA5lB,KAAA,EAAAqI,aAAA,EAAAwd,eAAA;MAAA,OAAAjyB,mBAAA,CAAAK,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA4J,IAAA,GAAAkH,UAAA,CAAA5V,MAAA,QAAA4V,UAAA,QAAA9T,SAAA,GAAA8T,UAAA,MAAJ,EAAE,EAApBpL,IAAI,GAAAkE,IAAA,CAAJlE,IAAI,EAAK8gB,IAAI,GAAAiL,wBAAA,CAAA7nB,IAAA,EAAA8nB,SAAA;YAAAT,mBAAA,GAQ1BzK,IAAI,CANN0K,aAAa,EAAbA,aAAa,GAAAD,mBAAA,cAAG,IAAI,GAAAA,mBAAA,EAAAjB,cAAA,GAMlBxJ,IAAI,CALNyJ,QAAQ,EAARA,QAAQ,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA,EAAAmB,iBAAA,GAKb3K,IAAI,CAJNxnB,WAAW,EAAXA,WAAW,GAAAmyB,iBAAA,cAAG,MAAM,GAAAA,iBAAA,EAAAC,aAAA,GAIlB5K,IAAI,CAHNznB,OAAO,EAAPA,OAAO,GAAAqyB,aAAA,cAAG,EAAE,GAAAA,aAAA,EACZ3R,MAAM,GAEJ+G,IAAI,CAFN/G,MAAM,EACN4R,eAAe,GACb7K,IAAI,CADN6K,eAAe;;;YAMjB,IAAI,CAAC73B,GAAG,IAAIiE,OAAO,CAACC,OAAO,EAAE;cAC3BlE,GAAG,GAAGgH,MAAM,CAACmxB,QAAQ,CAACxxB,IAAI,CAAC;cAC3BuF,IAAI,GAAGA,IAAI,IAAIjI,OAAO,CAACiI,IAAI,EAAE;;YAGzBpK,SAAS,GAAGC,GAAG,CAACC,KAAK,CAAChC,GAAG,CAAC;YAAA,IAE3B0Y,WAAW,CAAC5W,SAAS,CAAC;cAAAwE,QAAA,CAAAE,IAAA;cAAA;;YAAA,OAAAF,QAAA,CAAAa,MAAA,WAClB;cACL9B,KAAK,EAAE,IAAI;cACXgC,OAAO,EACL;aACH;UAAA;YAAAf,QAAA,CAAAE,IAAA;YAAA,OAGa2Q,QAAQ,CAACC,MAAM,CAACpX,GAAG,EAAEkM,IAAI,EAAEpK,SAAS,EAAEyD,OAAO,CAAC;UAAA;YAAxDkC,CAAC,GAAAnB,QAAA,CAAAY,IAAA;YAAA,KAGHO,CAAC,CAACkQ,MAAM;cAAArR,QAAA,CAAAE,IAAA;cAAA;;YAAA,OAAAF,QAAA,CAAAa,MAAA,WACHM,CAAC;UAAA;;YAIV,IAAIowB,eAAe,EAAE;cACnBO,YAAkB,CAACP,eAAe,CAAC;;YAG/BX,SAAS,GAAGhP,YAAY,CAACloB,GAAG,CAAC;;;YAKnC,IAAI,CAACkM,IAAI,EAAE;cACTA,IAAI,GAAGzE,CAAC,CAACyE,IAAI,EAAE;;;;;YAKX2hB,SAAS,GAAGpmB,CAAC,CAAC,MAAM,CAAC,CACxBuE,GAAG,CAAC,UAACnE,CAAC,EAAEC,IAAI;cAAA,OAAKL,CAAC,CAACK,IAAI,CAAC,CAACG,IAAI,CAAC,MAAM,CAAC;cAAC,CACtCwM,OAAO,EAAE;YAERqjB,aAAa,GAAG,EAAE;YACtB,IAAI7R,MAAM,EAAE;cACV6R,aAAa,GAAG1B,mBAAmB,CAACnQ,MAAM,EAAE;gBAAExe,CAAC,EAADA,CAAC;gBAAEzH,GAAG,EAAHA,GAAG;gBAAEkM,IAAI,EAAJA;eAAM,CAAC;;YAG3DsL,MAAM,GAAGkf,aAAa,CAACtJ,OAAO,CAAC8J,SAAS,EAAE;cAC5Cl3B,GAAG,EAAHA,GAAG;cACHkM,IAAI,EAAJA,IAAI;cACJzE,CAAC,EAADA,CAAC;cACDomB,SAAS,EAATA,SAAS;cACT/rB,SAAS,EAATA,SAAS;cACT20B,QAAQ,EAARA,QAAQ;cACRjxB,WAAW,EAAXA;aACD,CAAC;YAAAuyB,OAAA,GAE+BvgB,MAAM,EAA/BrF,KAAK,GAAA4lB,OAAA,CAAL5lB,KAAK,EAAEqI,aAAa,GAAAud,OAAA,CAAbvd,aAAa;YAE5B,MACIkd,aAAa,IAAIld,aAAa;cAAAlU,QAAA,CAAAE,IAAA;cAAA;;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACjBwwB,eAAe,CAAC;cAC7BE,SAAS,EAATA,SAAS;cACT1c,aAAa,EAAbA,aAAa;cACbtO,IAAI,EAAJA,IAAI;cACJzE,CAAC,EAADA,CAAC;cACDomB,SAAS,EAATA,SAAS;cACTrW,MAAM,EAANA,MAAM;cACNrF,KAAK,EAALA,KAAK;cACLnS,GAAG,EAAHA;aACD,CAAC;UAAA;YATFwX,MAAM,GAAAlR,QAAA,CAAAY,IAAA;YAAAZ,QAAA,CAAAE,IAAA;YAAA;UAAA;YAWNgR,MAAM,GAAA9Q,eAAA,CAAAA,eAAA,KACD8Q,MAAM;cACT8f,WAAW,EAAE,CAAC;cACdC,cAAc,EAAE;cACjB;UAAC;YAGJ,IAAI/xB,WAAW,KAAK,UAAU,EAAE;cACxBwyB,eAAe,GAAG,IAAIK,eAAe,EAAE;cAC7C7gB,MAAM,CAACnU,OAAO,GAAG20B,eAAe,CAACM,QAAQ,CAAC9gB,MAAM,CAACnU,OAAO,CAAC;aAC1D,MAAM,IAAImC,WAAW,KAAK,MAAM,EAAE;cACjCgS,MAAM,CAACnU,OAAO,GAAGoE,CAAC,CAAC7H,IAAI,CAAC6H,CAAC,CAAC+P,MAAM,CAACnU,OAAO,CAAC,CAAC;;;;YAI5C,IAAI,CAAC6zB,SAAS,EAAE;cACd1f,MAAM,CAACnU,OAAO,GAAG6I,IAAI;;YACtB,OAAA5F,QAAA,CAAAa,MAAA,WAAAT,eAAA,CAAAA,eAAA,KAEW8Q,MAAM,GAAKsgB,aAAa;UAAA;UAAA;YAAA,OAAAxxB,QAAA,CAAAgB,IAAA;;SAAArB,OAAA;;GACrC;EAED/B,OAAO,EAAE,CAAC,CAACD,OAAO,CAACC,OAAO;;;EAI1BwB,aAAa,WAAAA,cAAC1F,GAAG,EAAE;IACjB,OAAOmX,QAAQ,CAACC,MAAM,CAACpX,GAAG,CAAC;GAC5B;EAEDkZ,YAAY,WAAAA,eAACN,SAAS,EAAE;IACtB,OAAOwf,YAAkB,CAACxf,SAAS,CAAC;;AAExC,CAAC;;;;"}